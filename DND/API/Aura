/*------------------
Aura 0.35
------------------*/
on("ready", function() {
    state.auraColorOn = true; //global on or off
    state.auraBar = "bar1"; //bar to use
    state.auraTint = false; //use tint instead?
    state.auraPerc = 50; //precent to start showing
    state.auraDead = true; //show dead X status
    log("Token Health Aura/Tint v 0.3 Ready");
});
on("chat:message", function(msg) {
    var msgFormula = msg.content.split(/\s+/);
    var command = msgFormula[0].toUpperCase();
    if(msg.type == "api" && command.indexOf("!AURA") !== -1) {
        var option = msgFormula[1];
        if(option == "--help") {
            sendChat('API', "/w GM " + "<br>Bar:<br>[" + state.auraBar + "](!attackroll)" + "<br>Use Tint:<br>[" + state.auraTint + "](!attackroll)" + "<br>Percentage:<br>[" + state.auraPerc + "](!attackroll)" + "<br>Is on:<br>[" + state.auraColorOn + "](!attackroll)" + "<br>Show Death:<br>[" + state.auraDead + "](!attackroll)");
        }
    }
});
on("change:token", function(obj) {
    var bar = state.auraBar;
    var tint = state.auraTint;
    var onPerc = state.auraPerc;
    var ColorOn = state.auraColorOn;
    var dead = state.auraDead;
    if(obj.get("represents") !== "") {
        if(ColorOn != true) return; //Check Toggle
        //Check bars
        if(obj.get(bar + "_max") == "" && obj.get(bar + "_value") == "") return;
        var maxValue = parseInt(obj.get(bar + "_max"), 10);
        var curValue = parseInt(obj.get(bar + "_value"), 10);
        if(isNaN(maxValue) && isNaN(curValue)) return;
        //Calc percentage
        var percReal = Math.round((curValue / maxValue) * 100);
        var perc = Math.round((curValue / maxValue) * 120);
        //Set dead
        if(curValue <= 0 && dead == true) obj.set("status_dead", true);
        else if(dead == true) obj.set("status_dead", false);
        //Monster or Player
        var oCharacter = getObj('character', obj.get("_represents"));
        var type = (oCharacter.get("controlledby") === "") ? 'Monster' : 'Player';
        //SET PLAYER AURA------------
        if(type == 'Player') {
            if(percReal > onPerc) {
                SetAuraNone(obj);
                return;
            }
            var cBy = oCharacter.get('controlledby');
            if(cBy.split(',').length == 1 && cBy != 'all') {
                var player = getObj('player', cBy);
                var pColor = player.get('color');
                var markerColor = nEWcolor(perc);
                if(tint == true) obj.set({
                    'tint_color': markerColor,
                });
                else {
                    obj.set({
                        'aura1_radius': 0.7,
                        'aura2_radius': -0.1,
                        'aura1_color': markerColor,
                        'aura2_color': pColor,
                        'showplayers_aura1': true,
                        'showplayers_aura2': true,
                        'showplayers_name': false,
                        'showname': false
                    });
                }
            }
        }
        //SET NPC AURA------------
        if(type == 'Monster') {
            if(percReal > onPerc) {
                SetAuraNone(obj);
                return;
            }
            var markerColor = nEWcolor(perc);
            if(tint == true) obj.set({
                'tint_color': markerColor,
            });
            else {
                obj.set({
                    'aura1_radius': 0.7,
                    'aura2_radius': -0.1,
                    'aura1_color': markerColor,
                    'aura2_color': '#ffffff',
                    'showplayers_aura1': true,
                    'showplayers_aura2': true,
                    'showplayers_name': false,
                    'showname': true
                });
            }
        }
    }
});
//--Functions----
function SetAuraNone(obj) {
    var tint = state.auraTint;
    if(tint == true) {
        obj.set({
            'tint_color': "transparent",
        });
    } else {
        obj.set({
            'aura1_color': "",
            'aura2_color': "",
        });
    }
}

function nEWcolor(ratio) {
    var color = hsl2rgb(ratio, 100, 50);
    var hex = rgbToHex(color.r, color.g, color.b);
    return(hex);
}

function rgbToHex(r, g, b) {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

function hsl2rgb(h, s, l) {
    var r, g, b, m, c, x;
    if(!isFinite(h)) h = 0;
    if(!isFinite(s)) s = 0;
    if(!isFinite(l)) l = 0;
    h /= 60;
    if(h < 0) h = 6 - (-h % 6);
    h %= 6;
    s = Math.max(0, Math.min(1, s / 100));
    l = Math.max(0, Math.min(1, l / 100));
    c = (1 - Math.abs((2 * l) - 1)) * s;
    x = c * (1 - Math.abs((h % 2) - 1));
    if(h < 1) {
        r = c;
        g = x;
        b = 0;
    } else if(h < 2) {
        r = x;
        g = c;
        b = 0;
    } else if(h < 3) {
        r = 0;
        g = c;
        b = x;
    } else if(h < 4) {
        r = 0;
        g = x;
        b = c;
    } else if(h < 5) {
        r = x;
        g = 0;
        b = c;
    } else {
        r = c;
        g = 0;
        b = x;
    }
    m = l - c / 2;
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);
    return {
        r: r,
        g: g,
        b: b
    };
};