//--colors
var font = 'Arial';
var greenC = "#438032";
var gmC = "#22571F";
var redC = "#A34645";
var grayC = "#666666";
var bShadow ="3px 3px 1px #707070";
var tshadow = "-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;";
//---ImgLinks
var ex_img = "http:\\//graphicleftovers.com/blog/wp-content/uploads/2014/04/tumblr_mgwafqL33c1qzw1qyo1_500.gif";
var gm_img = "http:\\//graphicleftovers.com/blog/wp-content/uploads/2014/04/tumblr_mgwafqL33c1qzw1qyo1_500.gif";
var crit_img = "http:\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif";
var fail_img = "http:\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif";
var page_img = "http:\\//1.bp.blogspot.com/-7AhozEGVBBA/T6aqzDZcVOI/AAAAAAAAAQQ/TBH76givpIs/s1600/TEXleatherthree.png";
//---START BOXES CODE
var fPart = "<div style='box-shadow: "+bShadow+"; font-family: "+font+"; text-shadow: "+tshadow+"; text-align: center; vertical-align: middle; padding: 1px 1px; margin-top: 0.1em; border: 1px solid #000; border-radius: 8px 8px 8px 8px; color: #FFF;";
var lPart = "<div style='box-shadow: "+bShadow+"; font-family: "+font+"; font-size: 9pt; text-shadow: "+tshadow+"; text-align: left; vertical-align: middle; background-position:center; padding: 1px 1px; margin-top: 0.2em; border: 2px solid #000; border-radius: 8px 8px 8px 8px; color: #FFF;";
var hPart = "<div style='box-shadow: "+bShadow+"; font-family: "+font+"; font-size: 7pt; text-align: left; vertical-align: middle; background-position:center; padding: 1px 1px; margin-top: 0.2em; border: 2px solid #000; border-radius: 8px 8px 8px 8px; color: #000;";
var iPart = "<div style='box-shadow: "+bShadow+"; font-family: "+font+"; text-shadow: "+tshadow+";  text-align: center; vertical-align: middle; padding: 0px; margin-top: 0.1em; border: 1px solid #000; border-radius: 10px 10px 10px 10px; color: #FFF;";
var iPart2 = "<div style='box-shadow: "+bShadow+"; font-family: "+font+"; font-size: 10pt; text-shadow: "+tshadow+";  text-align: left; vertical-align: middle; padding: 0px; margin-top: 0.1em; border: 1px solid #000; border-radius: 10px 10px 10px 10px; color: #FFF;";
var gPart = "<div style='box-shadow: "+bShadow+"; font-family: "+font+"; text-shadow: "+tshadow+"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #919191; border-radius: 8px 8px 8px 8px; color: #FFF;";
var ePart = "<div style='box-shadow: "+bShadow+"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #000; border-radius: 8px 8px 8px 8px; color: #000;";
var brPart = "<div style='font-family: "+font+"; text-shadow: "+tshadow+"; text-align: center; vertical-align: middle; border: 1px solid #000; border-radius: 8px 8px 8px 8px; color: #FFF;";

var OuterDiv = '<div style="box-shadow: '+bShadow+'; border: 2px solid black; text-align: center; vertical-align: middle; background-color: gray; padding: 3px 3px 3px 3px; border-radius: 10px 10px 10px 10px;">';
/*------------------
PAGE CHANGE
------------------*/
on("change:campaign:playerpageid", function (obj, prev) {
    var currentPage = getObj("page", Campaign().get("playerpageid"));
	var pName = currentPage.get("name");
	var help = OuterDiv+iPart + "color: #B3B3B3; background-image: url("+page_img+");'><b>● Page: "+pName+" ●</div></div>";
	sendChat('GM', "/direct " + help);
});
/*------------------
COMBAT STUFF
------------------*/
//---AUTO LOCATION ROLLS
var aLoc = ["Head","Left Arm","Right Arm","Left Leg","Right Leg","..Dangly Bits! (Main Body)","FREE ATTACK!"];
//---FUMBLE ROLLS
var aFum = 
	[
	 "Hit a totally different friendly target in general direction of aimed target (if possible)",
	 "Ungracefully fumbled the attack!, lose next attack",
	 "Got something in eye, lose this attack",
	 "Missed so badly, it makes the enemy question if you know what you are doing!",
	 "Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.",
	 "Tripped!, next attack to get up",
	 "Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in wall/floor/Tree/etc loose next attack",
	 "Missed, and draws sole aggression of the target",
	 "Somehow hit a Flying Squirrel!"
	 ];
var CONFIG = 
	[
	 {barId: 1,barRatioMax: 1.0,barRatioMin: 0.5,status: "green",whenLow: true}, 
	 {barId: 1,barRatioMax: 0.5,barRatioMin: 0.25,status: "yellow",whenLow: true}, 
	 {barId: 1,barRatioMax: 0.25,barRatioMin: 0,status: "brown",whenLow: true}, 
	 {barId: 1,barRatioMax: 0,barRatioMin: -0.1,status: "red",whenLow: true}, 
	 {barId: 2,barRatioMax: 0.50,barRatioMin: 0.25,status: "half-heart",whenLow: true},
	 {barId: 2,barRatioMax: 0.25,barRatioMin: 0,status: "screaming",whenLow: true},
	 {barId: 2,barRatioMax: 0,barRatioMin: -0.1,status: "dead",whenLow: true}
	 ];
/*------------------
Generic Functions
------------------*/
//-------PLAYER COLOR  
function GetPColor(Player){
	var cBy = Player.get('controlledby');
	player = getObj('player', cBy);
	pColor = player.get('color');
	return pColor;
}

//-----
function SetStat(Player1,Atype,cost){
	var ammoC = parseInt(cost);
	var ammo0 = findObjs({_type: "attribute",name: Atype,_characterid: Player1.id}, {caseInsensitive: true})[0];
	if(ammoC === undefined || isNaN(ammoC)) ammoC = 1;
	var cAmmo = parseInt(ammo0.get("current"));
	var mAmmo = parseInt(ammo0.get("max"));
	var curPageID = findObjs({_type: "campaign"})[0].get("playerpageid");
	var curPage = findObjs({_type: "page", _id: curPageID})[0];  
	var tokens = findObjs({_type: "graphic", layer:"objects", _pageid: curPageID, name: Player1.get("name")});
	_.each(tokens, function(id) {
		var who = getObj('character', id.get("_represents"));
		var aSet = findObjs({_type: "attribute",name: Atype,_characterid: who.id} , {caseInsensitive: true});
		aSet = aSet[0].id;
		id.set("bar3_link", aSet);
		id.set('bar3_value', cAmmo);
		id.set('bar3_max', mAmmo);
	});
	if (cAmmo < 0 || cAmmo < ammoC) {
		cAmmo = "0";
		ammo0.set('current', cAmmo);
	}
	else if (cAmmo <= 2 || cAmmo < ammoC) {
		cAmmo = cAmmo - ammoC;
		ammo0.set('current', cAmmo);
	} 
	else {
		cAmmo = cAmmo - ammoC;
		ammo0.set('current', cAmmo);
	}
}
//-------TIME FUNCTION    
function time() {
	var croll = findObjs({_type: 'character',name: 'zCalendar'})[0];        
	var Hour = parseInt(findObjs({name: "Hour",_type: "attribute",_characterid: croll.id}, {caseInsensitive: true})[0].get("current"));
	var MonthChat = parseInt(findObjs({name: "Month",_type: "attribute",_characterid: croll.id}, {caseInsensitive: true})[0].get("current"));
	var DayChat = parseInt(findObjs({name: "Day",_type: "attribute",_characterid: croll.id}, {caseInsensitive: true})[0].get("current"));
	var YearChat = parseInt(findObjs({name: "Year",_type: "attribute",_characterid: croll.id}, {caseInsensitive: true})[0].get("current"));
	var Clock = "AM";
	var HourChat = Hour;
	if (HourChat >= 12) {
		Clock = "PM";
		HourChat = HourChat - 12;
	}
	if (HourChat == 0) HourChat = 12;
	MonthId.forEach(function (opts) {
		if (MonthChat == opts.Month) {
			var MonthName = opts.Name;
			var img = "";
			var bgp = "";
			if (Hour >= 6 && Hour <= 10) {
				img = "http:\\//www.billfrymire.com/gallery/webJpgs/sand-dune-sunrise-desert.jpg";
				var bgp = "background-position: 40% 35%";
			}
			else if (Hour >= 11 && Hour <= 17) {
				img = "http:\\//static.squarespace.com/static/518bcac3e4b09520fb854d9e/t/519278d4e4b0914b23399373/1368553686005/img_8708_blue_sky2.jpg"; 
				var bgp = "background-position: 50% 50%";
			}
			else if (Hour >= 18 && Hour <= 20) {
				img = "http:\\//m2.i.pbase.com/o4/75/47975/1/55289732.DesertSunset_27535.jpg"; 
				var bgp = "background-position: 40% 60%";
			}
			else if (Hour >= 21 || Hour <= 5)  {
				img = "http:\\//www.blueridgemuse.com/wp-content/uploads/2011/08/081211moon.jpg";
				var bgp = "background-position: 50% 40%";
			}
			var Day = OuterDiv + iPart+"background-image: url("+img+");"+bgp+"'><b><strong style='font-size: 125%;'>Time: "+HourChat+" "+Clock+"</strong><br>"+MonthName+", "+DayChat+" "+YearChat+" PA</div>";
			sendChat('', "/direct " + Day);
			_.each(findObjs({type: "text"}), function(obj){
				text = obj.get("text");
                if (text == "" || obj.get("layer") == "gmlayer") {                    
                    obj.remove();
                }
				if (text.indexOf("Time:") !== -1) {
					obj.set('text',"Time: "+HourChat+" "+Clock +" "+ MonthName+", "+DayChat+" "+YearChat+" PA ");
				}
			});
		}
	});
}
//RANDOM IMAGE
function randomFromTo(from, to){
	return Math.floor(Math.random() * (to - from + 1) + from);
}
//make number
function formatNumber (num) {
	return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
}
//set character name
function RollRight (whoPC) {
	var character = findObjs({type: 'character',controlledby: whoPC})[0];
	return character;
}
//find level
function fLevel() {
	var characters = findObjs({_type: "character"});
	var chat = '';
	var lTotal = 0;
	var count = 0;
	_.each(characters, function (id) {
		var aa = id.get("inplayerjournals");
		var aSet = findObjs({_type: "attribute",name: "Level",_characterid: id.id}, {caseInsensitive: true})[0];
		if(aa == "all" && aSet !== undefined) {
			var a2 = parseInt(aSet.get("current"));
			count = count + 1;
			lTotal = lTotal + a2;
		}
	});
	lTotal = Math.round(lTotal / count);
	return lTotal;
}
//parse loot
function myrolls(loota) {
	for(var i = 0; i < loota.length; i++) {
		var ii = (loota[i].indexOf("[[") != -1);
		if(ii == true) {
			var num = loota[i].replace(/[^0-9]/g, '');
			var res1 = num.substr(0, 1);  
			var res2 = num.substr(1, 4);            
			var ia = 1;
			var tot = 0;
			while(ia <= res1) {
				var tot = tot + randomInteger(res2);
				ia++;
			}
			return tot;
		}
	}
}
//-----------------------------------
/*
var fixNO = fixNO || function(obj){
    var p = obj.changed._fbpath;
    var new_p = p.replace(/([^\/]*\/){4}/, "/");
    obj.fbpath = new_p;
   return obj;
};
*/
//-----------------------------------
function MakeRollNum(cont, inline) {
    return _.chain(inline)
        .reduce(function (m, v, k) {
        m['$[[' + k + ']]'] = v.results.total || 0;        
        return m;
    }, {})
        .reduce(function (m, v, k) {
        d20 = m.replace(k, v);
        return m.replace(k, v);        
    },
        cont).value();
};