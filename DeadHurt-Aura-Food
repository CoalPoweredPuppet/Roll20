var CONFIG = [
    {barId: 1,barRatioMax: 1.0,barRatioMin: 0.5,status: "green",whenLow: true}, 
    {barId: 1,barRatioMax: 0.5,barRatioMin: 0.25,status: "yellow",whenLow: true}, 
    {barId: 1,barRatioMax: 0.25,barRatioMin: 0,status: "brown",whenLow: true}, 
    {barId: 1,barRatioMax: 0,barRatioMin: -0.1,status: "red",whenLow: true}, 
    {barId: 3,barRatioMax: 0.25,barRatioMin: 0,status: "half-heart",whenLow: true}, 
    {barId: 3,barRatioMax: 0,barRatioMin: -0.1,status: "dead",whenLow: true}
    ];
 var FOOD = [
    {FoodRatioMax: 100,FoodRatioMin: 100,status: "",whenLow: true, stype: 'full'},
    {FoodRatioMax: 50,FoodRatioMin: 21,status: "drink-me",whenLow: true, stype: 'hungry'},     
    {FoodRatioMax: 20,FoodRatioMin: 0,status: "skull",whenLow: true, stype: 'starving and weak!'}
    ];   
//CODE-----------------
on("change:token", function (obj) {
  CONFIG.forEach(function (opts) {
    //SET HURT-----------
    if(obj.get("bar" + opts.barId + "_max") == undefined || obj.get("bar" + opts.barId + "_value") == undefined) return;
    var maxValue = parseInt(obj.get("bar" + opts.barId + "_max"));
    var curValue = parseInt(obj.get("bar" + opts.barId + "_value"));
    if(maxValue != NaN && curValue != NaN) {
      var markerName = "status_" + opts.status;
      if(curValue <= (maxValue * opts.barRatioMax) && curValue > (maxValue * opts.barRatioMin)) {
        obj.set(markerName, opts.whenLow);
      } else {
        obj.set(markerName, !opts.whenLow);
      }
    }
  });
  //VARIABLES-------------------
  if(obj.get("represents") == undefined) return;
  var oCharacter = getObj('character', obj.get("_represents"));
  var type = (oCharacter.get("controlledby") == "") ? 'Monster' : 'Player';
  if(type != 'Player') return;
  var cBy = oCharacter.get('controlledby');
  if(cBy.split(',').length == 1 && cBy != 'all') {
    var player = getObj('player', cBy);
    var pColor = player.get('color');
    obj.set({'aura1_radius': 0.3,'aura1_color': pColor,'aura1_square': false});
  }
  //FOOD STATUS-------------------
  FOOD.forEach(function (opts) {
    var oFood = findObjs({_type: "attribute",name: "-Food",_characterid: oCharacter.id})[0];
    if(oFood == undefined) return;
    var cFood = parseInt(oFood.get("current"));
    var mFood = parseInt(oFood.get("max"));
    var markerName = "status_" + opts.status;
    if(cFood <= opts.FoodRatioMax && cFood > opts.FoodRatioMin) {
      obj.set(markerName, opts.whenLow);
    } else {
      obj.set(markerName, !opts.whenLow);
    }
  });
});
//SET ENEMY AURA------------------------------------------------------------
on("change:token", function (obj) {
  if(obj.get('represents') != '') return;
  var eBar = parseInt(obj.get("bar3_value"));
  if(!isNaN(eBar) && obj.get("name") == '') {
    obj.set({'aura1_radius': -0.2,'aura1_color': '#980000','aura1_square': false});
  }
});
//SET FOOD CHAT------------------------------------------------------------
on('chat:message', function (msg) {
  if(msg.type == 'api' && msg.content.indexOf('!Food') !== -1) {
    var selected = msg.selected;
    i = 0;
    _.each(selected, function (obj) {
      var token = getObj('graphic', msg.selected[i]._id);
      if(token.get("represents") != '') {
        if(token.get('subtype') != 'token') return;
        var oCharacter = getObj('character', token.get("_represents"));
        var oFoodset = findObjs({_type: "attribute",name: "-Food",_characterid: oCharacter.id});
        var name = (oCharacter.get('name'));
        oFoodset = oFoodset[0];
        var cFood = parseInt(oFoodset.get("current"));
        var mFood = parseInt(oFoodset.get("max"));
        var cmdName = "!Food ";
        var amount = msg.content.slice(cmdName.length);
        var add = +cFood + +amount
        if(add >= 100) add = 100;
        if(add <= 0) add = 0;
        oFoodset.set('current', add);
        FOOD.forEach(function (opts) {
          var markerName = "status_" + opts.status;
          if(add <= opts.FoodRatioMax && add >= opts.FoodRatioMin) {
            sendChat('bb', '/desc ' + name + ' is ' + opts.stype);
          }
        });
      }
      i++
    });
  }
});
