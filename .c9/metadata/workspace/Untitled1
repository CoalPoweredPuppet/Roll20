{"changed":true,"filter":false,"title":"Untitled1","tooltip":"/Untitled1","value":"/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/\n/*\nMy Profile link: https://app.roll20.net/users/262130/dxwarlock\nGIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors\nRoll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor\n*/\nvar HealthColors = HealthColors || (function() {\n    'use strict';\n    var version = '1.2.3',\n        ScriptName = \"HealthColors\",\n        schemaVersion = '1.0.3',\n        Updated = \"Mar 5 2017\",\n/*--------\nON TOKEN CHANGE/CREATE\n--------*/\n        handleToken = function(obj, prev) {\n//CHECK IF TRIGGERED------------\n            if (state.HealthColors.auraColorOn !== true) return;\n            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {\n//ATTRIBUTE CHECK------------\n                var oCharacter = getObj('character', obj.get(\"_represents\"));\n                if (oCharacter !== undefined) {\n    //CHECK BLOOD ATTRIB------------\n                    if (getAttrByName(oCharacter.id, 'BLOODCOLOR') === undefined) CreateAttrib(oCharacter, 'BLOODCOLOR', 'DEFAULT');\n                    var Blood = findObjs({name: 'BLOODCOLOR',_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];\n                    var UseBlood = Blood.get(\"current\");\n                    UseBlood = UseBlood.toString().toUpperCase();\n    //CHECK DISABLED AURA/TINT ATTRIB------------\n                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter, 'USECOLOR', 'YES');\n                    var UseAuraAtt = findObjs({name: \"USECOLOR\",_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];\n                    var UseAura = UseAuraAtt.get(\"current\");\n                    UseAura = UseAura.toString().toUpperCase();\n                    if (UseAura != \"YES\" && UseAura != \"NO\") {\n                        var name = oCharacter.get('name');\n                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");\n                        UseAuraAtt.set('current', \"YES\");\n                    }\n                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();\n                }\n//CHECK BARS------------\n                var barUsed = state.HealthColors.auraBar;\n                if (obj.get(barUsed + \"_max\") === \"\" || obj.get(barUsed + \"_value\") === \"\") return;\n                var maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);\n                var curValue = parseInt(obj.get(barUsed + \"_value\"), 10);\n                var prevValue = prev[barUsed + \"_value\"];\n                if (isNaN(maxValue) && isNaN(curValue)) return;\n    //CALC PERCENTAGE------------\n                var perc = Math.round((curValue / maxValue) * 100);\n                var percReal = Math.min(100, perc);\n    //PERCENTAGE OFF------------\n                if (percReal > state.HealthColors.auraPerc) {\n                    SetAuraNone(obj);\n                    return;\n                }\n//CHECK MONSTER OR PLAYER------------\n                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';\n                var GM = '', PC = '';\n                var markerColor = PercentToRGB(Math.min(100, percReal));\n                var pColor = '#ffffff';\n    //IF PLAYER------------\n                if (type == 'Player' && state.HealthColors.PCAura !== false) {\n                    var cBy = oCharacter.get('controlledby');\n                    var player = getObj('player', cBy);\n                    pColor = '#000000';\n                    if (player !== undefined) pColor = player.get('color');\n                    GM = state.HealthColors.GM_PCNames;\n                    if (GM != 'Off') {\n                        GM = (GM == \"Yes\") ? true : false;\n                        obj.set({'showname': GM});\n                    }\n                    PC = state.HealthColors.PCNames;\n                    if (PC != 'Off') {\n                        PC = (PC == \"Yes\") ? true : false;\n                        obj.set({'showplayers_name': PC});\n                    }\n                }\n    //IF MONSTER------------\n                if (type == 'Monster' && state.HealthColors.PCAura !== false) {\n                    GM = state.HealthColors.GM_NPCNames;\n                    if (GM != 'Off') {\n                        GM = (GM == \"Yes\") ? true : false;\n                        obj.set({'showname': GM});\n                    }\n                    PC = state.HealthColors.NPCNames;\n                    if (PC != 'Off') {\n                        PC = (PC == \"Yes\") ? true : false;\n                        obj.set({'showplayers_name': PC});\n                    }\n                }\n//SET AURA|TINT------------\n                if(UseAura !== \"NO\") {\n                    if (state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});\n                    else {\n                        TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);\n                    }\n                }\n//SPURT FX------------\n                if (state.HealthColors.FX == true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {\n                    if (curValue == prevValue || prevValue === \"\") return;\n                    var amount = Math.abs(curValue - prevValue);\n                    var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);\n                    var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);\n                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);\n                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);\n                    var FX = findObjs({_type: \"custfx\", name: UseBlood}, {caseInsensitive: true});\n                    if (UseBlood !== \"DEFAULT\" && UseBlood !== undefined) HurtColor = HEXtoRGB(UseBlood);\n                    var size = obj.get(\"height\");\n                    var multi = size / 70;\n                    var StartColor;\n                    var EndColor;\n                    var HITS;\n                    if (curValue > prevValue) {\n                        StartColor = HealColor;\n                        EndColor = [255, 255, 255, 0];\n                        HITS = Heal(HitSize, multi, StartColor, EndColor, size);\n                    }\n                    else if (curValue < prevValue) {\n                        StartColor = HurtColor;\n                        EndColor = [0, 0, 0, 0];\n                        HITS = Hurt(HitSize, multi, StartColor, EndColor, size);\n                    }\n                    if(FX[0]) {\n                        spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), FX[0].get(\"definition\"), obj.get(\"_pageid\"));\n                    }\n                    else spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));\n                }\n//SET DEAD------------\n                var dead = state.HealthColors.auraDead;\n                if (curValue <= 0 && dead === true) {\n                    obj.set(\"status_dead\", true);\n                    SetAuraNone(obj);\n                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);\n                }\n                else if (dead === true) obj.set(\"status_dead\", false);\n            }\n        },\n/*--------\nCHAT MESSAGES\n --------*/\n        handleInput = function(msg) {\n            var msgFormula = msg.content.split(/\\s+/);\n            var command = msgFormula[0].toUpperCase();\n            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {\n                if (!playerIsGM(msg.playerid)) {\n                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");\n                    return;\n                }\n                else {\n                    var option = msgFormula[1];\n                    if (option === undefined) {\n                        aurahelp();\n                        return;\n                    }\n                    switch (msgFormula[1].toUpperCase()) {\n                        case \"ON\":\n                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;\n                            aurahelp();\n                            break;\n                        case \"BAR\":\n                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"TINT\":\n                            state.HealthColors.auraTint = !state.HealthColors.auraTint;\n                            aurahelp();\n                            break;\n                        case \"PERC\":\n                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);\n                            aurahelp();\n                            break;\n                        case \"PC\":\n                            state.HealthColors.PCAura = !state.HealthColors.PCAura;\n                            aurahelp();\n                            break;\n                        case \"NPC\":\n                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;\n                            aurahelp();\n                            break;\n                        case \"GMNPC\":\n                            state.HealthColors.GM_NPCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"GMPC\":\n                            state.HealthColors.GM_PCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"PCNPC\":\n                            state.HealthColors.NPCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"PCPC\":\n                            state.HealthColors.PCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"DEAD\":\n                            state.HealthColors.auraDead = !state.HealthColors.auraDead;\n                            aurahelp();\n                            break;\n                        case \"DEADFX\":\n                            state.HealthColors.auraDeadFX = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"SIZE\":\n                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);\n                            aurahelp();\n                            break;\n                        case \"ONEOFF\":\n                            state.HealthColors.OneOff = !state.HealthColors.OneOff;\n                            aurahelp();\n                            break;\n                        case \"FX\":\n                            state.HealthColors.FX = !state.HealthColors.FX;\n                            aurahelp();\n                            break;\n                        case \"HEAL\":\n                            var UPPER = msgFormula[2];\n                            UPPER = UPPER.toUpperCase();\n                            state.HealthColors.HealFX = UPPER;\n                            aurahelp();\n                            break;\n                        case \"HURT\":\n                            var UPPER = msgFormula[2];\n                            UPPER = UPPER.toUpperCase();\n                            state.HealthColors.HurtFX = UPPER;\n                            aurahelp();\n                            break;\n                        default:\n                            return;\n                    }\n                }\n            }\n        },\n/*--------\nFUNCTIONS\n--------*/\n    //HURT FX----------\n        Hurt = function(HitSize, multi, StartColor, EndColor, size) {\n            var FX = {\n                \"maxParticles\": 150,\n                \"duration\": 50 * HitSize,\n                \"size\": size / 10 * HitSize,\n                \"sizeRandom\": 3,\n                \"lifeSpan\": 25,\n                \"lifeSpanRandom\": 5,\n                \"speed\": multi * 8,\n                \"speedRandom\": multi * 3,\n                \"gravity\": {\n                    \"x\": multi * 0.01,\n                    \"y\": multi * 0.65\n                },\n                \"angle\": 270,\n                \"angleRandom\": 25,\n                \"emissionRate\": 100 * HitSize,\n                \"startColour\": StartColor,\n                \"endColour\": EndColor,\n            };\n            return FX;\n        },\n    //HEAL FX----------\n        Heal = function(HitSize, multi, StartColor, EndColor, size) {\n            var FX = {\n                \"maxParticles\": 150,\n                \"duration\": 50 * HitSize,\n                \"size\": size / 10 * HitSize,\n                \"sizeRandom\": 15 * HitSize,\n                \"lifeSpan\": multi * 50,\n                \"lifeSpanRandom\": 30,\n                \"speed\": multi * 0.5,\n                \"speedRandom\": multi / 2 * 1.1,\n                \"angle\": 0,\n                \"angleRandom\": 180,\n                \"emissionRate\": 1000,\n                \"startColour\": StartColor,\n                \"endColour\": EndColor,\n            };\n            return FX;\n        },\n    //WHISPER GM------------\n        GMW = function(text) {\n            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");\n        },\n    //DEATH SOUND------------\n        PlayDeath = function(trackname) {\n            if (trackname.indexOf(\",\") > 0) {\n                  var tracklist = trackname.split(\",\");\n                  var RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];\n            }\n            else RandTrackName = trackname;\n            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];\n            if (track) {\n                track.set('playing', false);\n                track.set('softstop', false);\n                track.set('volume', 50);\n                track.set('playing', true);\n            }\n            else {\n                log(ScriptName+\": No track found named \"+RandTrackName);\n            }\n        },\n    //CREATE USECOLOR ATTR------------\n        CreateAttrib = function(oCharacter, attrib, value) {\n            log(\"Creating \"+ attrib);\n            createObj(\"attribute\", {name: attrib,current: value,characterid: oCharacter.id});\n        },\n    //SET TOKEN COLORS------------\n        TokenSet = function(obj, sizeSet, markerColor, pColor) {\n            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));\n            var scale = Pageon.get(\"scale_number\") / 10;\n            obj.set({\n                'aura1_radius': sizeSet * scale * 1.8,\n                'aura2_radius': sizeSet * scale * 0.1,\n                'aura1_color': markerColor,\n                'aura2_color': pColor,\n                'showplayers_aura1': true,\n                'showplayers_aura2': true,\n            });\n        },\n    //HELP MENU------------\n        aurahelp = function() {\n            var img = \"background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";\n            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";\n            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';\n            var off = \"#A84D4D\";\n            var disable = \"#D6D6D6\";\n            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";\n            var FX = state.HealthColors.auraDeadFX.substring(0, 4);\n            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; '+img+' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--\n                HR + //--\n                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--\n                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--\n                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|'+state.HealthColors.auraDeadFX+'}\">' + FX + '</a><br>' + //--\n                HR + //--\n                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---\n                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--\n                HR + //--\n                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--\n                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--\n                HR + //--\n                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--\n                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--\n                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--\n                HR + //--\n                '</div>');\n        },\n    //OFF BUTTON COLORS------------\n        ButtonColor = function(state, off, disable) {\n            var color;\n            if (state == \"No\") color = off;\n            if (state == \"Off\") color = disable;\n            return color;\n        },\n    //REMOVE ALL------------\n        SetAuraNone = function(obj) {\n            var tint = state.HealthColors.auraTint;\n            if (tint === true) {\n                obj.set({'tint_color': \"transparent\",});\n            }\n            else {\n                obj.set({\n                    'aura1_color': \"\",\n                    'aura2_color': \"\",\n                });\n            }\n        },\n    //PERC TO RGB------------\n        PercentToRGB = function(percent) {\n            if (percent === 100) percent = 99;\n            var r, g, b;\n            if (percent < 50) {\n                g = Math.floor(255 * (percent / 50));\n                r = 255;\n            }\n            else {\n                g = 255;\n                r = Math.floor(255 * ((50 - percent % 50) / 50));\n            }\n            b = 0;\n            var Gradient = rgbToHex(r, g, b);\n            return Gradient;\n        },\n    //RGB TO HEX------------\n        rgbToHex = function(r, g, b) {\n            var Color = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n            return Color;\n        },\n    //HEX TO RGB------------\n        HEXtoRGB = function(hex) {\n            let parts = (hex||'').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);\n            if (parts) {\n                let rgb = _.chain(parts)\n                    .rest()\n                    .map((d) => parseInt(d, 16))\n                    .value();\n                rgb.push(1.0);\n                return rgb;\n            }\n            return [0, 0, 0, 1.0];\n        },\n    //CHECK INSTALL & SET STATE------------\n        checkInstall = function() {\n            log('<' + ScriptName + ' v' + version + ' Ready [Updated: '+ Updated+']>');\n            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {\n                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');\n                state.HealthColors = {\n                    schemaVersion: schemaVersion\n                };\n                state.HealthColors.version = version;\n            }\n            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off\n            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use\n            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?\n            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?\n            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?\n            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing\n            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status\n            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name\n            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?\n            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?\n            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?\n            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?\n            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?\n            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?\n            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR\n            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?\n        //TokenMod CHECK    \n            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange){\n                   TokenMod.ObserveTokenChange(handleToken);\n            }\n        },\n        registerEventHandlers = function() {\n            on('chat:message', handleInput);\n            on(\"change:token\", handleToken);\n            on('add:token',function(t){\n                 _.delay(()=>{\n                   let token=getObj('graphic',t.id),\n                       prev = JSON.parse(JSON.stringify(token));\n                   handleToken(token,prev);\n                 },400);\n                });\n        };\n/*-------------\nRETURN OUTSIDE FUNCTIONS\n-----------*/\n    return {\n        CheckInstall: checkInstall,\n        RegisterEventHandlers: registerEventHandlers\n    };\n}());\n//On Ready\non('ready', function() {\n    'use strict';\n    HealthColors.CheckInstall();\n    HealthColors.RegisterEventHandlers();\n});","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":460,"column":3},"action":"insert","lines":["/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","var HealthColors = HealthColors || (function() {","    'use strict';","    var version = '1.2.3',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 5 2017\",","/*--------","ON TOKEN CHANGE/CREATE","--------*/","        handleToken = function(obj, prev) {","//CHECK IF TRIGGERED------------","            if (state.HealthColors.auraColorOn !== true) return;","            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","//ATTRIBUTE CHECK------------","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if (oCharacter !== undefined) {","    //CHECK BLOOD ATTRIB------------","                    if (getAttrByName(oCharacter.id, 'BLOODCOLOR') === undefined) CreateAttrib(oCharacter, 'BLOODCOLOR', 'DEFAULT');","                    var Blood = findObjs({name: 'BLOODCOLOR',_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseBlood = Blood.get(\"current\");","                    UseBlood = UseBlood.toString().toUpperCase();","    //CHECK DISABLED AURA/TINT ATTRIB------------","                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter, 'USECOLOR', 'YES');","                    var UseAuraAtt = findObjs({name: \"USECOLOR\",_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if (UseAura != \"YES\" && UseAura != \"NO\") {","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                        UseAuraAtt.set('current', \"YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                }","//CHECK BARS------------","                var barUsed = state.HealthColors.auraBar;","                if (obj.get(barUsed + \"_max\") === \"\" || obj.get(barUsed + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                var curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                var prevValue = prev[barUsed + \"_value\"];","                if (isNaN(maxValue) && isNaN(curValue)) return;","    //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","    //PERCENTAGE OFF------------","                if (percReal > state.HealthColors.auraPerc) {","                    SetAuraNone(obj);","                    return;","                }","//CHECK MONSTER OR PLAYER------------","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","                var GM = '', PC = '';","                var markerColor = PercentToRGB(Math.min(100, percReal));","                var pColor = '#ffffff';","    //IF PLAYER------------","                if (type == 'Player' && state.HealthColors.PCAura !== false) {","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if (player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({'showname': GM});","                    }","                    PC = state.HealthColors.PCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({'showplayers_name': PC});","                    }","                }","    //IF MONSTER------------","                if (type == 'Monster' && state.HealthColors.PCAura !== false) {","                    GM = state.HealthColors.GM_NPCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({'showname': GM});","                    }","                    PC = state.HealthColors.NPCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({'showplayers_name': PC});","                    }","                }","//SET AURA|TINT------------","                if(UseAura !== \"NO\") {","                    if (state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","                    else {","                        TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                    }","                }","//SPURT FX------------","                if (state.HealthColors.FX == true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                    if (curValue == prevValue || prevValue === \"\") return;","                    var amount = Math.abs(curValue - prevValue);","                    var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                    var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);","                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                    var FX = findObjs({_type: \"custfx\", name: UseBlood}, {caseInsensitive: true});","                    if (UseBlood !== \"DEFAULT\" && UseBlood !== undefined) HurtColor = HEXtoRGB(UseBlood);","                    var size = obj.get(\"height\");","                    var multi = size / 70;","                    var StartColor;","                    var EndColor;","                    var HITS;","                    if (curValue > prevValue) {","                        StartColor = HealColor;","                        EndColor = [255, 255, 255, 0];","                        HITS = Heal(HitSize, multi, StartColor, EndColor, size);","                    }","                    else if (curValue < prevValue) {","                        StartColor = HurtColor;","                        EndColor = [0, 0, 0, 0];","                        HITS = Hurt(HitSize, multi, StartColor, EndColor, size);","                    }","                    if(FX[0]) {","                        spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), FX[0].get(\"definition\"), obj.get(\"_pageid\"));","                    }","                    else spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));","                }","//SET DEAD------------","                var dead = state.HealthColors.auraDead;","                if (curValue <= 0 && dead === true) {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else if (dead === true) obj.set(\"status_dead\", false);","            }","        },","/*--------","CHAT MESSAGES"," --------*/","        handleInput = function(msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                if (!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    var option = msgFormula[1];","                    if (option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch (msgFormula[1].toUpperCase()) {","                        case \"ON\":","                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                            aurahelp();","                            break;","                        case \"BAR\":","                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                            aurahelp();","                            break;","                        case \"TINT\":","                            state.HealthColors.auraTint = !state.HealthColors.auraTint;","                            aurahelp();","                            break;","                        case \"PERC\":","                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);","                            aurahelp();","                            break;","                        case \"PC\":","                            state.HealthColors.PCAura = !state.HealthColors.PCAura;","                            aurahelp();","                            break;","                        case \"NPC\":","                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                            aurahelp();","                            break;","                        case \"GMNPC\":","                            state.HealthColors.GM_NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"GMPC\":","                            state.HealthColors.GM_PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCNPC\":","                            state.HealthColors.NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCPC\":","                            state.HealthColors.PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"DEAD\":","                            state.HealthColors.auraDead = !state.HealthColors.auraDead;","                            aurahelp();","                            break;","                        case \"DEADFX\":","                            state.HealthColors.auraDeadFX = msgFormula[2];","                            aurahelp();","                            break;","                        case \"SIZE\":","                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                            aurahelp();","                            break;","                        case \"ONEOFF\":","                            state.HealthColors.OneOff = !state.HealthColors.OneOff;","                            aurahelp();","                            break;","                        case \"FX\":","                            state.HealthColors.FX = !state.HealthColors.FX;","                            aurahelp();","                            break;","                        case \"HEAL\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HealFX = UPPER;","                            aurahelp();","                            break;","                        case \"HURT\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HurtFX = UPPER;","                            aurahelp();","                            break;","                        default:","                            return;","                    }","                }","            }","        },","/*--------","FUNCTIONS","--------*/","    //HURT FX----------","        Hurt = function(HitSize, multi, StartColor, EndColor, size) {","            var FX = {","                \"maxParticles\": 150,","                \"duration\": 50 * HitSize,","                \"size\": size / 10 * HitSize,","                \"sizeRandom\": 3,","                \"lifeSpan\": 25,","                \"lifeSpanRandom\": 5,","                \"speed\": multi * 8,","                \"speedRandom\": multi * 3,","                \"gravity\": {","                    \"x\": multi * 0.01,","                    \"y\": multi * 0.65","                },","                \"angle\": 270,","                \"angleRandom\": 25,","                \"emissionRate\": 100 * HitSize,","                \"startColour\": StartColor,","                \"endColour\": EndColor,","            };","            return FX;","        },","    //HEAL FX----------","        Heal = function(HitSize, multi, StartColor, EndColor, size) {","            var FX = {","                \"maxParticles\": 150,","                \"duration\": 50 * HitSize,","                \"size\": size / 10 * HitSize,","                \"sizeRandom\": 15 * HitSize,","                \"lifeSpan\": multi * 50,","                \"lifeSpanRandom\": 30,","                \"speed\": multi * 0.5,","                \"speedRandom\": multi / 2 * 1.1,","                \"angle\": 0,","                \"angleRandom\": 180,","                \"emissionRate\": 1000,","                \"startColour\": StartColor,","                \"endColour\": EndColor,","            };","            return FX;","        },","    //WHISPER GM------------","        GMW = function(text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","    //DEATH SOUND------------","        PlayDeath = function(trackname) {","            if (trackname.indexOf(\",\") > 0) {","                  var tracklist = trackname.split(\",\");","                  var RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if (track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName+\": No track found named \"+RandTrackName);","            }","        },","    //CREATE USECOLOR ATTR------------","        CreateAttrib = function(oCharacter, attrib, value) {","            log(\"Creating \"+ attrib);","            createObj(\"attribute\", {name: attrib,current: value,characterid: oCharacter.id});","        },","    //SET TOKEN COLORS------------","        TokenSet = function(obj, sizeSet, markerColor, pColor) {","            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","            var scale = Pageon.get(\"scale_number\") / 10;","            obj.set({","                'aura1_radius': sizeSet * scale * 1.8,","                'aura2_radius': sizeSet * scale * 0.1,","                'aura1_color': markerColor,","                'aura2_color': pColor,","                'showplayers_aura1': true,","                'showplayers_aura2': true,","            });","        },","    //HELP MENU------------","        aurahelp = function() {","            var img = \"background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; '+img+' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--","                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|'+state.HealthColors.auraDeadFX+'}\">' + FX + '</a><br>' + //--","                HR + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                HR + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function(state, off, disable) {","            var color;","            if (state == \"No\") color = off;","            if (state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function(obj) {","            var tint = state.HealthColors.auraTint;","            if (tint === true) {","                obj.set({'tint_color': \"transparent\",});","            }","            else {","                obj.set({","                    'aura1_color': \"\",","                    'aura2_color': \"\",","                });","            }","        },","    //PERC TO RGB------------","        PercentToRGB = function(percent) {","            if (percent === 100) percent = 99;","            var r, g, b;","            if (percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            b = 0;","            var Gradient = rgbToHex(r, g, b);","            return Gradient;","        },","    //RGB TO HEX------------","        rgbToHex = function(r, g, b) {","            var Color = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return Color;","        },","    //HEX TO RGB------------","        HEXtoRGB = function(hex) {","            let parts = (hex||'').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if (parts) {","                let rgb = _.chain(parts)","                    .rest()","                    .map((d) => parseInt(d, 16))","                    .value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 1.0];","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function() {","            log('<' + ScriptName + ' v' + version + ' Ready [Updated: '+ Updated+']>');","            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {","                    schemaVersion: schemaVersion","                };","                state.HealthColors.version = version;","            }","            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing","            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status","            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","        //TokenMod CHECK    ","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange){","                   TokenMod.ObserveTokenChange(handleToken);","            }","        },","        registerEventHandlers = function() {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token',function(t){","                 _.delay(()=>{","                   let token=getObj('graphic',t.id),","                       prev = JSON.parse(JSON.stringify(token));","                   handleToken(token,prev);","                 },400);","                });","        };","/*-------------","RETURN OUTSIDE FUNCTIONS","-----------*/","    return {","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function() {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":1}]]},"ace":{"folds":[],"scrolltop":5556,"scrollleft":0,"selection":{"start":{"row":460,"column":3},"end":{"row":460,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":395,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1488903113779}