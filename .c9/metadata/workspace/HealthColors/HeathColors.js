{"filter":false,"title":"HeathColors.js","tooltip":"/HealthColors/HeathColors.js","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":40,"column":28},"end":{"row":41,"column":0},"action":"remove","lines":["",""],"id":2020}],[{"start":{"row":40,"column":28},"end":{"row":40,"column":32},"action":"remove","lines":["    "],"id":2021}],[{"start":{"row":40,"column":28},"end":{"row":40,"column":32},"action":"remove","lines":["    "],"id":2022}],[{"start":{"row":40,"column":28},"end":{"row":40,"column":32},"action":"remove","lines":["    "],"id":2023}],[{"start":{"row":40,"column":28},"end":{"row":40,"column":32},"action":"remove","lines":["    "],"id":2024}],[{"start":{"row":40,"column":28},"end":{"row":40,"column":32},"action":"remove","lines":["    "],"id":2025}],[{"start":{"row":85,"column":0},"end":{"row":85,"column":4},"action":"remove","lines":["    "],"id":2026}],[{"start":{"row":0,"column":0},"end":{"row":556,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDeadPC === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDeadPC === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                       GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDead === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDead === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.const(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if( ! cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id,value: options.default || 'YES'});","                   if( !validator(attr.get('current'))){","                       attr.set('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev);","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2027},{"start":{"row":0,"column":0},"end":{"row":556,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDeadPC === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDeadPC === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                       GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDead === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDead === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   $d(attr);","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev);","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":255,"column":0},"end":{"row":255,"column":28},"action":"remove","lines":["                   $d(attr);"],"id":2028}],[{"start":{"row":255,"column":0},"end":{"row":256,"column":0},"action":"remove","lines":["",""],"id":2029}],[{"start":{"row":251,"column":38},"end":{"row":252,"column":0},"action":"insert","lines":["",""],"id":2055},{"start":{"row":252,"column":0},"end":{"row":252,"column":15},"action":"insert","lines":["               "]}],[{"start":{"row":252,"column":15},"end":{"row":252,"column":16},"action":"insert","lines":["I"],"id":2056}],[{"start":{"row":252,"column":15},"end":{"row":252,"column":16},"action":"remove","lines":["I"],"id":2057}],[{"start":{"row":252,"column":15},"end":{"row":252,"column":16},"action":"insert","lines":["v"],"id":2058}],[{"start":{"row":252,"column":16},"end":{"row":252,"column":17},"action":"insert","lines":["a"],"id":2059}],[{"start":{"row":252,"column":17},"end":{"row":252,"column":18},"action":"insert","lines":["r"],"id":2060}],[{"start":{"row":252,"column":18},"end":{"row":252,"column":19},"action":"insert","lines":[" "],"id":2061}],[{"start":{"row":252,"column":19},"end":{"row":252,"column":20},"action":"insert","lines":["i"],"id":2062}],[{"start":{"row":252,"column":20},"end":{"row":252,"column":21},"action":"insert","lines":[" "],"id":2063}],[{"start":{"row":252,"column":21},"end":{"row":252,"column":22},"action":"insert","lines":["="],"id":2064}],[{"start":{"row":252,"column":22},"end":{"row":252,"column":23},"action":"insert","lines":[" "],"id":2065}],[{"start":{"row":252,"column":23},"end":{"row":252,"column":24},"action":"insert","lines":["0"],"id":2066}],[{"start":{"row":252,"column":24},"end":{"row":252,"column":25},"action":"insert","lines":["'"],"id":2067}],[{"start":{"row":252,"column":24},"end":{"row":252,"column":25},"action":"remove","lines":["'"],"id":2068}],[{"start":{"row":252,"column":24},"end":{"row":252,"column":25},"action":"insert","lines":[";"],"id":2069}],[{"start":{"row":260,"column":16},"end":{"row":261,"column":0},"action":"insert","lines":["",""],"id":2070},{"start":{"row":261,"column":0},"end":{"row":261,"column":15},"action":"insert","lines":["               "]}],[{"start":{"row":261,"column":15},"end":{"row":261,"column":16},"action":"insert","lines":["i"],"id":2071}],[{"start":{"row":261,"column":16},"end":{"row":261,"column":17},"action":"insert","lines":["i"],"id":2072}],[{"start":{"row":261,"column":16},"end":{"row":261,"column":17},"action":"remove","lines":["i"],"id":2073}],[{"start":{"row":261,"column":16},"end":{"row":261,"column":17},"action":"insert","lines":["+"],"id":2074}],[{"start":{"row":261,"column":17},"end":{"row":261,"column":18},"action":"insert","lines":["+"],"id":2075}],[{"start":{"row":261,"column":18},"end":{"row":261,"column":19},"action":"insert","lines":[";"],"id":2076}],[{"start":{"row":261,"column":19},"end":{"row":262,"column":0},"action":"insert","lines":["",""],"id":2077},{"start":{"row":262,"column":0},"end":{"row":262,"column":15},"action":"insert","lines":["               "]}],[{"start":{"row":262,"column":0},"end":{"row":262,"column":15},"action":"remove","lines":["               "],"id":2078}],[{"start":{"row":262,"column":0},"end":{"row":263,"column":0},"action":"remove","lines":["",""],"id":2079}],[{"start":{"row":261,"column":2},"end":{"row":261,"column":19},"action":"remove","lines":["             i++;"],"id":2080}],[{"start":{"row":258,"column":20},"end":{"row":259,"column":0},"action":"insert","lines":["",""],"id":2081},{"start":{"row":259,"column":0},"end":{"row":259,"column":19},"action":"insert","lines":["                   "]}],[{"start":{"row":259,"column":19},"end":{"row":259,"column":36},"action":"insert","lines":["             i++;"],"id":2082}],[{"start":{"row":259,"column":20},"end":{"row":259,"column":24},"action":"remove","lines":["    "],"id":2083}],[{"start":{"row":259,"column":20},"end":{"row":259,"column":24},"action":"remove","lines":["    "],"id":2084}],[{"start":{"row":259,"column":20},"end":{"row":259,"column":24},"action":"remove","lines":["    "],"id":2085}],[{"start":{"row":262,"column":0},"end":{"row":262,"column":2},"action":"remove","lines":["  "],"id":2086}],[{"start":{"row":262,"column":0},"end":{"row":263,"column":0},"action":"remove","lines":["",""],"id":2087}],[{"start":{"row":259,"column":19},"end":{"row":259,"column":20},"action":"remove","lines":[" "],"id":2088}],[{"start":{"row":259,"column":23},"end":{"row":260,"column":0},"action":"insert","lines":["",""],"id":2089},{"start":{"row":260,"column":0},"end":{"row":260,"column":19},"action":"insert","lines":["                   "]}],[{"start":{"row":260,"column":19},"end":{"row":260,"column":20},"action":"insert","lines":["G"],"id":2090}],[{"start":{"row":260,"column":20},"end":{"row":260,"column":21},"action":"insert","lines":["M"],"id":2091}],[{"start":{"row":260,"column":21},"end":{"row":260,"column":22},"action":"insert","lines":["W"],"id":2092}],[{"start":{"row":260,"column":22},"end":{"row":260,"column":24},"action":"insert","lines":["()"],"id":2093}],[{"start":{"row":260,"column":23},"end":{"row":260,"column":35},"action":"insert","lines":["character.id"],"id":2094}],[{"start":{"row":260,"column":36},"end":{"row":260,"column":37},"action":"insert","lines":[";"],"id":2095}],[{"start":{"row":260,"column":23},"end":{"row":260,"column":24},"action":"insert","lines":["I"],"id":2096}],[{"start":{"row":260,"column":24},"end":{"row":260,"column":25},"action":"insert","lines":[" "],"id":2097}],[{"start":{"row":260,"column":25},"end":{"row":260,"column":26},"action":"insert","lines":["+"],"id":2098}],[{"start":{"row":260,"column":26},"end":{"row":260,"column":27},"action":"insert","lines":["\""],"id":2099}],[{"start":{"row":260,"column":27},"end":{"row":260,"column":28},"action":"insert","lines":[" "],"id":2100}],[{"start":{"row":260,"column":28},"end":{"row":260,"column":29},"action":"insert","lines":["\""],"id":2101}],[{"start":{"row":260,"column":29},"end":{"row":260,"column":30},"action":"insert","lines":["+"],"id":2102}],[{"start":{"row":260,"column":23},"end":{"row":260,"column":24},"action":"remove","lines":["I"],"id":2103},{"start":{"row":260,"column":23},"end":{"row":260,"column":24},"action":"insert","lines":["i"]}],[{"start":{"row":0,"column":0},"end":{"row":558,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDeadPC === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDeadPC === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                       GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDead === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDead === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               var i = 0;","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   i++;","                   GMW(i +\" \"+character.id);","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev);","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2104},{"start":{"row":0,"column":0},"end":{"row":555,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDeadPC === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDeadPC === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDead === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDead === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":526,"column":68},"end":{"row":526,"column":69},"action":"insert","lines":[","],"id":2105}],[{"start":{"row":526,"column":69},"end":{"row":526,"column":70},"action":"insert","lines":[" "],"id":2106}],[{"start":{"row":526,"column":70},"end":{"row":526,"column":71},"action":"insert","lines":["n"],"id":2107}],[{"start":{"row":526,"column":71},"end":{"row":526,"column":72},"action":"insert","lines":["o"],"id":2108}],[{"start":{"row":526,"column":70},"end":{"row":526,"column":72},"action":"remove","lines":["no"],"id":2109},{"start":{"row":526,"column":70},"end":{"row":526,"column":71},"action":"insert","lines":["\""]}],[{"start":{"row":526,"column":71},"end":{"row":526,"column":72},"action":"insert","lines":["Y"],"id":2110}],[{"start":{"row":526,"column":72},"end":{"row":526,"column":73},"action":"insert","lines":["E"],"id":2111}],[{"start":{"row":526,"column":73},"end":{"row":526,"column":74},"action":"insert","lines":["S"],"id":2112}],[{"start":{"row":526,"column":74},"end":{"row":526,"column":75},"action":"insert","lines":["\""],"id":2113}],[{"start":{"row":526,"column":71},"end":{"row":526,"column":74},"action":"remove","lines":["YES"],"id":2114},{"start":{"row":526,"column":71},"end":{"row":526,"column":72},"action":"insert","lines":["N"]}],[{"start":{"row":526,"column":72},"end":{"row":526,"column":73},"action":"insert","lines":["O"],"id":2115}],[{"start":{"row":537,"column":43},"end":{"row":537,"column":44},"action":"insert","lines":[","],"id":2116}],[{"start":{"row":537,"column":44},"end":{"row":537,"column":45},"action":"insert","lines":[" "],"id":2117}],[{"start":{"row":537,"column":45},"end":{"row":537,"column":47},"action":"remove","lines":[");"],"id":2118},{"start":{"row":537,"column":45},"end":{"row":537,"column":51},"action":"insert","lines":["\"NO\");"]}],[{"start":{"row":526,"column":68},"end":{"row":526,"column":74},"action":"remove","lines":[", \"NO\""],"id":2119}],[{"start":{"row":537,"column":43},"end":{"row":537,"column":49},"action":"remove","lines":[", \"NO\""],"id":2120}],[{"start":{"row":16,"column":41},"end":{"row":16,"column":42},"action":"insert","lines":[","],"id":2121}],[{"start":{"row":16,"column":42},"end":{"row":16,"column":43},"action":"insert","lines":[" "],"id":2122}],[{"start":{"row":16,"column":43},"end":{"row":16,"column":44},"action":"insert","lines":["u"],"id":2123}],[{"start":{"row":16,"column":44},"end":{"row":16,"column":45},"action":"insert","lines":["p"],"id":2124}],[{"start":{"row":16,"column":45},"end":{"row":16,"column":46},"action":"insert","lines":["d"],"id":2125}],[{"start":{"row":16,"column":46},"end":{"row":16,"column":47},"action":"insert","lines":["a"],"id":2126}],[{"start":{"row":16,"column":47},"end":{"row":16,"column":48},"action":"insert","lines":["t"],"id":2127}],[{"start":{"row":16,"column":48},"end":{"row":16,"column":49},"action":"insert","lines":["e"],"id":2128}],[{"start":{"row":0,"column":0},"end":{"row":555,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDeadPC === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDeadPC === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDead === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDead === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2129},{"start":{"row":0,"column":0},"end":{"row":556,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDeadPC === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDeadPC === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDead === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDead === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update === \"YES\") return;","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":0,"column":0},"end":{"row":556,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDeadPC === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDeadPC === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(curValue > 0 && state.HealthColors.auraDead === true) obj.set(\"status_dead\", false);","                        else if(curValue < 1 && state.HealthColors.auraDead === true) {","                            if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                            obj.set(\"status_dead\", true);","                            SetAuraNone(obj);","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update === \"YES\") return;","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2130},{"start":{"row":0,"column":0},"end":{"row":560,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true) {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true) {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update === \"YES\") return;","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":0,"column":0},"end":{"row":560,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true) {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true) {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update === \"YES\") return;","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2131},{"start":{"row":0,"column":0},"end":{"row":560,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update === \"YES\") return;","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":276,"column":31},"end":{"row":276,"column":32},"action":"insert","lines":["O"],"id":2132}],[{"start":{"row":276,"column":32},"end":{"row":276,"column":33},"action":"insert","lines":["P"],"id":2133}],[{"start":{"row":276,"column":33},"end":{"row":276,"column":34},"action":"insert","lines":["T"],"id":2134}],[{"start":{"row":276,"column":34},"end":{"row":276,"column":35},"action":"insert","lines":["I"],"id":2135}],[{"start":{"row":276,"column":35},"end":{"row":276,"column":36},"action":"insert","lines":["O"],"id":2136}],[{"start":{"row":276,"column":36},"end":{"row":276,"column":37},"action":"insert","lines":["N"],"id":2137}],[{"start":{"row":284,"column":39},"end":{"row":284,"column":44},"action":"remove","lines":["'YES'"],"id":2138},{"start":{"row":284,"column":39},"end":{"row":284,"column":45},"action":"insert","lines":["OPTION"]}],[{"start":{"row":417,"column":55},"end":{"row":417,"column":61},"action":"insert","lines":["OPTION"],"id":2139}],[{"start":{"row":0,"column":0},"end":{"row":560,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","            //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","                //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","            //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","                //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update === \"YES\") return;","                if(curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(OPTION){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, OPTION);","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate(OPTION);","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2140},{"start":{"row":0,"column":0},"end":{"row":559,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","        //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","        //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update !== \"YES\" && curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":0,"column":0},"end":{"row":559,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","        //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","        //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update !== \"YES\" && curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2141},{"start":{"row":0,"column":0},"end":{"row":559,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","        //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","        //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update !== \"YES\" && curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":0,"column":0},"end":{"row":559,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 16 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","        //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","        //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update !== \"YES\" && curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2142},{"start":{"row":0,"column":0},"end":{"row":559,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.1',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 19 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","        //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","        //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update !== \"YES\" && curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":0,"column":0},"end":{"row":559,"column":3},"action":"remove","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.1',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 19 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","        //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","        //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update !== \"YES\" && curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2143},{"start":{"row":0,"column":0},"end":{"row":559,"column":3},"action":"insert","lines":["/* global createObj TokenMod getAttrByName filterObjs spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","/*jshint bitwise: false*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.4.1',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 19 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev, update) {","            //CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") === \"\" && state.HealthColors.OneOff === true)) {","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                var maxValue, curValue, prevValue;","                if(obj.get(barUsed + \"_max\") !== \"\" || obj.get(barUsed + \"_value\") !== \"\") {","                    maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                    curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                    prevValue = prev[barUsed + \"_value\"];","                }","                if(isNaN(maxValue) || isNaN(curValue) || isNaN(prevValue)) return;","        //CHECK DISABLED AURA/TINT ATTRIB------------","                var UseAura;","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","                    UseAura = lookupUseColor(oCharacter);","                }","                //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","                var GM = '',PC = '';","        //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        //IF PLAYER------------","                if(type == 'Player') {","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(state.HealthColors.PCAura !== false && UseAura !== \"NO\") {","                        var cBy = oCharacter.get('controlledby');","                        var player = getObj('player', cBy);","                        pColor = '#000000';","                        if(player !== undefined) pColor = player.get('color');","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDeadPC === true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //IF MONSTER------------","                else if(type == 'Monster') {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(state.HealthColors.NPCAura !== false && UseAura !== \"NO\") {","            //SET HEALTH COLOR----------","                        if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","            //ELSE SHOW DEAD----------","                        if(state.HealthColors.auraDead == true && update !== \"YES\") {","                            if(curValue > 0) obj.set(\"status_dead\", false);","                            else if(curValue < 1) {","                                if(state.HealthColors.auraDeadFX !== \"None\" && curValue != prevValue) PlayDeath(state.HealthColors.auraDeadFX);","                                obj.set(\"status_dead\", true);","                                SetAuraNone(obj);","                            }","                        }","                    }","                    else SetAuraNone(obj);","                }","        //SET SHOW NAMES------------","                SetShowNames(GM,PC,obj);","//**SPURT FX------------//","                if(update !== \"YES\" && curValue != prevValue && prevValue != \"\") {","        //CHECK BLOOD ATTRIB------------","                    var UseBlood;","                    if(oCharacter !== undefined) {","                        UseBlood = lookupUseBlood(oCharacter);","                    }","                    if(state.HealthColors.FX === true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                        var HurtColor, HealColor, FX, aFX, FXArray = [];","                        var amount = Math.abs(curValue - prevValue);","                        var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                        var Scale = obj.get(\"height\") / 70;","                        var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","            //IF HEALED------------","                        if(curValue > prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                            FX = aFX.get(\"definition\");","                            HealColor = HEXtoRGB(state.HealthColors.HealFX);","                            FX.startColour = HealColor;","                            FXArray.push(FX);","                        }","            //IF HURT------------","                        else if(curValue < prevValue) {","                            aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                            if(aFX) FX = aFX.get(\"definition\");","                    //CHECK DEFAULT COLOR--","                            if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                                HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                    //ELSE CHECK CUSTOM COLOR/FX--","                            else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                                HurtColor = HEXtoRGB(UseBlood);","                        //IF CUSTOM COLOR--","                                if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                    FX.startColour = HurtColor;","                                    FXArray.push(FX);","                                    }","                        //ELSE ASSUME CUSTOM FX--","                                else {","                                    var i = UseBlood.split(/,/);","                                    _.each(i, function (FXname) {","                                        aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                        if(aFX) FXArray.push(aFX.get(\"definition\"));","                                        else GMW(\"No FX with name \" + FXname);","                                    });","                                }","                            }","                        }","                        else return;","            //SPAWN FX------------","                        _.each(FXArray, function (FX) {","                            SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                        });","                    }","                }","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase(), UPPER =\"\";","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var OPTION = msgFormula[1] || \"MENU\";","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(OPTION !== \"MENU\") GMW(\"UPDATING TOKENS...\");","                    switch(OPTION.toUpperCase()) {","                    case \"MENU\":","                        break;","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        break;","                    case \"HEAL\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        break;","                    case \"HURT\":","                        UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        break;","                    case \"RESET\":","                        delete state.HealthColors;","                        GMW(\"STATE RESET\");","                        checkInstall();","                        return;","                    }","                    aurahelp(OPTION);","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //ATTRIBUTE CACHE------------","       makeSmartAttrCache = function (attribute, options) {","           let cache = {},","               defaultValue = options.default || 'YES',","               validator = options.validation || _.constant(true);","           on('change:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   if(!validator(attr.get('current'))) {","                       attr.setWithWorker('current', defaultValue);","                   }","                   cache[attr.get('characterid')] = attr.get('current');","               }","           });","           on('destory:attribute', function (attr) {","               if(attr.get('name') === attribute) {","                   delete cache[attr.get('characterid')];","               }","           });","           return function(character){","               if(!cache[character.id]){","                   let attr = findObjs({type: 'attribute',name: attribute,characterid: character.id},{caseInsensitive:true})[0] ||","                   createObj('attribute',{name: attribute,characterid: character.id, current: defaultValue});","                   if( !validator(attr.get('current'))){","                       attr.setWithWorker('current',defaultValue);","                   }","                   cache[character.id]=attr.get('current');","               }","               return cache[character.id];","           };","       },","        lookupUseBlood = makeSmartAttrCache('USEBLOOD',{","            default: 'DEFAULT'","        }),","        lookupUseColor = makeSmartAttrCache('USECOLOR',{","            default: 'YES',","            validation: (o)=>o.match(/YES|NO/)","        }),","    //FORCE ALL TOKEN UPDATE------------","        ForceUpdate = function(){","            var i = 0;","            var start = new Date().getTime();","            var barUsed = state.HealthColors.auraBar;","            _.chain(findObjs({type: 'graphic',subtype: 'token',layer: 'objects'}))","            .filter((o)=>o.get(barUsed + \"_max\") !== \"\" && o.get(barUsed + \"_value\") !== \"\")","            .each(function(obj) {","                var prev = JSON.parse(JSON.stringify(obj));","                handleToken(obj, prev, 'YES');","                i++;","            });","            var end = new Date().getTime();","            return \"Tokens Processed: \" + i + \"<br>Run time in ms: \" + (end - start);","        },","    //WHISPER GM------------","        GMW = function (text) {","            var DIV = \"<div style='width: 100%; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #000; background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var MSG = DIV + \"'><b>\"+text+\"</b></div\";","            sendChat('HealthColors', \"/w GM \"+MSG);","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","        SetShowNames = function(GM,PC,obj) {","            if(GM != 'Off') {","                GM = (GM == \"Yes\") ? true : false;","                obj.set({'showname': GM});","            }","            if(PC != 'Off') {","                PC = (PC == \"Yes\") ? true : false;","                obj.set({'showplayers_name': PC});","            }","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","          \tvar RandTrackName;","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': \"transparent\",});","            else obj.set({'aura1_color': \"\",'aura2_color': \"\",});","        },","        //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //HELP MENU------------","        aurahelp = function (OPTION) {","            var Update = '';","            if(OPTION !== \"MENU\") Update = ForceUpdate();","            var img = \"background-image: -webkit-linear-gradient(left, #76ADD6 0%, #a7c7dc 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 48px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u><big>HealthColors Version: ' + version + '</u></big><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                Update +//--","                '</div>');","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('-=>' + ScriptName + ' v' + version + ' [Updated: ' + Updated + ']<=-');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","            //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) TokenMod.ObserveTokenChange(handleToken);","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","            if(!FXHurt) {","                GMW(\"Creating Default Hurt FX\");","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                GMW(\"Creating Default Heal FX\");","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","    //RETURN OUTSIDE FUNCTIONS------------","    return {","        GMW: GMW,","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.GMW(\"API READY\");","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":556,"column":4},"end":{"row":556,"column":5},"action":"insert","lines":["/"],"id":2144}],[{"start":{"row":556,"column":5},"end":{"row":556,"column":6},"action":"insert","lines":["/"],"id":2145}]]},"ace":{"folds":[],"scrolltop":7072,"scrollleft":0,"selection":{"start":{"row":556,"column":6},"end":{"row":556,"column":6},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":504,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1490120421428,"hash":"af33ff1f9faa6e98f754549d9381ed6971710284"}