{"changed":true,"filter":false,"title":"TempFiles","tooltip":"/TempFiles","value":"/*global gmC PlaySound MakeRollNum TopBar setDefaultTokenForCharacter state on MidBar obj BottBar getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/\non('chat:message', function(msg) {\n    if (msg.type != \"api\") return;\n//----CHECK CHARACTER\n    var cWho = findObjs({ _type: 'character',name: msg.who})[0];\n    if (cWho === undefined) {\n        cWho = RollRight(msg.playerid);\n        msg.who = cWho.get(\"name\");\n    }\n    var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");\n    var PRGB = hexToRgbP(PlayerBGColor);\n    var PlayerBarColor = \"background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.8),\"+PRGB+\",\"+PRGB+\",rgba(0,0,0,0.8));\";\n    var MIDBAR = MakeMid(MidBar,PlayerBGColor,PlayerBarColor);\n    //\n    var msgFormula = msg.content.split(/\\s+/);\n    switch (msgFormula[0].toUpperCase()) {\n//PIC\n        case \"!PIC\":\n            var piclink = msgFormula[1];\n            var Pic = \"[pic](\" + piclink + \")\";\n            sendChat('', \"&{template:RIFTS} {{name=\" + msg.who + \"}} {{pic=\" + Pic + \"}}\");\n            break;\n\n//GM\n        case \"!GM\":\n            PlaySound('dice', 9000);\n            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";\n            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls some dice.. ●</div>\";\n            sendChat('', \"/direct \" + MSG);\n            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {\n                var rollresult = JSON.parse(ops[0].content);\n                var GMRW = OuterDiv + fPart + \"background-color:\" + gmC + \";'>ROLLED \" + msgFormula[1] + \":<b> \" + rollresult.total + \"</div>\";\n                sendChat('ROLL', \"/w GM \" + GMRW);\n            });\n            break;\n//PERC\n        case \"!GMPERC\":\n            PlaySound('dice', 9000);\n            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";\n            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls Perception Check●</div>\";\n            sendChat('', \"/direct \" + MSG);\n            break;\n        case \"!CHEST\":\n            PlaySound('dice', 9000);\n    \t\tvar Names = [];\n    \t\tif(msg.selected == undefined) {\n    \t\t\tsendChat('', \"/desc No one selected\");\n    \t\t\treturn;\n    \t\t}\n    \t\tvar selected = msg.selected;\n    \t\ti = 0;\n    \t\t_.each(selected, function (obj) {\n    \t\t\tvar token = getObj('graphic', msg.selected[i]._id);\n    \t\t\tif(token.get(\"represents\") !== '') {\n    \t\t\t\tif(token.get('subtype') !== 'token') return;\n    \t\t\t\tvar oCharacter = getObj('character', token.get(\"_represents\"));\n    \t\t\t\tvar name = (oCharacter.get('name'));\n    \t\t\t\tNames.push(oCharacter);\n    \t\t\t}\n    \t\t\ti++;\n    \t\t});\n    \t\tvar rand = Names[Math.floor(Math.random() * Names.length)];\n    \t\tvar name = (rand.get('name'));\n    \t\tvar pColor = GetPColor(rand);\n    \t\tvar RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+pColor+\",\"+pColor+\",#000000);\";\n            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>Event: Pick player</b></div>\"+BottBar + RollColor +\";'>● Who: \" + name + \"  ●</div>\";\n            sendChat('', \"/direct \" + MSG);\n            break;\n//WHISPER\n        case \"!WIS\":\n            var nXp = msg.content.substr(msg.content.indexOf(\" \") + 1);\n            var wischat = OuterDiv + iPart + \"background-color:#831F29;'><b>● \" + nXp + \" ●</div></div>\";\n            sendChat('System', \"/w \" + msg.who + ' ' + wischat);\n            sendChat(msg.who, \"/w GM \" + wischat);\n            break;\n//CREDITS\n        case \"!CRED\":\n            var nCred = msgFormula[1];\n            var oC = findObjs({name: \"Credits\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];\n            var Cred = oC.get(\"current\");\n            var mCred = oC.get(\"max\");\n            var total = parseInt(nCred) + parseInt(Cred);\n            oC.set('current', total);\n            var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");\n            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \"  ●</u><b><br>Credits Adjust: \" + formatNumber(nCred) + \"<br>Credits Total: \" + formatNumber(total) + \"</div>\";\n            sendChat('', \"/direct \" + help);\n            break;\n//SAVINGTHROW\n        case \"!SAVE\":\n            PlaySound('dice', 9000);\n            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {\n                var rollresult = JSON.parse(ops[0].content);\n                total = rollresult.total;\n                if (msg.who == \"NPC\") total = total + 1;\n                else total = total - 1;\n                if (total < 1) total = 1;\n                if (total > 20) total = 20;\n                var rText = total + \"</b> (Needed to beat \" + msgFormula[2]+\")\";\n                if (total >= msgFormula[2]) {\n                    var RE = \"<b>SUCCEEDED!<BR>\" + rText + \"</b></div>\";\n                    var COLOR = \"#47BE02\";\n                }\n                else {\n                    var RE = \"<b>FAILED!<BR>\" + rText + \"</b></div>\";\n                    var COLOR = \"#BE0202\";\n                }\n                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",\"+COLOR+\",#000000);\";\n                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" save: \" + msgFormula[3] + \"</b></div>\"+BottBar + RollColor +\";'>\" + RE+ \"</div>\";\n                sendChat('', \"/direct \" + MSG);\n            });\n            break;\n//DC CHECK\n        case \"!CHECK\":\n            PlaySound('dice', 9000);\n            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#8B4513,#8B4513,#000000);\";\n            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {\n                var rollresult = JSON.parse(ops[0].content);\n                var RawTotal = rollresult.total;\n                if (msg.who == \"NPC\") RawTotal = RawTotal + 1;\n                else rollresult.total = rollresult.total - 1;\n                if (RawTotal < 1) RawTotal = 1;\n                if (RawTotal > 20) RawTotal = 20;\n                var bonus = Math.floor((msgFormula[2] - 10) / 2);\n                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" \" + msgFormula[3] + \" Check:</b></div>\"+BottBar + RollColor +\";'><b>\" + (RawTotal+bonus) + \"</b> (\" + RawTotal + \" + \" + bonus + \")</div>\";\n                sendChat('', \"/direct \" + MSG);\n\n            });\n            break;\n//PERC\n        case \"!PERC\":\n            PlaySound('dice', 9000);\n            var nMod = msgFormula[1];\n            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {\n                var rollresult = JSON.parse(ops[0].content);\n                total = rollresult.total;\n                var try1 = randomInteger(100);\n                sendChat(msg.who, \"/direct <b>Perc Check\");\n                sendChat(\"PERC\", \"/w GM <b>\" + msg.who + \" \" + [\n                    [try1 < total]\n                ] + \"<br>(\" + try1 + \" out of \" + total + \")\");\n            });\n            break;\n//FOOD\n        case \"!FOOD\":\n            var nXp = msgFormula[1];\n            var oC = findObjs({name: \"HUNGER\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];\n            if (oC === undefined || oC.length === 0) {\n                sendChat(msg.who, '/direct No FOOD Found, please set!');\n                return;\n            }\n            var XP = oC.get(\"current\");\n            var XPx = oC.get(\"max\");\n            var total = parseInt(nXp) + parseInt(XP);\n            if (total > XPx) total = XPx;\n            oC.set('current', total);\n            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \" ate  ●</u><b><br>HUNGER: \" + formatNumber(total) + \"</div>\";\n            sendChat('', \"/direct \" + help);\n            break;\n//SLEEP\n        case \"!SLEEP\":\n            var attirbSleep = findObjs({name: \"SLEEPING\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];\n            if (attirbSleep === undefined || attirbSleep.length === 0) {\n                sendChat(msg.who, '/direct No SLEEP Found, please set!');\n                return;\n            }\n            var CurrentSleep = attirbSleep.get(\"current\");\n            var message = \"Is Sleeping\"\n            if (CurrentSleep == 0) {\n                attirbSleep.set('current', 1);\n                var message = \"Is Sleeping\"\n            }\n            if (CurrentSleep == 1) {\n                attirbSleep.set('current', 0);\n                var message = \"Wakes Up\"\n            }\n            var help = lPart + \"background-color:#\" + greenC + \";'>● \" + msg.who + \" \" + message + \"  ●<b></div>\";\n            sendChat('', \"/direct \" + help);\n            break;\n//XP\n        case \"!XP\":\n            var nXp = msgFormula[1];\n            var oC = findObjs({name: \"XP\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];\n            var oL = findObjs({name: \"Level\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];\n            if (oC === undefined || oC.length === 0) {\n                sendChat(msg.who, '/direct No XP Found, please set!');\n                return;\n            }\n            var XP = oC.get(\"current\");\n            var Level = oL.get(\"current\");\n            var mXP = oC.get(\"max\");\n            var total = parseInt(nXp) + parseInt(XP);\n            oC.set('current', total);\n            var help = OuterDiv + lPart + \"background-color:#831F29;'><u>● \" + msg.who + \" ●</u> [Level:\" + Level + \"] <br>XP Earned: \" + formatNumber(nXp) + \"<br>XP Total: \" + formatNumber(total) + \"<br>Next Level: \" + formatNumber(mXP) + \"</div>\";\n            sendChat('', \"/direct \" + help);\n            break;\n//BLINDROLL\n        case \"!RB\":\n            PlaySound('dice', 9000);\n            msg.content = MakeRollNum(msg.content, msg.inlinerolls);\n            var ar = msg.inlinerolls[0];\n            var Atotal = (ar.results.total);\n            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {\n                var rollresult2 = JSON.parse(ops[0].content);\n                var rollresult = JSON.parse(ops[0].content);\n                total = rollresult.total;\n                var skillN = \"\", i = 0, GM = \"\", RE = \"\",COLOR = \"#7DB1D1\";\n                while (msgFormula[5 + i] !== undefined) {\n                    skillN = skillN + \" \" + msgFormula[5 + i];\n                    i++;\n                }\n                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";\n                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" attempts </b></div>\";\n                var totalAd = parseInt(Atotal) + parseInt(msgFormula[3]);\n                var rText = \"<b>\" + total + \"</b> out of <b>\" + totalAd + \" </b>(\" + Atotal + \" + \" + msgFormula[3] + \")\";\n                if (msgFormula[4].toUpperCase() == \"1\") {\n                    if (total > 93) {\n                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";\n                        COLOR = \"#B30000,#B30000,#B30000\";\n                    }\n                    else if (total <= 5) {\n                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";\n                        COLOR = \"#00C400,#00C400,#00C400\";\n                    }\n                    else if (total <= totalAd) {\n                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";\n                    }\n                    else {\n                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" FAILED!<BR>\" + rText + \"</div>\";\n                    }\n                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";\n                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");\n                    if(GM !== \"\") sendChat('BlindRoll', \"/w GM \" + MSG +BottBar + RollColor + GM);\n                }\n                else {\n                    if (total > 93) {\n                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";\n                        COLOR = \"#B30000,#B30000,#B30000\";\n                    }\n                    else if (total <= 5) {\n                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";\n                        COLOR = \"#00C400,#00C400,#00C400\";\n                    }\n                    else if (total <= totalAd) {\n                        var RE = msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";\n                    }\n                    else {\n                        var RE = msg.who + \" FAILED!<BR>\" + rText + \"</div>\";\n                    }\n                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";\n                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");\n                }\n            });\n            break;\n//ROTATE\n        case \"!ROTATE\":\n            var selected = msg.selected;\n            var i = 0;\n            _.each(selected, function(obj) {\n                var token = getObj('graphic', msg.selected[i]._id);\n                token.set({\n                    rotation: (randomInteger(360) - 1)\n                });\n                i++;\n            });\n            break;\n        default:\n            return;\n    }\n});/*global createObj TokenMod getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/\n/*\nMy Profile link: https://app.roll20.net/users/262130/dxwarlock\nGIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors\nRoll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor\n*/\nvar HealthColors = HealthColors || (function () {\n    'use strict';\n    var version = '1.3.2',\n        ScriptName = \"HealthColors\",\n        schemaVersion = '1.0.3',\n        Updated = \"Mar 10 2017\",\n/*------------------------\nON TOKEN CHANGE/CREATE\n------------------------*/\n        handleToken = function (obj, prev) {\n//CHECK IF TRIGGERED------------\n            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;\n            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {\n    //**ATTRIBUTE CHECK------------//\n                var oCharacter = getObj('character', obj.get(\"_represents\"));\n                if(oCharacter !== undefined) {\n        //CHECK BLOOD ATTRIB------------\n                    if(getAttrByName(oCharacter.id, 'BLOODCOLOR') === undefined) CreateAttrib(oCharacter, 'BLOODCOLOR', 'DEFAULT');\n                    var Blood = findObjs({name: 'BLOODCOLOR',_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];\n                    var UseBlood = Blood.get(\"current\");\n                    UseBlood = UseBlood.toString().toUpperCase();\n        //CHECK DISABLED AURA/TINT ATTRIB------------\n                    if(getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter, 'USECOLOR', 'YES');\n                    var UseAuraAtt = findObjs({name: \"USECOLOR\",_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];\n                    var UseAura = UseAuraAtt.get(\"current\");\n                    UseAura = UseAura.toString().toUpperCase();\n                    if(UseAura != \"YES\" && UseAura != \"NO\") {\n                        var name = oCharacter.get('name');\n                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");\n                        UseAuraAtt.set('current', \"YES\");\n                    }\n                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();\n                }\n    //**CHECK BARS------------//\n                var barUsed = state.HealthColors.auraBar;\n                if(obj.get(barUsed + \"_max\") === \"\" || obj.get(barUsed + \"_value\") === \"\") return;\n                var maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);\n                var curValue = parseInt(obj.get(barUsed + \"_value\"), 10);\n                var prevValue = prev[barUsed + \"_value\"];\n                if(isNaN(maxValue) && isNaN(curValue)) return;\n                if(maxValue === \"\" || curValue === \"\" || prevValue === \"\" ) return;\n        //CALC PERCENTAGE------------\n                var perc = Math.round((curValue / maxValue) * 100);\n                var percReal = Math.min(100, perc);\n    //**CHECK MONSTER OR PLAYER------------//\n                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';\n                var GM = '', PC = '';\n                var markerColor = PercentToHEX(Math.min(100, percReal));\n                var pColor = '#ffffff';\n        //IF PLAYER------------\n                if(type == 'Player' && state.HealthColors.PCAura !== false) {\n                    var cBy = oCharacter.get('controlledby');\n                    var player = getObj('player', cBy);\n                    pColor = '#000000';\n                    if(player !== undefined) pColor = player.get('color');\n                    GM = state.HealthColors.GM_PCNames;\n                    PC = state.HealthColors.PCNames;\n                    if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);\n                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);\n                }\n        //IF MONSTER------------\n                else if(type == 'Monster' && state.HealthColors.NPCAura !== false) {\n                    GM = state.HealthColors.GM_NPCNames;\n                    PC = state.HealthColors.NPCNames;\n                    if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);\n                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);\n                }\n        //SET SHOW NAMES------------\n                if(GM != 'Off') {\n                    GM = (GM == \"Yes\") ? true : false;\n                    obj.set({'showname': GM});\n                }\n                if(PC != 'Off') {\n                    PC = (PC == \"Yes\") ? true : false;\n                    obj.set({'showplayers_name': PC});\n                }\n    //**SPURT FX------------//\n                if(state.HealthColors.FX == true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {\n                    var HurtColor, HealColor, HITS, FX, aFX, FXArray = [];\n                    var amount = Math.abs(curValue - prevValue);\n                    var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);\n                    var Scale = obj.get(\"height\") / 70;\n                    var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);\n        //IF HEAL------------\n                    if(curValue > prevValue) {\n                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];\n                        FX = aFX.get(\"definition\");\n                        HealColor = HEXtoRGB(state.HealthColors.HealFX);\n                        FX.startColour = HealColor;\n                        FXArray.push(FX);\n                    }\n        //IF HURT------------\n                    else if(curValue < prevValue) {\n                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];\n                        if(aFX) FX = aFX.get(\"definition\");\n                //IF DEFAULT COLOR--\n                        if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {\n                            HurtColor = HEXtoRGB(state.HealthColors.HurtFX);\n                            FX.startColour = HurtColor;\n                            FXArray.push(FX);\n                        }\n                //ELSE CUSTOM COLOR/FX--\n                        else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {\n                            HurtColor = HEXtoRGB(UseBlood);\n                    //IF CUSTOM COLOR--\n                            if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {\n                                FX.startColour = HurtColor;\n                                FXArray.push(FX);\n                                }\n                    //ELSE ASSUME CUSTOM FX--\n                            else {\n                                var i = UseBlood.split(/,/);\n                                _.each(i, function (FXname) {\n                                    aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];\n                                    if(aFX) {\n                                        FX = aFX.get(\"definition\");\n                                        FXArray.push(FX);\n                                    }\n                                    else GMW(\"No FX with name \" + FXname);\n                                });\n                            }\n                        }\n                    }\n                    else return;\n        //SPAWN FX------------\n                    _.each(FXArray, function (FX) {\n                        SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));\n                    });\n                }\n    //**SET DEAD------------\n                var deadNPC = state.HealthColors.auraDead;\n                var deadPC = state.HealthColors.auraDeadPC;\n                if(curValue <= 0 && deadNPC === true && type == 'Monster') {\n                    obj.set(\"status_dead\", true);\n                    SetAuraNone(obj);\n                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);\n                }\n                else if(curValue <= 0 && deadPC === true && type == 'Player') {\n                    obj.set(\"status_dead\", true);\n                    SetAuraNone(obj);\n                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);\n                }\n                else obj.set(\"status_dead\", false);\n            }\n        },\n/*------------------------\nCHAT MESSAGES\n------------------------*/\n        handleInput = function (msg) {\n            var msgFormula = msg.content.split(/\\s+/);\n            var command = msgFormula[0].toUpperCase();\n            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {\n                var option = msgFormula[1];\n                if(!playerIsGM(msg.playerid)) {\n                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");\n                    return;\n                }\n                else {\n                    if(option === undefined) {\n                        aurahelp();\n                        return;\n                    }\n                    switch(msgFormula[1].toUpperCase()) {\n                    case \"ON\":\n                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;\n                        aurahelp();\n                        break;\n                    case \"BAR\":\n                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];\n                        aurahelp();\n                        break;\n                    case \"TINT\":\n                        state.HealthColors.auraTint = !state.HealthColors.auraTint;\n                        aurahelp();\n                        break;\n                    case \"PERC\":\n                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);\n                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);\n                        aurahelp();\n                        break;\n                    case \"PC\":\n                        state.HealthColors.PCAura = !state.HealthColors.PCAura;\n                        aurahelp();\n                        break;\n                    case \"NPC\":\n                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;\n                        aurahelp();\n                        break;\n                    case \"GMNPC\":\n                        state.HealthColors.GM_NPCNames = msgFormula[2];\n                        aurahelp();\n                        break;\n                    case \"GMPC\":\n                        state.HealthColors.GM_PCNames = msgFormula[2];\n                        aurahelp();\n                        break;\n                    case \"PCNPC\":\n                        state.HealthColors.NPCNames = msgFormula[2];\n                        aurahelp();\n                        break;\n                    case \"PCPC\":\n                        state.HealthColors.PCNames = msgFormula[2];\n                        aurahelp();\n                        break;\n                    case \"DEAD\":\n                        state.HealthColors.auraDead = !state.HealthColors.auraDead;\n                        aurahelp();\n                        break;\n                    case \"DEADPC\":\n                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;\n                        aurahelp();\n                        break;\n                    case \"DEADFX\":\n                        state.HealthColors.auraDeadFX = msgFormula[2];\n                        aurahelp();\n                        break;\n                    case \"SIZE\":\n                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);\n                        aurahelp();\n                        break;\n                    case \"ONEOFF\":\n                        state.HealthColors.OneOff = !state.HealthColors.OneOff;\n                        aurahelp();\n                        break;\n                    case \"FX\":\n                        state.HealthColors.FX = !state.HealthColors.FX;\n                        aurahelp();\n                        break;\n                    case \"HEAL\":\n                        var UPPER = msgFormula[2];\n                        UPPER = UPPER.toUpperCase();\n                        state.HealthColors.HealFX = UPPER;\n                        aurahelp();\n                        break;\n                    case \"HURT\":\n                        var UPPER = msgFormula[2];\n                        UPPER = UPPER.toUpperCase();\n                        state.HealthColors.HurtFX = UPPER;\n                        aurahelp();\n                        break;\n                    default:\n                        return;\n                    }\n                }\n            }\n        },\n/*------------------------\nFUNCTIONS\n------------------------*/\n    //WHISPER GM------------\n        GMW = function (text) {\n            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");\n        },\n    //SPAWN FX------------\n        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {\n            _.defaults(FX, {\n                \"maxParticles\": 100,\n                \"duration\": 100,\n                \"size\": 100,\n                \"sizeRandom\": 100,\n                \"lifeSpan\": 100,\n                \"lifeSpanRandom\": 100,\n                \"speed\": 0,\n                \"speedRandom\": 0,\n                \"angle\": 0,\n                \"angleRandom\": 0,\n                \"emissionRate\": 100,\n                \"startColour\": [255,255,255,1],\n                \"endColour\": [0,0,0,1],\n                \"gravity\": {\"x\": 0,\"y\": 0.0},\n            });\n            var newFX = {\n                \"maxParticles\": FX.maxParticles * HitSize,\n                \"duration\": FX.duration * HitSize,\n                \"size\": FX.size * Scale / 2,\n                \"sizeRandom\": FX.sizeRandom * Scale / 2,\n                \"lifeSpan\": FX.lifeSpan,\n                \"lifeSpanRandom\": FX.lifeSpanRandom,\n                \"speed\": FX.speed * Scale,\n                \"speedRandom\": FX.speedRandom * Scale,\n                \"angle\": FX.angle,\n                \"angleRandom\": FX.angleRandom,\n                \"emissionRate\": FX.emissionRate * HitSize * 2,\n                \"startColour\": FX.startColour,\n                \"endColour\": FX.endColour,\n                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},\n            };\n            spawnFxWithDefinition(left,top,newFX,pageid);\n        },\n    //DEATH SOUND------------\n        PlayDeath = function (trackname) {\n            if(trackname.indexOf(\",\") > 0) {\n                var tracklist = trackname.split(\",\");\n                var RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];\n            }\n            else RandTrackName = trackname;\n            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];\n            if(track) {\n                track.set('playing', false);\n                track.set('softstop', false);\n                track.set('volume', 50);\n                track.set('playing', true);\n            }\n            else {\n                log(ScriptName + \": No track found named \" + RandTrackName);\n            }\n        },\n    //CREATE USECOLOR ATTR------------\n        CreateAttrib = function (oCharacter, attrib, value) {\n            log(\"Creating \" + attrib);\n            createObj(\"attribute\", {name: attrib,current: value,characterid: oCharacter.id});\n        },\n    //SET TOKEN COLORS------------\n        TokenSet = function (obj, sizeSet, markerColor, pColor) {\n            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});\n            else {\n                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));\n                var scale = Pageon.get(\"scale_number\") / 10;\n                obj.set({\n                    'aura1_radius': sizeSet * scale * 1.8,\n                    'aura2_radius': sizeSet * scale * 0.1,\n                    'aura1_color': markerColor,\n                    'aura2_color': pColor,\n                    'showplayers_aura1': true,\n                    'showplayers_aura2': true,\n                });\n            }\n        },\n    //HELP MENU------------\n        aurahelp = function () {\n            var img = \"background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";\n            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";\n            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';\n            var off = \"#A84D4D\";\n            var disable = \"#D6D6D6\";\n            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";\n            var FX = state.HealthColors.auraDeadFX.substring(0, 4);\n            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--\n                HR + //--\n                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--\n                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--\n                HR + //--\n                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                HR + //--\n                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--\n                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---\n                HR + //--\n                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--\n                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--\n                HR + //--\n                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--\n                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--\n                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--\n                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--\n                HR + //--\n                '</div>');\n        },\n    //OFF BUTTON COLORS------------\n        ButtonColor = function (state, off, disable) {\n            var color;\n            if(state == \"No\") color = off;\n            if(state == \"Off\") color = disable;\n            return color;\n        },\n    //REMOVE ALL------------\n        SetAuraNone = function (obj) {\n            var tint = state.HealthColors.auraTint;\n            if(tint === true) {\n                obj.set({'tint_color': \"transparent\",});\n            }\n            else {\n                obj.set({'aura1_color': \"\",'aura2_color': \"\",});\n            }\n        },\n    //PERC TO RGB------------\n        PercentToHEX = function (percent) {\n            if(percent === 100) percent = 99;\n            var r, g, b = 0;\n            if(percent < 50) g = Math.floor(255 * (percent / 50)),r = 255;\n            else g = 255, r = Math.floor(255 * ((50 - percent % 50) / 50));\n            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n            return HEX;\n        },\n    //HEX TO RGB------------\n        HEXtoRGB = function (hex) {\n            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);\n            if(parts) {\n                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();\n                rgb.push(1.0);\n                return rgb;\n            }\n            return [0, 0, 0, 0.0];\n        },\n    //CHECK INSTALL & SET STATE------------\n        checkInstall = function () {\n            log('<' + ScriptName + ' v' + version + ' Ready [Updated: ' + Updated + ']>');\n            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {\n                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');\n                state.HealthColors = {schemaVersion: schemaVersion};\n                state.HealthColors.version = version;\n            }\n        //CHECK STATE VALUES\n            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off\n            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use\n            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?\n            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC\n            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC\n            //-----------------\n            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?\n            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?\n            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC\n            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC\n            //-----------------\n            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?\n            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?\n            //-----------------\n            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?\n            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?\n            //-----------------\n            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?\n            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?\n            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR\n            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?\n            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name\n        //TokenMod CHECK\n            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) {\n                TokenMod.ObserveTokenChange(handleToken);\n            }\n            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];\n            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];\n        //DEFAULT FX CHECK\n        if(!FXHurt) {\n                log(ScriptName + ' <Creating Default Hurt FX>');\n                var Hurt = {\n                    \"maxParticles\": 150,\n                    \"duration\": 50,\n                    \"size\": 10,\n                    \"sizeRandom\": 3,\n                    \"lifeSpan\": 25,\n                    \"lifeSpanRandom\": 5,\n                    \"speed\": 8,\n                    \"speedRandom\": 3,\n                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},\n                    \"angle\": 270,\n                    \"angleRandom\": 25,\n                    \"emissionRate\": 100,\n                    \"startColour\": [0, 0, 0, 0],\n                    \"endColour\": [0, 0, 0, 0],\n                };\n                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});\n            }\n            if(!FXHeal) {\n                log(ScriptName + ' <Creating Default Heal FX>');\n                var Heal = {\n                    \"maxParticles\": 150,\n                    \"duration\": 50,\n                    \"size\": 10,\n                    \"sizeRandom\": 15,\n                    \"lifeSpan\": 50,\n                    \"lifeSpanRandom\": 30,\n                    \"speed\": 0.5,\n                    \"speedRandom\": 2,\n                    \"angle\": 0,\n                    \"angleRandom\": 180,\n                    \"emissionRate\": 1000,\n                    \"startColour\": [0, 0, 0, 0],\n                    \"endColour\": [0, 0, 0, 0],\n                };\n                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});\n            }\n        },\n    //OUTSIDE CALL------------\n        UpdateToken = function (obj, prev) {\n            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);\n            else GMW(\"Script sent non-Token to be updated!\");\n        },\n    //REGISTER TRIGGERS------------\n        registerEventHandlers = function () {\n            on('chat:message', handleInput);\n            on(\"change:token\", handleToken);\n            on('add:token', function (t) {\n                _.delay(() => {\n                    let token = getObj('graphic', t.id),\n                    prev = JSON.parse(JSON.stringify(token));\n                    handleToken(token, prev);\n                }, 400);\n            });\n        };\n/*------------------------\nRETURN OUTSIDE FUNCTIONS\n------------------------*/\n    return {\n        Update: UpdateToken,\n        CheckInstall: checkInstall,\n        RegisterEventHandlers: registerEventHandlers\n    };\n}());\n//On Ready\non('ready', function () {\n    'use strict';\n    HealthColors.CheckInstall();\n    HealthColors.RegisterEventHandlers();\n});on(\"change:graphic\", function(obj, prev) {\n    if(obj.get(\"name\") == \"NR\" || Campaign().get(\"turnorder\") == \"\") return;\n    var degs;\n    if(obj.get(\"left\") != prev.left || obj.get(\"top\") != prev.top) {\n         if(obj.get(\"layer\") == \"objects\") {\n            var movex = obj.get(\"left\") - prev.left;\n            var movey = obj.get(\"top\") - prev.top;\n            if(movey != 0) {\n                degs = Math.atan(movex/movey) * 57.29577;\n                if(movey < 0) degs = 360-degs%360;\n                else degs = 180-degs%360;\n            }\n            else if(movex < 0)degs = 270;\n            else degs = 90;\n            degs = degs - degs%1;\n            if (degs > 360) degs = degs-360;\n            obj.set(\"rotation\", degs);\n        }\n    }\n});on(\"change:graphic\", function(obj) {\n    var gmnotes = decodeURI(obj.get('gmnotes'));\n    var oCharacter = getObj('character', obj.get(\"_represents\"));\n    if((obj.get(\"name\") !== \"\" && gmnotes !== \"\") || oCharacter !== undefined) return;\n    obj.set('gmnotes', '{ATTACKS}5{/ATTACKS}<br>' +\n    '{INIT}1{/INIT}<br>' +\n    '{DAM}1{/DAM}<br>' +\n    '{STRK}1{/STRK}<br>' +\n    '{ABIL1}1d20+@{STRK}~1d6+@{DAM}~att1~NAME1{/ABIL1}<br>' +\n    '{ABIL2}1d20+@{STRK}~1d6+@{DAM}~att2~NAME2{/ABIL2}<br>' +\n    '{ABIL3}1d20+@{STRK}~3d6+@{DAM}~Rifle~Rifle{/ABIL3}<br>' +\n    '{ABIL4}1d20+@{STRK}~2d6+@{DAM}~Pistol~Pistol{/ABIL4}');\n});\non('chat:message', function(msg) {\n    if (msg.type == 'api' && msg.content.indexOf('!build') !== -1) {\n        if (msg.selected == undefined) {\n            sendChat(\"IMPORT\", \"/w GM /desc No one selected\");\n            return;\n        }\n        var selected = msg.selected;\n        //----------loop tokens\n        var i = 0;\n        _.each(selected, function(obj) {\n            var token = getObj('graphic', msg.selected[i]._id);\n            var MonsterName = token.get(\"name\");\n            var CheckSheet = findObjs({_type: \"character\",name: MonsterName});\n            // DO NOT CREATE IF SHEET EXISTS\n            if (CheckSheet.length > 0) {\n                sendChat(\"IMPORT\", \"/w GM This monster already exists.\");\n                return;\n            }\n            var Character = createObj(\"character\", {avatar: token.get(\"imgsrc\"),name: MonsterName,archived: false});\n            token.set(\"represents\", Character.id);\n            token.set(\"name\", MonsterName);\n            setatt(token, Character);\n            setDefaultTokenForCharacter(Character, token);\n            sendChat(\"IMPORT\", \"/w GM \"+MonsterName+\" created.\");\n            i++;\n        });\n    }\n});\n\n//----------------------\nfunction setatt(token, Character) {\n    var bar1m = parseInt(token.get(\"bar1_max\"));\n    var bar2m = parseInt(token.get(\"bar2_max\"));\n    token.set('flipv', !token.get('flipv'));\n    createObj(\"attribute\", {name: \"A-BODY\",current: bar1m,max: bar1m,characterid: Character.id});\n    createObj(\"attribute\", {name: \"HP\",current: bar2m,max: bar2m,characterid: Character.id});\n    var STAT = UnwrapString(\"ATTACKS\", \"~\", token);\n    createObj(\"attribute\", {name: \"ATT\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});\n    var STAT = UnwrapString(\"INIT\", \"~\", token);\n    createObj(\"attribute\", {name: \"INIT\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});\n    var STAT = UnwrapString(\"DAM\", \"~\", token);\n    createObj(\"attribute\", {name: \"DAM\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});\n    var STAT = UnwrapString(\"STRK\", \"~\", token);\n    createObj(\"attribute\", {name: \"STRK\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});\n    Create(\"ABIL1\",token,Character);\n    Create(\"ABIL2\",token,Character);\n    Create(\"ABIL3\",token,Character);\n    Create(\"ABIL4\",token,Character);\n    Create(\"ABIL5\",token,Character);\n    Create(\"ABIL6\",token,Character);\n}\n//-----------------------\nfunction Create(BIT,token,Character){\n    var Ability = UnwrapString(BIT, \"~\", token);\n    if(Ability.uArray[0] == undefined || Ability.uArray[0] == \"\") return;\n    createObj(\"ability\", {\n        name: Ability.uArray[3].toUpperCase(),\n        description: \" \",\n        action: \"!attack --[[\"+Ability.uArray[0]+\"]] --[[\"+Ability.uArray[1]+\"]] --\"+Ability.uArray[2],\n        istokenaction: true,\n        characterid: Character.id\n    });\n}\n//-----------------------\nfunction UnwrapString(stringname, separator, obj) {\n    var uArray = new Array();\n    var gmnotes = decodeURI(obj.get('gmnotes'));\n    gmnotes = UnescapeString(gmnotes);\n    var startPos = gmnotes.indexOf(\"{\" + stringname + \"}\");\n    if (startPos == -1)\n        return {\n            uArray: uArray\n        };\n    var endPos = gmnotes.indexOf(\"{/\" + stringname + \"}\");\n    return {\n        uArray: gmnotes.substr(startPos + stringname.length + 2, (endPos - startPos) - (stringname.length + 2)).split(separator)\n    };\n}\n\nfunction UnescapeString(dirtystring) {\n    dirtystring = dirtystring.replace(/%3A/g, ':');\n    dirtystring = dirtystring.replace(/%23/g, '#');\n    dirtystring = dirtystring.replace(/%3F/g, '?');\n    return dirtystring;\n}\n//-----------------------\non('ready', function() {\n  on('add:token', function(obj) {\n    var run = function(){\n        var oCharacter = getObj('character', obj.get(\"_represents\"));\n        if(oCharacter === undefined) return;\n        var type = (oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';\n        if (type == 'Monster') {\n            var maxValue = parseInt(obj.get(\"bar1_max\"), 10);\n            var randomChange = randomIntFromInterval(70,100);\n            var newAmount = Math.round(maxValue*(randomChange/100));\n            obj.set(\"bar1_value\", newAmount);\n        }\n    }\n    _.delay(run, 250);\n  });\n});\nfunction randomIntFromInterval(min,max)\n{\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n//--------------------\nvar defaultToken = defaultToken || (function() {\n\t'use strict';\n\tconst version = '1.0',\n\tfeedback = true,\n\tcheckInstall = function() {\n\t\tlog('-=> DefaultToken v'+version+' <=-');\n\t},\n\tgetPlayerName = function(who) {\n\t\tlet match = who.match(/(.*) \\(GM\\)/);\n\t\tif (match) return match[1];\n        else return who;\n\t},\n\tsetDefaultTokenForList = function (list) {\n\t\tlist.forEach(function (pair) {\n\t\t\tsetDefaultTokenForCharacter(pair[0], pair[1]);\n\t\t});\n\t},\n\tparseOpts = function(content, hasValue) {\n\t\tlet args, kv, opts = {};\n\t\targs = _.rest(content.split(/\\s+--/));\n\t\tfor (let k in args) {\n\t\t\tkv = args[k].split(/\\s(.+)/);\n\t\t\tif (_.contains(hasValue, kv[0])) {\n\t\t\t\topts[kv[0]] = kv[1];\n\t\t\t} else {\n\t\t\t\topts[args[k]] = true;\n\t\t\t}\n\t\t}\n\t\treturn opts;\n\t},\n\thandleInput = function(msg) {\n\t\tif (msg.type === 'api' && msg.content.search(/^!default-token\\b/) !== -1 && msg.selected) {\n\t\t\tconst tokensAndChars = _.chain(msg.selected)\n\t\t\t\t.map(a => getObj('graphic', a._id))\n\t\t\t\t.filter(o => o.get('_subtype') === 'token')\n\t\t\t\t.map(o => [o.get('represents'), o])\n\t\t\t\t.map(a => [getObj('character', a[0]), a[1]])\n\t\t\t\t.filter(a => a[0])\n\t\t\t\t.value();\n\t\t\tconst opts = _.defaults(parseOpts(msg.content, ['wait']), {wait: '0'});\n\t\t\t_.delay(setDefaultTokenForList, opts.wait, tokensAndChars);\n\t\t\tif (feedback && msg.selected) {\n\t\t\t\tlet output = '/w \"' + getPlayerName(msg.who) +\n\t\t\t\t\t'\" Default tokens set for characters ' +\n\t\t\t\t\t_.map(tokensAndChars, a => a[0].get('name')).join(', ') + '.'\n\t\t\t\tsendChat('API', output);\n\t\t\t}\n\t\t}\n\t\treturn;\n\t},\n\n\tregisterEventHandlers = function() {\n\t\ton('chat:message', handleInput);\n\t};\n\n\treturn {\n\t\tCheckInstall: checkInstall,\n\t\tRegisterEventHandlers: registerEventHandlers\n\t};\n}());\n\non('ready',function() {\n\t'use strict';\n\tdefaultToken.CheckInstall();\n\tdefaultToken.RegisterEventHandlers();\n});//PAGECHANGE\non(\"change:campaign:playerpageid\", function (obj, prev) {\n    var currentPage = getObj(\"page\", Campaign().get(\"playerpageid\"));\n    var pName = currentPage.get(\"name\");\n    var help = OuterDiv+iPart + \"color: #B3B3B3; background-image: url(\"+page_img+\");'><b>● Page: \"+pName+\" ●</div></div>\";\n\tsendChat('GM', \"/direct \" + help);\n});\n//LOG WHISPER\non('chat:message', function(whisper) {\n    if(whisper.type == 'whisper') {\n        var who=getObj('player',whisper.playerid);\n        if (who !== undefined) sendChat(\"system\", '/w GM <b>' + whisper.who + ' to ' + whisper.target_name + '-<br>' + TopBar+\";'>\"+whisper.content+\"</div>\");\n    };\n});\n/*------------------\nREADY\n------------------*/\non('ready', function () {\n    'use strict';\n    var currentPage = getObj(\"page\", Campaign().get(\"playerpageid\"));\n    var currentTime = new Date();\n    var timestamp = (new Date(currentTime));\n    sendChat('API', \"/w GM &{template:RIFTS} {{name=API STARTED}} {{<small>Time:=<small>\" + timestamp + \"}}\");\n    //----------------\n    var getCleanImgsrc = function (imgsrc) {\n        var parts = imgsrc.match(/(.*\\/images\\/.*)(thumb|med|original|max)(.*)$/);\n        if(parts) {\n            return parts[1] + 'thumb' + parts[3];\n        }\n        return;\n    };\n    _.chain(findObjs({type: 'character'})).filter(c => '' === c.get('avatar')).each(c => {c.get('defaulttoken', (dt) => {\n            let deftoken = JSON.parse(dt);\n            if(deftoken && _.has(deftoken, 'imgsrc')) {\n                let imgsrc = getCleanImgsrc(deftoken.imgsrc);\n                if(imgsrc) {\n                    c.set('avatar', imgsrc);\n                    sendChat('', `/w gm <div><img src=\"${imgsrc}\" style=\"max-width: 3em;max-height: 3em;border:1px solid #333; background-color: #999; border-radius: .2em;\"><code>Updated ${c.get('name')}</code></div>`);\n                }\n            }\n        });\n    });\n});\n/*------------------\nDIVS\n------------------*/\nvar font = 'Arial';\nvar greenC = \"#438032\";\nvar gmC = \"#22571F\";\nvar redC = \"#A34645\";\nvar grayC = \"#666666\";\nvar bShadow =\"3px 3px 1px #707070\";\nvar tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";\n//---ImgLinks\nvar page_img = \"http:\\\\//1.bp.blogspot.com/-7AhozEGVBBA/T6aqzDZcVOI/AAAAAAAAAQQ/TBH76givpIs/s1600/TEXleatherthree.png\";\n//---START BOXES CODE\nvar fPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 1px 1px; margin-top: 0.1em; border: 1px solid #000; border-radius: 0px 0px 10px 10px; color: #FFF;\";\nvar lPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; font-size: 9pt;  text-align: left; vertical-align: middle; background-position:center; padding: 1px 1px; margin-top: 0.2em; border: 2px solid #000; border-radius: 8px 8px 8px 8px; color: #FFF;\";\nvar hPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; font-size: 7pt; text-align: left; vertical-align: middle; background-position:center; padding: 1px 1px; margin-top: 0.2em; border: 2px solid #000; border-radius: 8px 8px 8px 8px; color: #000;\";\nvar iPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\";  text-align: center; vertical-align: middle; padding: 0px; margin-top: 0.1em; border: 1px solid #000; border-radius: 10px 10px 10px 10px; color: #FFF;\";\nvar iPart2 = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\";font-size: 10pt; text-align: left; vertical-align: middle; padding: 0px; margin-top: 0.1em; border: 1px solid #000; border-radius: 10px 10px 10px 10px; color: #FFF;\";\nvar gPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #919191; border-radius: 8px 8px 8px 8px; color: #FFF;\";\nvar ePart = \"<div style='box-shadow: \"+bShadow+\"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #000; border-radius: 8px 8px 8px 8px; color: #000;\";\nvar brPart = \"<div style='font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; border: 1px solid #000; color: #FFF;\";\nvar OuterDiv = '<div style=\"box-shadow: '+bShadow+'; border: 2px solid black;  text-align: center; vertical-align: middle; background-color: gray; padding: 3px 3px 3px 3px; border-radius: 10px 10px 10px 10px;\">';\n/*------------------\nGeneric Functions\n------------------*/\nfunction hexToRgbP(hex){\n    var c;\n    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){\n        c= hex.substring(1).split('');\n        if(c.length== 3){\n            c= [c[0], c[0], c[1], c[1], c[2], c[2]];\n        }\n        c= '0x'+c.join('');\n        var RGB = 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',1)';\n        return RGB;\n    }\n    throw new Error('Bad Hex');\n}\nfunction hexToRgbA(hex){\n    hex = hex.replace('#','');\n    var r = parseInt(hex.substring(0,2), 16);\n    var g = parseInt(hex.substring(2,4), 16);\n    var b = parseInt(hex.substring(4,6), 16);\n    var result = [r,g,b,1.0];\n    return result;\n}\n//-------PLAYER COLOR\nfunction GetPColor(Player){\n\tvar cBy = Player.get('controlledby');\n\tvar player = getObj('player', cBy);\n\tvar pColor = player.get('color');\n\treturn pColor;\n}\nfunction PlaySound(trackname, time, stop) {\n    var trackname = trackname.toUpperCase()\n    var track = findObjs({type: 'jukeboxtrack', title: trackname})[0];\n    if(track) {\n        track.set('softstop',false);\n        track.set('playing',true);\n    }\n    else {\n        log(\"No track found \"+ trackname);\n    }\n}\n//-----\nfunction SetStat(Player1,Atype,cost){\n\tvar ammoC = parseInt(cost);\n\tvar ammo0 = findObjs({_type: \"attribute\",name: Atype,_characterid: Player1.id}, {caseInsensitive: true})[0];\n\tif(ammoC === undefined || isNaN(ammoC)) ammoC = 1;\n\tvar cAmmo = parseInt(ammo0.get(\"current\"));\n\tvar mAmmo = parseInt(ammo0.get(\"max\"));\n\tvar curPageID = findObjs({_type: \"campaign\"})[0].get(\"playerpageid\");\n\tvar curPage = findObjs({_type: \"page\", _id: curPageID})[0];\n\tvar tokens = findObjs({_type: \"graphic\", layer:\"objects\", _pageid: curPageID, name: Player1.get(\"name\")});\n\t_.each(tokens, function(id) {\n\t\tvar who = getObj('character', id.get(\"_represents\"));\n\t\tvar aSet = findObjs({_type: \"attribute\",name: Atype,_characterid: who.id} , {caseInsensitive: true});\n\t\taSet = aSet[0].id;\n\t\tid.set(\"bar3_link\", aSet);\n\t\tid.set('bar3_value', cAmmo);\n\t\tid.set('bar3_max', mAmmo);\n\t});\n\tif (cAmmo < 0 || cAmmo < ammoC) {\n\t\tcAmmo = \"0\";\n\t\tammo0.set('current', cAmmo);\n\t}\n\telse if (cAmmo <= 2 || cAmmo < ammoC) {\n\t\tcAmmo = cAmmo - ammoC;\n\t\tammo0.set('current', cAmmo);\n\t}\n\telse {\n\t\tcAmmo = cAmmo - ammoC;\n\t\tammo0.set('current', cAmmo);\n\t}\n}\n//RANDOM IMAGE\nfunction randomFromTo(from, to){\n\treturn Math.floor(Math.random() * (to - from + 1) + from);\n}\n//make number\nfunction formatNumber (num) {\n\treturn num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\n//set character name\nfunction RollRight (whoPC) {\n\tvar character = findObjs({type: 'character',controlledby: whoPC})[0];\n\treturn character;\n}\n//find level\nfunction fLevel() {\n\tvar characters = findObjs({_type: \"character\"});\n\tvar chat = '';\n\tvar lTotal = 0;\n\tvar count = 0;\n\t_.each(characters, function (id) {\n\t\tvar aa = id.get(\"inplayerjournals\");\n\t\tvar aSet = findObjs({_type: \"attribute\",name: \"Level\",_characterid: id.id}, {caseInsensitive: true})[0];\n\t\tif(aa == \"all\" && aSet !== undefined) {\n\t\t    var aName = findObjs({_type: \"attribute\",name: \"Name\",_characterid: id.id}, {caseInsensitive: true})[0];\n\t\t    //log(aSet.get(\"current\") + \" \" +aName.get(\"current\"));\n\t\t\tvar a2 = parseInt(aSet.get(\"current\"));\n\t\t\tcount = count + 1;\n\t\t\tlTotal = lTotal + a2;\n\t\t}\n\t});\n\tlTotal = Math.round(lTotal / count);\n\treturn lTotal;\n}\n//parse loot\nfunction myrolls(loota) {\n\tfor(var i = 0; i < loota.length; i++) {\n\t\tvar ii = (loota[i].indexOf(\"[[\") != -1);\n\t\tif(ii == true) {\n\t\t\tvar num = loota[i].replace(/[^0-9]/g, '');\n\t\t\tvar res1 = num.substr(0, 1);\n\t\t\tvar res2 = num.substr(1, 4);\n\t\t\tvar ia = 1;\n\t\t\tvar tot = 0;\n\t\t\twhile(ia <= res1) {\n\t\t\t\tvar tot = tot + randomInteger(res2);\n\t\t\t\tia++;\n\t\t\t}\n\t\t\treturn tot;\n\t\t}\n\t}\n}\nfunction DT(text){\n    sendChat('API', \"/w GM \" + text);\n}\nfunction MakeRollNum(cont, inline) {\n    return _.chain(inline)\n        .reduce(function (m, v, k) {\n        m['$[[' + k + ']]'] = v.results.total || 0;\n        return m;\n    }, {})\n        .reduce(function (m, v, k) {\n         return m.replace(k, v);\n    },\n        cont).value();\n};\n//!attack --[[1d20]] --[[3d6]] --saying! --ammotype\non('chat:message', function(msg) {\n\tif (msg.type != \"api\") return;\n\t//log(msg.content);\n\tvar msgTxt = msg.content;\n\tvar command = msgTxt.split(\" \", 1);\n\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];\n\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {\n\t\tcWho = RollRight(msg.playerid);\n\t\tmsg.who = cWho.get(\"name\");\n\t}\n\n/*-----------CHECK API-----------*/\n\tif (command == \"!attack\") {\n/*-----------BOXES-----------*/\n\t\tvar Main;\n\t\tvar PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");\n\t\tvar PRGB = hexToRgbP(PlayerBGColor);\n        var PlayerBarColor = \"background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.8),\"+PRGB+\",\"+PRGB+\",rgba(0,0,0,0.8));\";\n\t\tvar MIDBAR = MakeMid(MidBar,PlayerBGColor,PlayerBarColor);\n\t\tvar RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#820101,#000000);\";\n\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";\n\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";\n\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";\n\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";\n\t\tvar MainSayDiv = \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 2px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";\n\t\tvar MainEvenDiv = \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";\n\t\tvar MainOddDiv = \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";\n\t\tvar AmmoDiv =  \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; color: #000;\";\n/*---------------------------*/\n\t\tvar who = msg.who;\n\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);\n//check rolls---------------------\n\t\tvar AttackRolls = msg.inlinerolls[0];\n\t\tvar DamageRolls = msg.inlinerolls[1];\n//define var----------------------\n\t\tif (AttackRolls === undefined || DamageRolls === undefined) {\n\t\t\tsendChat('', \"/direct <B><I>bad macro!\");\n\t\t\treturn;\n\t\t}\n\t\tmsgFormula = msgTxt.split(\" --\");\n\t\tvar Lucky = 20;\n\t\tvar failRange = 1;\n\t\tvar DamageRollRaw = \"\";\n\t\tvar BottomText = \"\";\n\t\tvar fumble = 0;\n\t\tvar miss = 0;\n\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";\n\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";\n\t\tif (msg.who == \"GM (GM)\") {\n\t\t\twho = \"NPC\";\n\t\t}\n/*-----------START-----------*/\n//Check for GUN\n\t\tif (who !== \"NPC\") {\n\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];\n\t\t\tif (msgFormula[4] !== undefined) {\n\t\t\t\tvar gunleng = msgFormula[4].length - 1;\n\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);\n\t\t\t\tif (!isNaN(ammo)) {\n\t\t\t\t\tgunleng = msgFormula[4].length - 2;\n\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);\n\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];\n\t\t\t\t\tif (FindGun == undefined) {\n\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar GunName = FindGun.get(\"name\");\n\t\t\t\t\tvar leng = GunName.length - 5;\n\t\t\t\t\tleng = GunName.substr(0, leng);\n\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];\n\t\t\t\t\tif (ammo0 == undefined) {\n\t\t\t\t\t\tammo0 = FindGun;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n/*-----------ATTACK PARTS-----------*/\n//--Attack Modifier\n\t\tvar AttackBonus;\n\t\tvar AttackRollText;\n\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";\n\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);\n\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];\n//Attack total and type\n\t\tvar AttackTotal = (AttackRolls.results.total);\n\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";\n//--Set Miss\n\t\tif (AttackRollRaw <= 3) {\n\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";\n\t\t\tBottomText = BottomText + \" \" + 'MISS';\n\t\t\tvar miss = 1;\n\t\t}\n\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";\n/*-----------DAMAGE PARTS-----------*/\n//--Damage modifier\n\t\tvar DamageBonus;\n\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";\n\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);\n\t\t//--Set damage total\n\t\tvar DamageTotal = DamageRolls.results.total;\n//--Make damage text for all rolls\n\t\tvar dam = DamageRolls.results.rolls[0];\n\t\tvar i = 0;\n\t\twhile (dam.results[i] !== undefined) {\n\t\t\tvar dNum = dam.results[i]['v'];\n\t\t\tvar num;\n\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";\n\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";\n\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";\n\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";\n\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";\n\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);\n\t\t\ti++;\n\t\t}\n\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";\n\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";\n\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";\n\t\tif (miss == 1)  DTOTALS = \"\";\n//--Set Double Damage\n\t\tif (AttackRollRaw >= 20) {\n\t\t    var CritCheer = '<div style=\"border: 1px solid #666666; border-radius: 20px; width: 99%; height: 40px; overflow: hidden; position: relative;\"><img src=\"https://media.giphy.com/media/11sBLVxNs7v6WA/giphy.gif\" style=\"position: absolute; top:-35px; left:0px;\"/></div>';\n\t\t\tDamageTotal = \"<a style='color:RED'><strong>\" + DamageTotal * 2 + \"!</strong></a>\";\n\t\t\tDTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a><br>\"+CritCheer;\n\t\t\tAttackTotal = \"<a style='color:RED'><strong>\" + AttackTotal + \"!</strong></a>\";\n\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b><br>';\n\t\t\tRollColor = \"background-position:center; background-image: url(\" + crit_img + \");\";\n\t\t\tPlaySound('Critical', 9000);\n\t\t}\n//set motto\n\t\tif (msgFormula[3] !== undefined) {\n\t\t\tvar WarCryleng = msgFormula[3].length - 1;\n\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);\n\t\t\tif (isNaN(sayingCheck)) {\n\t\t\t\tWarCry = msgFormula[3].toUpperCase();\n\t\t\t}\n\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {\n\t\t\t\tWarCry = msgFormula[3].toUpperCase();\n\t\t\t\tWarCryleng = msgFormula[3].length - 2;\n\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tWarCry = \"ATTACK!\";\n\t\t}\n//CHATBOX PARTS----------------\n\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";\n\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";\n\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";\n//--Lucky roll\n\t\tvar IsLucky = randomInteger(Lucky);\n\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {\n\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";\n\t\t\tRollColor = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";\n\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";\n\n//Fumble roll\n\t\t}\n\t\tif (AttackRollRaw <= failRange) {\n\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><strong style='font-size: 130%;'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";\n\t\t\tRollColor = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";\n\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';\n\t\t\tfumble = 1;\n\t\t}\n/*-----------\nAMMO PARTS\n-----------*/\n\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {\n\t\t\tvar ammoleng = msgFormula[4].length - 1;\n\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));\n\t\t\tvar ammoC = parseInt(ammo);\n\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;\n\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));\n\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));\n\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {\n\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar per = (cAmmo / mAmmo) * 100;\n\t\t\tif (mAmmo == 0) {}\n\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {\n\t\t\t\tcAmmo = \"0\";\n\t\t\t\tammo0.set('current', cAmmo);\n\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";\n\t\t\t}\n\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {\n\t\t\t\tcAmmo = cAmmo - ammoC;\n\t\t\t\tammo0.set('current', cAmmo);\n\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';\n\t\t\t\tammoT = AmmoDiv + \"background-color:#B82A2A;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";\n\t\t\t\tMain = Main + ammoT;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcAmmo = cAmmo - ammoC;\n\t\t\t\tammo0.set('current', cAmmo);\n\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';\n\t\t\t\tammoT = AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";\n\t\t\t\tMain = Main + ammoT;\n\t\t\t}\n\t\t}\n/*-----------SEND CHAT-----------*/\n        var pad = \"\";\n        if(BottomText == \"\") var pad = \"padding: 5px 1px;\";\n\t\tvar MsgBox = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + who + \"  Attacks</b></div>\"+Main+\"</div>\"+BottBar + pad + RollColor +\";'><b>\" + BottomText + \"</b></div>\";\n\t\tvar SendT = MsgBox;\n\t\tif (AttackRollRaw <= 3 && fumble != 1) {\n\t\t\tSendT = \"<div style='opacity: 0.6;'><strong style='font-size: 90%;'>\" + SendT + \"</strong></div>\";\n\t\t}\n\t\tif (AttackRollRaw >= 20) {\n\t\t\tSendT = \"<strong style='font-size: 130%;'>\" + SendT + \"</strong>\";\n\t\t}\n\t\tsendChat(who, '/direct ' + SendT);\n\t\tPlaySound('dice', 9000);\n\t\treturn;\n\t}\n//----------------------------\n//RELOAD----------------\n//----------------------------\n\tif (command == \"!reload\") {\n\t\tif (cWho !== undefined) {\n\t\t\tvar msgFormula = msgTxt.split(\" --\");\n\t\t\tvar gun = msgFormula[1];\n\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];\n\t\t\tif (FindGun == undefined) {\n\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tClips = 0;\n\t\t\tvar attName = FindGun.get(\"name\");\n\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];\n\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];\n\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];\n\t\t\tif (Clipsc != undefined) {\n\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"), 10);\n\t\t\t}\n\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"), 10);\n\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"), 10 );\n\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"), 10);\n\t\t\tif (cAmmo <= 0) {\n\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';\n\t\t\t\tsendChat('', '/direct ' + help);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar needed = mWep - cWep;\n\t\t\t\tif (needed >= cAmmo) {\n\t\t\t\t\tneeded = cAmmo;\n\t\t\t\t}\n\t\t\t\tif (Clips == 10) {\n\t\t\t\t\tneeded = 1;\n\t\t\t\t\tcAmmo = cAmmo - needed;\n\t\t\t\t\tvar reloads = cAmmo;\n\t\t\t\t\tAmmo0.set('current', mWep);\n\t\t\t\t\tAmmo1.set('current', cAmmo);\n\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';\n\t\t\t\t\tsendChat('', '/direct ' + help);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcAmmo = cAmmo - needed;\n\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;\n\t\t\t\t\tAmmo0.set('current', cWep + needed);\n\t\t\t\t\tAmmo1.set('current', cAmmo);\n\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';\n\t\t\t\t\tsendChat('', '/direct ' + help);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n//---AUTO LOCATION ROLLS\nvar aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];\n//---FUMBLE ROLLS\nvar aFum = [\n\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",\n\t\"Ungracefully fumbled the attack!, lose next attack\",\n\t\"Got something in eye, lose this attack\",\n\t\"Missed so badly, it makes the enemy see you and an easy target!\",\n\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",\n\t\"Tripped!, next attack to get up\",\n\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in Wall/Floor/Tree/Off Balance/etc loose next attack\",\n\t\"Missed, and draws sole aggression of the target\",\n\t\"Somehow hit a Flying Squirrel!\",\n\t\"Failed so badly nearest ally falls back to help.\"\n];\n/*------------------\nGREET\n------------------*/\nvar DXGREET = DXGREET || (function() {\n    'use strict';\n    var Greet = function(obj) {\n            var name = obj.get(\"_displayname\");\n            var isGM = \"\";\n            var currentTime = new Date();\n            var timestamp = (new Date(currentTime));\n            if(playerIsGM(obj.id) === true) isGM = \" [GM]\";\n            if(obj.get(\"_online\") == true) {\n                setTimeout(function() {\n                    sendChat('', \"&{template:RIFTS} {{name=Hello}} {{<small>Who:=\" + name + isGM + \"}}{{<small>Time:=<small>\" + timestamp+\"}}\");\n                }, 3000);\n            }\n            if(obj.get(\"_online\") == false) {\n                setTimeout(function() {\n                    sendChat('', \"&{template:RIFTS} {{name=Goodbye}} {{<small>Who:=\" + name + isGM + \"}}{{<small>Time:=<small>\" + timestamp+\"}}\");\n                }, 500);\n            }\n        },\n        registerEventHandlers = function() {\n            on('change:player:_online', Greet);\n        };\n    return {\n        RegisterEventHandlers: registerEventHandlers\n    };\n}());\non('ready', function() {\n    'use strict';\n    DXGREET.RegisterEventHandlers();\n});on(\"chat:message\", function(msg) {\n    var tLOOT = '';\n    var msgTxt = msg.content;\n    if(msg.type == \"api\" && msgTxt.indexOf(\"!enc\") !== -1) {\n        var msgFormula = msgTxt.split(\" \");\n        //------------------\n        var aLoottext = fPart + \"background-color:#0B3B0B;'>● Encounter roll ●</div>\";\n        var croll = findObjs({_type: 'character', name: 'World'})[0];\n        var oHour = findObjs({name: \"Hour\",_type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];\n        var oHourNum = parseInt(oHour.get(\"current\"));\n        dType = \"Day\";\n        timeChance = 1;\n        if(oHourNum >= 20 || oHourNum <= 5 ) { dType = \"Night\"; timeChance = 2; }\n        NEchance = 49;\n        CEchance = 1*timeChance;\n        var loots = randomInteger(100);\n        //------------------\n        var img = \"http:\\\\//i.imgur.com/hc669Eb.jpg\";\n        if(loots >= NEchance) {\n            //EVENT ENCOUNTER\n            var aLoottext = fPart + \"background-color:#852828;'>● \"+dType+ \" Event ●</div>\";\n            sendChat('', \"/desc \" + aLoottext);\n            var items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JNzlykL6Jb-5PpXsahe\"});\n            var rand1 = randomInteger(items.length);\n            var chosen = items[rand1 - 1];\n            var lootE = chosen.get(\"name\");\n            tLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\" + img + \");'><b><u>\"+NEchance+\" EVENT:</b></u> <a style='color:#888'>#\" + rand1 + \" (\" + loots + \")</a><br>\" + lootE + \"</div>\";\n        } else if (loots <= NEchance){\n            //REAL ENCOUNTER\n            var aLoottext = fPart + \"background-color:#852828;'>● \"+dType+ \" Encounter! ● </div>\";\n            sendChat('', \"/desc \" + aLoottext);\n            var items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JNy1bCgcImoZvPziK7C\"});\n            var rand1 = randomInteger(items.length);\n            var chosen = items[rand1 - 1];\n            var lootE = chosen.get(\"name\");\n            tLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\" + img + \");'><b><u>\"+CEchance+\" CREATURE:</b></u> <a style='color:#888'>#\" + rand1 + \" (\" + loots + \")</a><br>\" + lootE + \"</div>\";\n        }\n        else {\n            tLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\" + img + \");'><b><u>\"+CEchance+\" \"+loots+\" NOTHING</div>\";\n        }\n        sendChat('', '/w gm ' + tLOOT);\n    }\n});\non(\"chat:message\", function(msg) {\n    var msgTxt = msg.content;\n    if(msg.type == \"api\" && msgTxt.indexOf(\"!A\") !== -1) {\n\n    }\n});\n\nfunction getFolderObjects(objs) {\n    return _.map(objs, function(o) {\n        if (_.isString(o)) {\n            return getObj('handout', o) || getObj('character', o);\n        }\n        if (_.isArray(o.i)) {\n            o.i = getFolderObjects(o.i);\n            return o;\n        }\n    });\n}\n\nfunction getObjectFromFolder(path, folderData, getFolder) {\n    if (path.indexOf('.') < 0) {\n        if (getFolder) {\n            return _.find(folderData, (o) => o.n && o.n.toLowerCase() === path.toLowerCase()).i;\n        }\n        return _.find(folderData, (o) => o.get && o.get('name').toLowerCase() === path.toLowerCase());\n    }\n    path = path.split('.');\n    var folder = path.shift();\n    path = path.join('.');\n    folderData = _.find(folderData, (o) => o.n && o.n.toLowerCase() === folder.toLowerCase());\n    return getObjectFromFolder(path, folderData.i);\n}function FoodSet(Hours) {\n    var tFood = \"\";\n    var tFood1 = '';\n    var tFood1= '';\n    var characters = findObjs({_type: \"character\" ,inplayerjournals: \"all\"});\n    _.each(characters, function(id) {\n        var color = \"#ABDB27\";\n        var aName = findObjs({_type: \"attribute\",name: \"Name\",_characterid: id.id}, {caseInsensitive: true})[0];\n        var aFood = findObjs({ _type: \"attribute\",name: \"HUNGER\",_characterid: id.id}, {caseInsensitive: true})[0];\n        var HungH = findObjs({_type: \"attribute\",name: \"HUNGERH\",_characterid: id.id}, {caseInsensitive: true})[0];\n        if(HungH && aFood !== undefined) {\n            var Hperc = HungH.get(\"current\");\n            var FoodMax = aFood.get(\"max\")\n            var FoodCount = parseFloat(aFood.get(\"current\")-(Hperc*Hours));\n            if (FoodCount > FoodMax) FoodCount = FoodMax;\n            if (FoodCount < 0) FoodCount = 0;\n            FoodCount = Math.round(FoodCount.toFixed(1));\n            var FoodPercentage = Math.round(FoodCount)\n            var name = aName.get(\"current\") + \"(\"+FoodPercentage+\"/\"+FoodMax+\")\";\n            aFood.set('current', FoodCount);\n            if (FoodCount <= FoodMax*0.15) {\n                tFood = tFood.concat(\"{{<small>\"+name+ \":=<small>is starving!<br>(-8 on all rolls -60% skills).}}\");\n                color = \"#F7DB5C\"\n            }\n            else if (FoodCount <= FoodMax*0.30) {\n                tFood = tFood.concat(\"{{<small>\"+name+ \":=<small>needs to eat.<br>(-2 on all rolls -30% skills).}}\");\n                color = \"#F7DB5C\"\n            }\n            else if (FoodCount <= FoodMax*0.45) {\n                tFood = tFood.concat(\"{{<small>\"+name+ \":=<small>is getting hungry.}}\");\n            }\n            if (FoodCount <= FoodMax*0.45) {\n                var a = '<div style=\"margin:5px; float:right; display:inline-block; border-radius:2px; width:40%; background-color:black; border:1px solid black; height:3px\">';\n                var b = '<div style=\"border-radius: 2px; width:'+Math.round(FoodCount/FoodMax*100)+'%;background-color:'+color+';border-right:1px solid black;height:3px\"></div></div><hr>';\n                tFood1 = tFood1.concat(name+\" \"+a+b);\n            }\n        }\n    });\n    var Chart = \"<div style='text-align:left; font-size:8pt; background-color:white; padding:2px; border:1px solid black;'>\"+tFood1+\"</div>\";\n    sendChat('', \"&{template:RIFTS} {{name=Food}} {{color=food}}\"+tFood+\"{{Stats=\"+Chart+\"}}\");\n};\nfunction SleepSet(HoursPassed) {\n    var characters = findObjs({_type: \"character\" ,inplayerjournals: \"all\"});\n    var tSleep = \"\";\n    var IsAsleep = \"\";\n    var tFood1 = '';\n    _.each(characters, function(id) {\n        color = \"#A1D4E6\";\n        var aName = findObjs({_type: \"attribute\",name: \"Name\",_characterid: id.id}, {caseInsensitive: true})[0];\n        var aSleep = findObjs({ _type: \"attribute\",name: \"SLEEP\",_characterid: id.id}, {caseInsensitive: true})[0];\n        var Sleeping = findObjs({ _type: \"attribute\",name: \"SLEEPING\",_characterid: id.id}, {caseInsensitive: true})[0];\n        if(aSleep !== undefined) {\n            var MaxUp = aSleep.get(\"max\");\n            var HoursUp = parseFloat(+aSleep.get(\"current\"));\n            var slname = aName.get(\"current\");\n            var name = aName.get(\"current\") + \"(\"+HoursUp+\"/\"+MaxUp+\")\";\n            var IsSleeping = Sleeping.get(\"current\");\n            if (IsSleeping == 1) {\n                var IsSleepingAdjust = Sleeping.get(\"max\");\n                HoursUp = HoursUp - (HoursPassed * IsSleepingAdjust);\n                if (HoursUp < 0) HoursUp = 0;\n                IsAsleep = IsAsleep.concat(\"{{<small>\"+ slname + \":=<small> is sleeping [\"+Math.round(HoursUp/IsSleepingAdjust)+\"]}}<br>\");\n            }\n            else {\n            var HoursUp = parseFloat(+aSleep.get(\"current\") + +HoursPassed);\n            }\n            if (HoursUp >= MaxUp && IsSleeping != 1) {\n                tSleep = tSleep.concat(name + \":is passed out.</div>\");\n            }\n            else if (HoursUp > (MaxUp * 0.80) && IsSleeping != 1) {\n                tSleep = tSleep.concat(\"{{<small>\"+ name + \":=<small>is barely able to stay awake!</b><br><i>[-8 on all rolls, -75% on perception rolls, -75% skills, DC PE 16 to fall asleep].}}\");\n                color = \"#F7DB5C\"\n            }\n            else if (HoursUp > (MaxUp * 0.65) && IsSleeping != 1) {\n                tSleep = tSleep.concat(\"{{<small>\"+name + \":=<small>seriously needs to sleep.</b><br><i>[-2 on all rolls, -30% on perception rolls, -30% skills, DC PE 10 to fall asleep].}}\");\n                color = \"#F7DB5C\"\n            }\n            else if (HoursUp > (MaxUp * 0.5) && IsSleeping != 1) {\n                tSleep = tSleep.concat(\"{{<small>\"+name +\":=<small>is getting sleepy.</b><br><i>[-15% on perception roll,-10% skills].}}\");\n            }\n            aSleep.set('current', HoursUp);\n            var bar = Math.round(HoursUp/MaxUp*100);\n            var bar = Math.round((MaxUp-HoursUp)/MaxUp*100);\n            if (HoursUp > (MaxUp * 0.5) && IsSleeping != 1) {\n                var a = '<div style=\"padding: 0px; margin:5px; float:right; display:inline-block; border-radius:2px; width:40%; background-color:black; border:1px solid black; height:3px\">';\n                var b = '<div style=\"border-radius: 2px; width:'+bar+'%;background-color:'+color+';border-right:1px solid black;height:3px\"></div></div><hr>';\n                tFood1 = tFood1.concat(name+\" \"+a+b);\n            }\n            log(tFood1)\n        }\n    });\n    tSleep = tSleep + IsAsleep;\n    var Chart = \"<div style='text-align:left; font-size:8pt; background-color:white; padding:1px; border:1px solid black;'>\"+tFood1+\"</div>\";\n    var button = \"<a href='!sleep' style='line-height: 1em; border:2px solid; margin:0; padding: 3px; text-align:center; height:8px; background:#1184AB; color:#ffffff; font-size:9px;'>Sleep</a>\";\n    sendChat('', \"&{template:RIFTS} {{name=Sleep    \"+button+\"}} {{color=sleep}}\"+tSleep+\"{{Stats=\"+Chart+\"}}\");\n};var HR = \"<hr style='width: 40%; border: 3px double #000; margin: 2px;'>\";\nvar TopBar = \"<div style='width: 95%; box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #FFF;\";\nvar MidBar = \"<div style='width: 99%; box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 1px 0px; margin: 0px auto; border: 1px solid #000; color: #FFF;\";\nvar BottBar = \"<div style='width: 95%; border-radius: 0px 0px 8px 8px; box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 0px 1px; margin: 0px auto; border: 1px solid #000; color: #FFF;\";\n//-----------\nfunction MakeMid(MidBar,PlayerBGColor,PlayerBarColor){\n        var BAR = MidBar + \"background-color:\"+ PlayerBGColor +\";\"+ PlayerBarColor +\";'>\";\n        return BAR;\n}on(\"chat:message\", function (msg) {\n    var tLOOT = '';\n    var msgTxt = msg.content;\n\tif(msg.type == \"api\" && msgTxt.indexOf(\"!loot\") !== -1) {\n\t\tvar msgFormula = msgTxt.split(\" \");\n\t\t//---------catch non players\n\t\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];\n\t\tif(cWho === undefined) {\n\t\t\tcWho = RollRight(msg.playerid);\n\t\t\tmsg.who = cWho.get(\"name\");\n\t\t}\n\t\t//---------check credits set\n\t\tvar oC = findObjs({name: \"Credits\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];\n\t\tif(oC === undefined || oC.length === 0) {\n\t\t\tsendChat(msg.who, '/direct No Credits Found, please set!');\n\t\t\treturn;\n\t\t}\n\t\t/*------------------\n        LOOT CALC\n        ------------------*/\n\t\telse {\n\t\t\tvar aLoottext = fPart + \"background-color:##0B3B0B;'>● \" + msg.who + \" Looks for loot..  ●</div>\";\n\t\t\tsendChat('', \"/direct \" + aLoottext);\n\t\t\t//set times to run----------------------\n\t\t\tvar x = 0;\n\t\t\tvar times = msgFormula[1];\n\t\t\tif(times > 20) {times = 20;}\n\t\t\twhile(x < times || x < 1) {\n\t\t\t\t//---------set cash or loot\n\t\t\t\tvar loots = randomInteger(100);\n\t\t\t\t//---------set cash or loot\n\t\t\t\tlog(\"-KcVBLxjpNV8rVybDpD0\")\n/*------------------\nCASH LOOT\n------------------*/\n\t\t\t\tif(loots <= 25) {\n\t\t\t\t\t//Set Cash Value---------------------------------\n\t\t\t\t\tvar mColor = \"#456646\";\n\t\t\t\t\tvar level = fLevel();\n\t\t\t\t\tvar T = randomInteger(200)+randomInteger(50);\n\t\t\t\t\t//---set big payout\n\t\t\t\t\tvar BigMoney = randomInteger(100);\n\t\t\t\t\tvar BigM = '';\n\t\t\t\t\tif(BigMoney <= 10) {\n\t\t\t\t\t\tvar BigM = (\"<a style='color:#00ff00'> BIG \");\n\t\t\t\t\t\tT = (T * 20) + (150 * level);\n\t\t\t\t\t\tmColor = \"#009605\";\n\t\t\t\t\t}\n\t\t\t\t\tvar cR = Math.floor(T * (level));\n\t\t\t\t\t//give money-------------------------\n\t\t\t\t\tvar credits = parseInt(oC.get(\"current\"));\n\t\t\t\t\tvar credits = parseInt(credits);\n\t\t\t\t\tvar total = credits + cR;\n\t\t\t\t\toC.set('current', total);\n\t\t\t\t\tvar gold = total.toString().replace(/\\B(?=(\\d{2})+(?!\\d))/g, \" \");\n\t\t\t\t\t//tell money-------------------------\n\t\t\t\t\tvar lootE = '<b><u>'+BigM+'MONEY:</a><br></b></u>' + cR + ' Credits. Your total: ' + total + ' </b>';\n\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/PREQJkH.jpg\";\n\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size:80px 60px; background-image: url(\"+img+\");'>\" + lootE +\"</div>\";\n\t\t\t\t}\n/*------------------\nITEM LOOT\n------------------*/\n\t\t\t\telse if(loots <= 85) {\n\t\t\t\t\t//mundane loot-------------------------\n\t\t\t\t\tvar items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JCg8SKoOgAP2zgFnXk_\"});\n\t\t\t\t\tvar rand1 = randomInteger(items.length);\n\t\t\t\t\tvar chosen = items[rand1 - 1];\n\t\t\t\t\tvar loot = chosen.get(\"name\");\n\t\t\t\t\tvar loot1 = loot.split(\" \");\n\t\t\t\t\tvar a = myrolls(loot1);\n\t\t\t\t\tvar lootE = loot.replace(/\\[.*?\\]\\]/g, a);\n\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/hc669Eb.jpg\";\n\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\"+img+\");'><b><u> ITEM:</b></u> <a style='color:#888'>#\"+rand1+\" (\"+loots+\")</a><br>\"+lootE+\"</div>\";\n\t\t\t\t}\n\t\t\t\telse if(loots <= 95) {\n\t\t\t\t\t//mundane loot-------------------------\n\t\t\t\t\tvar items = findObjs({_type: \"tableitem\",_rollabletableid: \"-KcVBLxjpNV8rVybDpD0\"});\n\t\t\t\t\tvar rand1 = randomInteger(items.length);\n\t\t\t\t\tvar chosen = items[rand1 - 1];\n\t\t\t\t\tvar loot = chosen.get(\"name\");\n\t\t\t\t\tvar loot1 = loot.split(\" \");\n\t\t\t\t\tvar a = myrolls(loot1);\n\t\t\t\t\tvar lootE = loot.replace(/\\[.*?\\]\\]/g, a);\n\t\t\t\t\tvar wQualList = ['Masterwork', 'Ornate', 'Fancy', 'Average', 'Poor', 'Cheap'];\n                    var wQual = wQualList[Math.floor(Math.random() * wQualList.length)];\n\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/hc669Eb.jpg\";\n\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\"+img+\");'><b><u> ITEM:</b></u> <a style='color:#888'>#\"+rand1+\" (\"+loots+\")</a><br>\"+wQual+\" Quality \"+lootE+\"<b> (Appraise for value)</b></div>\";\n\t\t\t\t}\n/*------------------\nWEAPON LOOT\n------------------*/\n\t\t\t\telse {\n\t\t\t\t\tvar items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JDlef2TgoMN63HS6hT1\"});\n                    var rand1 = randomInteger(items.length);\n\t\t\t\t\tvar chosen = items[rand1 - 1];\n\t\t\t\t\tvar loot = chosen.get(\"name\");\n\t\t\t\t\tvar loot1 = loot.split(\" \");\n\t\t\t\t\tvar a = myrolls(loot1);\n\t\t\t\t\tvar lootE = loot.replace(/\\[.*?\\]\\]/g, a);\n                    var wQualList = ['Excellent', 'Good', 'Average', 'Poor', 'Salvageable', 'Broken'];\n                    var wQual = wQualList[Math.floor(Math.random() * wQualList.length)];\n\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/gGUKNRe.jpg\";\n\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\"+img+\");'><b><u>WEAPON:</b></u> <a style='color:#888'>#\"+rand1+\" (\"+loots+\")</a><br>\"+wQual+\" \"+lootE+\"</div>\";\n\t\t\t\t}\n\t\t\t\tx++;\n\t\t\t}\n\t\t\tsendChat(msg.who, '/w gm ' + tLOOT);\n\t\t\tsendChat(msg.who, \"/w \" + msg.who + ' ' + tLOOT);\n\t\t};\n\t}\n});\non('chat:message', function (msg) {\n    if(msg.type == 'api' && msg.content.indexOf('!Ches1t') !== -1) {\n\t\tvar Names = [];\n\t\tif(msg.selected == undefined) {\n\t\t\tsendChat('', \"/desc No one selected\");\n\t\t\treturn;\n\t\t}\n\t\tvar selected = msg.selected;\n\t\ti = 0;\n\t\t_.each(selected, function (obj) {\n\t\t\tvar token = getObj('graphic', msg.selected[i]._id);\n\t\t\tif(token.get(\"represents\") !== '') {\n\t\t\t\tif(token.get('subtype') !== 'token') return;\n\t\t\t\tvar oCharacter = getObj('character', token.get(\"_represents\"));\n\t\t\t\tvar name = (oCharacter.get('name'));\n\t\t\t\tNames.push(oCharacter);\n\t\t\t}\n\t\t\ti++;\n\t\t});\n\t\tvar rand = Names[Math.floor(Math.random() * Names.length)];\n\t\tvar name = (rand.get('name'));\n\t\tpColor = GetPColor(rand);\n\t\tvar whoC = OuterDiv + iPart + \"background-color:#\"+pColor+\";'><b>● Who: \" + name + \"  ●</div>\";\n\t\tsendChat('Picked', \"/direct \" +  whoC);\n\t}\n});//!magic --[[1d5]] rounds --desc --ammo\non(\"chat:message\", function (msg_orig) {\n    var msg = _.clone(msg_orig);\n    if (msg.type != \"api\") return;\n    if(_.has(msg,'inlinerolls')){\n        msg.content = MakeRollNum(msg.content, msg.inlinerolls);\n    }\n    var msgTxt = msg.content;\n    var command = msg.content.split(\" \", 1);\n    if (command == \"!cast\") {\n        var cWho = findObjs({_type: 'character',name: msg.who})[0];\n        if (cWho == undefined && msg.who != \"GM (GM)\") {\n            cWho = RollRight(msg.playerid);\n            msg.who = cWho.get(\"name\");\n        }\n        var who = msg.who;\n        var msgFormula = msgTxt.split(\" --\");\n        //-----------------------------\n        //AMMO PARTS----------------\n        //-----------------------------\n        cAmmo =\"0\";\n        mAmmo =\"0\";\n        if (msgFormula[6] !== undefined) {\n            var ammoF = msgFormula[6].split(\" \");\n            var ammoCount = ammoF[0];\n            var ammoType = ammoF[1];\n            if (cWho !== undefined) {\n                var ammo0 = findObjs({_type: \"attribute\",name: ammoType,_characterid: cWho.id}, {caseInsensitive: true})[0];\n            }\n            if (ammo0 == undefined){\n                sendChat(who, '/direct <b> '+msg.who+' set cost type!');\n                return;\n            }\n            else {\n                cAmmo = parseInt(ammo0.get(\"current\") - ammoCount);\n                cAmmo1 = parseInt(ammo0.get(\"current\"));\n                mAmmo = parseInt(ammo0.get(\"max\"));\n                var per = (cAmmo/mAmmo)*100;\n                var ammoT = '<div style=\"border: 2px solid #333; background-color: black; border-radius: 13px; padding: 3px; margin: 1px;\"><div style=\"background-color: orange; width: '+per+'%; height: 3px; border-radius: 10px;\"></div></div>';\n                if (cAmmo1 < ammoCount) {\n                    sendChat(who, '/direct <b> '+msgFormula[1].toUpperCase()+': not enough points!');\n                    return;\n                }\n                SetStat(cWho,ammoType,ammoCount);\n            }\n        }\n        var bColor = \"\";\n        var ammoF = msgFormula[6].split(\" \");\n        var ammoType = ammoF[1];\n        if (ammoType == \"PPE\") {\n            bColor = \"#C8CFE6\"\n        }\n        else {\n            bColor = \"#D1C8E6\";\n        }\n        var rollresult = 0;\n        var name = msgFormula[1].toUpperCase();\n        var range = \"<b>Range: </b>\" + msgFormula[2];\n        var dam = \"<b><br>Damage: </b><span style='color:#ff0000'>\" + msgFormula[3] + \"</span>\";\n        var dur = \"<b><br>Duration: </b><span style='color:#ff0000'>\" + msgFormula[4] + \"</span>\";\n        var cost =  \"<b><br>Cost: </b>\" + msgFormula[6];\n        var desc = \"<br><b>Desc: \" + msgFormula[5];\n        var boxcolor =  \"#545454\";\n        pad = \"2px;\";\n        var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");\n        var toptext = brPart + \"background-color:\" + PlayerBGColor + \";'>\" + msg.who +\" used:</div>\";\n        weburl = \"http:\\\\//fc05.deviantart.net/fs70/f/2014/189/4/5/magic___free_texture_by_camy_orca-d7pro4i.jpg\";\n        var SayParts = \"<div style='line-height: 9px; text-shadow: \"+tshadow+\"; margin:0.0em; font-size: 9pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\"+weburl+\");'><b>●\"+ name +\"●</b></div>\";\n        var top = \"<div style=' box-shadow: \"+bShadow+\"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \"+font+\"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\"+toptext+\"</b></div>\";\n        var Main = \"<div style='box-shadow: \"+bShadow+\"; text-shadow: 1px 1px #878787; font-family: \"+ font + \"; font-size: small; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:\"+bColor+\"; color: #000;'><i>\"+SayParts+\"<br>\" + range+dam+dur+cost+desc + \"</div>\";\n        var End = \"<div style='box-shadow: \"+bShadow+\"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \"+font+\"; font-size: 12px ;text-align: center; padding: \"+pad+\" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 5px 5px; color: #FFFFFF; background-color:#545454;'><b>\"+cAmmo + \" of \" + mAmmo  +  \" left\"+ammoT+\"</div>\";\n        if (who == \"NPC\") {\n            var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");\n            var toptext = brPart + \"padding: 10px; background-color:\" + PlayerBGColor + \";'><b>\" + msg.who +\" used a Power!</b></div>\";\n            sendChat(who, toptext);\n            sendChat('BlindRoll', \"/w GM \" + top + Main + End);\n            return;\n        }\n        else sendChat(who, '' + top + Main + End);\n    }\n});/*global gmC state on obj getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/\nvar WillTurnOrder = {};\nvar TurnData = {};\nvar BestRoll = 0;\nvar intChat = '';\n/*------------------\nAPI CHAT COMMANDS\n------------------*/\non('chat:message', function(msg) {\n    /*--TURNS-SET--*/\n    if(msg.type == 'api' && msg.content.indexOf('!Turns') !== -1) {\n\t\tvar turnorder;\n\t\tif(!Campaign().get(\"turnorder\")) return;\n\t\tturnorder = JSON.parse(Campaign().get(\"turnorder\"));\n\t\tsort(turnorder); /*--SORT TURNS--*/\n\t\tturnorder = JSON.parse(Campaign().get(\"turnorder\"));\n\t\tSetPurple(turnorder, false);\n\t\tfor(var i in turnorder) {\n\t\t\tvar cAttacks = 5; /*-DEFAULT ATTACKS-*/\n\t\t\tvar name = turnorder[i].id; /*-TURN ORDER WHO-*/\n\t\t\tvar id1 = getObj(\"graphic\", turnorder[i].id); /*-GET TOKEN-*/\n\t\t\tvar pColor = '#636363';\n\t\t\tif(id1 != undefined) {\n\t\t\t\tvar oCharacter = getObj(\"character\", id1.get(\"represents\"));\n\t\t\t\tvar iName = id1.get(\"name\");\n\t\t\t\tif(oCharacter != undefined) {\n\t\t\t\t\tiName = oCharacter.get(\"name\");\n\t\t\t\t\tvar oAttacks = findObjs({\n\t\t\t\t\t\t_type: \"attribute\",\n\t\t\t\t\t\tname: \"ATT\",\n\t\t\t\t\t\t_characterid: oCharacter.id\n\t\t\t\t\t})[0];\n\t\t\t\t\tif(oAttacks != undefined) cAttacks = parseInt(oAttacks.get(\"current\"));\n\t\t\t\t\tvar type = (oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';\n\t\t\t\t\tif(type == 'Player') {\n\t\t\t\t\t\tvar cBy = oCharacter.get('controlledby');\n\t\t\t\t\t\tif(cBy.split(',').length == 1 && cBy != 'all') {\n\t\t\t\t\t\t\tplayer = getObj('player', cBy);\n\t\t\t\t\t\t\tpColor = player.get('color');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(oCharacter == undefined && id1.get(\"gmnotes\") != \"\") {\n\t\t\t\t\tcAttacks = id1.get(\"gmnotes\");\n\t\t\t\t}\n\t\t\t\tif(oCharacter == undefined) {\n\t\t\t\t\tsetbars(id1);\n\t\t\t\t}\n\t\t\t\tvar init = parseInt(turnorder[i].pr);\n\t\t\t\tif(init < cAttacks) {\n\t\t\t\t\tinit = cAttacks;\n\t\t\t\t\tturnorder[i].pr = cAttacks;\n\t\t\t\t}\n\t\t\t\taddPlayer(name, parseInt(init), parseInt(cAttacks));\n\t\t\t}\n\t\t}\n\t\tvar sTurns = createOrder();\n\t\tsort(sTurns); /*--SORT TURNS--*/\n\t\tvar aFirst = JSON.parse(Campaign().get(\"turnorder\"));\n\t\tvar iName2 = getObj(\"graphic\", aFirst[1].id).get(\"name\");\n\t\tif(getObj(\"graphic\", aFirst[1].id).get(\"layer\") == 'gmlayer') iName2 = \"UNKNOWN\";\n\t\tvar C = fPart + \" background-color:#A80000;'><b>● ROUND STARTS ●</b></div>\";\n\t\tvar R = fPart + \" background-color:#A80000;'><b>\" + iName2 + \"</b> goes first!</div>\";\n\t\tsendChat('TurnTracker', \"/direct \" + C + R + \"<br>\" + intChat);\n\t\treset();\n\t}\n\t/*--RESET--*/\n\tif(msg.type == 'api' && msg.content.indexOf('!Reset') !== -1) {\n\t\tif(!Campaign().get(\"turnorder\")) return;\n\t\tvar turn_order = JSON.parse(Campaign().get(\"turnorder\"));\n\t\tCampaign().set(\"turnorder\", '');\n\t\tsendChat('', '/desc Turns Reset!');\n\t}\n});\n/*------------------\nHIGHLIGHT TURNS\n------------------*/\non(\"change:campaign:turnorder\", function(obj, prev) {\n\tif(!Campaign().get(\"turnorder\")) return;\n\tvar turn_order = JSON.parse(Campaign().get(\"turnorder\"));\n\tif(!turn_order.length) return;\n\tif(!turn_order[0].id == -1) {\n\t\tSetPurple(turn_order, true);\n\t\treturn;\n\t}\n\tvar current_token = getObj(\"graphic\", turn_order[0].id);\n\tif(current_token != undefined) {\n\t\tif(turn_order[0].pr == turn_order[0].pr) {\n\t\t\tvar iName2 = getObj(\"graphic\", current_token.id).get(\"name\");\n\t\t\toCharacter = getObj(\"character\", current_token.get(\"represents\"));\n\t\t\tpColor = '#ff0000';\n\t\t\tif(getObj(\"graphic\", current_token.id).get(\"layer\") == 'gmlayer') pColor = '#3D3D3D';\n\t\t\tif(oCharacter != undefined) {\n\t\t\t\tvar type = (oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';\n\t\t\t\tif(type == 'Player') {\n\t\t\t\t\tvar cBy = oCharacter.get('controlledby');\n\t\t\t\t\tif(cBy.split(',').length == 1 && cBy != 'all') {\n\t\t\t\t\t\tplayer = getObj('player', cBy);\n\t\t\t\t\t\tpColor = player.get('color');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdieName = 'StartRound';\n\t\t\tvar to = JSON.parse(obj.get('turnorder'));\n\t\t\tloc = _.find(to, function(e) {\n\t\t\t\treturn dieName === e.custom;\n\t\t\t});\n\t\t\tif(loc !== undefined) {\n\t\t\t\tmovemarker(current_token, pColor, iName2);\n\t\t\t} else SetPurple(turn_order, 1);\n\t\t}\n\t}\n});\n/*------------------\nFUNCTIONS\n------------------*/\n//--MOVE TURN MARKER\nfunction movemarker(current_token, pColor, iName2) {\n\tif(current_token.get(\"layer\") == \"gmlayer\") {\n        piclink = 'http://www.clker.com/cliparts/i/X/D/N/j/p/icon-with-question-mark-hi.png';\n\t\tiName2 = \"UNKNOWN\";\n\t} else {\n        var piclink = current_token.get(\"imgsrc\");\n        var size = current_token.get(\"height\");\n        var HITS = {\n            \"angle\": 0,\n        \t\"angleRandom\": 180,\n        \t\"duration\": 10,\n        \t\"emissionRate\": 100,\n        \t\"endColour\": [255, 255, 255, 0],\n        \t\"endColourRandom\": [0, 0, 0, 0],\n        \t\"gravity\": {\"x\":0, \"y\":0},\n        \t\"lifeSpan\": 10,\n        \t\"lifeSpanRandom\": 30,\n        \t\"maxParticles\": 100,\n        \t\"size\": size/2,\n        \t\"sizeRandom\": 15,\n        \t\"speed\": 0.0*(size/30),\n        \t\"speedRandom\": 0.0*(size/30),\n        \t\"startColour\": [50, 50, 150, 0.1],\n        \t\"startColourRandom\": [0, 0, 0, 0.1]\n        };\n    spawnFxWithDefinition(current_token.get(\"left\"),current_token.get(\"top\"), HITS, current_token.get(\"_pageid\"));\n\t}\n\tvar picbox = \"<div style= 'background-color:#ffffff; display: inline-block; border: 1px solid #000; margin: 0.2em; border-radius: 10px 10px 10px 10px; align:'center''><img src=\" + piclink + \" style=height:30px; width:30px;'></div>\";\n\tvar table = '<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\"><tr><td width=\"20%\">' + picbox + '</td><td width=\"90%\"><b>Turn: ' + iName2 + '</b></td></tr></table>';\n\tvar R = iPart2 + \" background-color:#\" + pColor + \";'>\" + table + \"</div>\";\n\tsendChat('', \"/direct \" + R);\n};\n//--SET BARS\nfunction setbars(id1) {\n\tif(id1.get(\"bar1_value\") == \"\" || id1.get(\"bar2_value\") == \"\") {\n\t\tid1.set('bar1_value', 100);\n\t\tid1.set('bar1_max', 100);\n\t\tid1.set('bar2_value', 100);\n\t\tid1.set('bar2_max', 100);\n\t}\n};\n\nfunction SetPurple(turn_order, toggle) {\n\ti = 0;\n\t_.each(turn_order, function(obj) {\n\t\tvar tokens = getObj('graphic', turn_order[i].id);\n\t\tif(tokens == undefined) return;\n\t\ttokens.set(\"status_purple\", toggle);\n\t\ti++;\n\t});\n};\n//--SORT LIST\nfunction sort(order) {\n\tvar nOrd = order.sortByProp('pr');\n\tCampaign().set(\"turnorder\", JSON.stringify(nOrd));\n};\nArray.prototype.sortByProp = function(p) {\n\treturn this.sort(function(a, b) {\n\t\treturn(parseInt(a[p], 10) < parseInt(b[p], 10)) ? 1 : (parseInt(a[p], 10) > parseInt(b[p], 10)) ? -1 : 0;\n\t});\n};\n//--ADDPLAYER\nfunction addPlayer(id, Roll, Attack) {\n\tvar inc = Roll / Attack;\n\tinc = Math.round(inc * 100) / 100;\n\tvar init = Roll;\n\tif(Roll > BestRoll) {\n\t\tBestRoll = Roll;\n\t}\n\tvar table = [];\n\tfor(var i = 0; i < Attack; i++) {\n\t\tif(init >= 0) {\n\t\t\tif(init == 0) init = 1;\n\t\t\ttable.push(parseInt(init));\n\t\t\tinit = (init - inc);\n\t\t}\n\t}\n\toutput = pColor;\n\tiName = iName.toUpperCase();\n\tturnNums = table.toString();\n\tif(id1.get(\"layer\") == 'gmlayer') iName = \"UNKNOWN\";\n\tChatSay = iPart + \"background-color:\" + output + \";'>\" + \"<b>\" + iName + \"</b> (Att:\" + Attack + \") (Roll:\" + Roll + \")<br></b><b>\" + turnNums + \"</b></div>\";\n\tif(iName == \"UNKNOWN\") ChatSay = \"\";\n\tintChat1 = ChatSay;\n\tintChat += intChat1;\n\tTurnData[id] = {\"Roll\": Roll,\"Attack\": Attack,\"Table\": table};\n};\n//--CREATE ORDER\nfunction createOrder() {\n\tvar order = [];\n\tfor(i = (BestRoll + 1); i > 0; i--) {\n\t\t_.each(TurnData, function(value, key) {\n\t\t\tif(value.Table.indexOf(i) != -1) {\n\t\t\t\torder.push({\"id\": key,\"pr\": i,\"custom\": \"\"});\n\t\t\t}\n\t\t});\n\t}\n\torder.unshift({\"id\": '-1',\"pr\": 100,\"custom\": \"StartRound\"});\n\treturn order;\n};\n//--RESET TURNS\nfunction reset() {\n\tTurnData = {};\n\tBestRoll = 0;\n\tintChat = '';\n};/*global MonthId gmC state on log myrolls obj getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/\n//CODE-----------------\non(\"chat:message\", function(msg) {\n    var msgTxt = msg.content;\n    var msgFormula = msgTxt.split(\" \");\n    if(msg.type == \"api\" && msgTxt.toUpperCase().indexOf('!HOUR') !== -1) {\n        var nHour = msgFormula[1];\n        if(nHour == undefined) nHour = 0;\n        time(nHour);\n        FoodSet(nHour);\n        SleepSet(nHour);\n    }\n    if(msg.type == \"api\" && msgTxt.toUpperCase().indexOf('!WEATHER') !== -1) {\n        weath(function() {\n            var wText = state.weather\n            sendChat('', \"&{template:RIFTS} {{name=Nature}} {{color=world}}\" + wText);\n        });\n    }\n    if(msg.type == \"api\" && msgTxt.toUpperCase().indexOf('!NOW') !== -1) {\n        cText = state.world;\n        wText = state.weather;\n        sendChat('', cText + wText);\n    }\n});\n//\nfunction weath(callback) {\n    var wText = \"\",\n    sentinel = true;\n    //Get Date-----------------\n    var croll = findObjs({_type: 'character', name: 'World'})[0];\n\n    var oMonth = findObjs({name: \"Month\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];\n    var MonthNum = parseInt(oMonth.get(\"current\"));\n\n    var oDay = findObjs({name: \"Day\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];\n    var oDay = parseInt(oDay.get(\"current\"));\n\n    var oYear = findObjs({name: \"Year\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];\n    var oYearNum = parseInt(oYear.get(\"current\"));\n\n    var oTerrain = findObjs({name: \"Terrain\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];\n    var oTerrainname = oTerrain.get(\"current\");\n    var oTerrainNum = parseInt(oTerrain.get(\"max\"));\n\n    var oHour = findObjs({name: \"Hour\",_type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];\n    var oHourNum = parseInt(oHour.get(\"current\"));\n    log(oTerrainNum)\n    //Lookup name-----------------\n    MonthId.forEach(function(opts) {\n        var oType = \"\";\n        if(MonthNum == opts.Month) {\n            var Calm = 100;\n            var cDust = 51;\n            var cRain = 50;\n            var cRare = 5;\n            //---find temp\n            var rN = Math.floor(Math.random() * 30) - 15;\n            var tChange = rN;\n            var TempBase = (opts.Base + rN + oTerrainNum);\n            if(oHourNum >= 17 || oHourNum <= 7) TempBase = TempBase - 20;\n            var TempBaseReal = TempBase;\n            if(TempBase <= 20) {\n                var TempBase = TempBase + \"F (Exposer Warning!)\";\n            } else if(TempBase >= 100) {\n                var TempBase = TempBase + \"F (Heat Warning!)\";\n            } else {\n                var TempBase = TempBase + \"F \";\n            }\n            //----------\n            var ranType = randomInteger(100);\n            if(ranType < cRare) {\n                oType = \"Rare\";\n            } else if(ranType < cRain) {\n                oType = \"Rain\";\n            } else if(ranType < cDust) {\n                oType = \"Dust\";\n            } else {\n                oType = \"Calm\";\n            }\n            //----------\n            if(TempBaseReal <= 35 & oType == \"Rain\") oType = \"Snow\";\n            if(TempBaseReal > 35 & oType == \"Snow\") oType = \"Rain\";\n            //----------\n            var oDesc = \"\";\n            sentinel = false;\n            sendChat(\"NoOne\", \"/roll 1t[W-\" + oType + \"]\", function(ops) {\n                var rollresult = JSON.parse(ops[0].content);\n                oDesc = rollresult.rolls[0].results[0].tableItem.name;\n                var output1 = TempBase;\n                var output2 = \"<i>\" + oType;\n                wText = \"{{<small>Type:=<b><small>\" + output2 + \"</b>}} {{<small>Temp:=<small>\" + output1 + \"}} {{<small>Weather:=<small>\" + oDesc + \"}}\";\n                state.weather = wText;\n                callback();\n            });\n        }\n    });\n    if(sentinel) {\n        callback();\n    }\n};\n//-------TIME FUNCTION\nfunction time(HourT) {\n    var nHour = parseInt(HourT);\n    var croll = findObjs({ _type: 'character',name: 'World'})[0];\n    //--hour------------------------\n    var Hour = findObjs({name: \"Hour\",_type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];\n    var HourNum = parseInt(Hour.get(\"current\"));\n    var mHourNum = parseInt(Hour.get(\"max\"));\n    //--day------------------------\n    var DayChat = findObjs({name: \"Day\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];\n    var DayNum = parseInt(DayChat.get(\"current\"));\n    var mDayNum = parseInt(DayChat.get(\"max\"));\n    //--month------------------------\n    var MonthChat = findObjs({name: \"Month\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];\n    var MonthNum = parseInt(MonthChat.get(\"current\"));\n    var mMonthNum = parseInt(MonthChat.get(\"max\"));\n    //--year------------------------\n    var YearChat = findObjs({name: \"Year\", _type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];\n    var YearNum = parseInt(YearChat.get(\"current\"));\n    //--------------\n    //set\n    Hour.set('current', HourNum + nHour);\n    HourNum = parseInt(Hour.get(\"current\"));\n    var nDay1 = '';\n    if(HourNum >= mHourNum || HourNum == 0) {\n        Hour.set('current', (HourNum - 24) + 0);\n        DayChat.set('current', DayNum + 1);\n        var nDay1 = \"{{NewDay=<b>A New Day is Here</b>}}\";\n    }\n    if(DayNum > mDayNum) {\n        DayChat.set('current', 1);\n        MonthChat.set('current', MonthNum + 1);\n    }\n    if(MonthNum > mMonthNum) {\n        MonthChat.set('current', 1);\n        YearChat.set('current', YearNum + 1);\n    }\n    wText = \"\";\n    var cWeather = randomInteger(7);\n    var finishWork = function() {\n        //------------------\n        var HourNum = parseInt(Hour.get(\"current\"));\n        var DayNum = parseInt(DayChat.get(\"current\"));\n        var MonthNum = parseInt(MonthChat.get(\"current\"));\n        var Clock = (HourNum >= 12) ? 'PM' : 'AM';\n        if(HourNum >= 12) {\n            HourNum = HourNum - 12;\n        }\n        if(HourNum == 0) HourNum = 12;\n        MonthId.forEach(function(opts) {\n            if(MonthNum == opts.Month) {\n                var MonthName = opts.Name;\n                var Day = HourNum + \" \" + Clock + \" \" + MonthName + \" \" + DayNum + \", \" + YearNum;\n                var cText = \"&{template:RIFTS} {{name=World}} {{color=world}} {{<small>Time:=\" + Day + \"}}\" + nDay1;\n                state.world = cText;\n                if(cWeather == 1) wText = state.weather\n                sendChat('', cText + wText);\n            }\n        });\n    };\n    if(cWeather == 1 && nHour != 0) {\n        weath(finishWork);\n        wText = state.weather;\n    } else {\n        finishWork();\n    }\n};\n/*------------------\nWEATHER STUFF\n------------------*/\n//---MONTH\nvar MonthId = [\n    {Month: 1,Name: 'January',Base: 30},\n\t{Month: 2,Name: 'February',Base: 50},\n\t{Month: 3,Name: 'March',Base: 50},\n\t{Month: 4,Name: 'April',Base: 70},\n\t{Month: 5,Name: 'May',Base: 80},\n\t{Month: 6,Name: 'June',Base: 90},\n\t{Month: 7,Name: 'July',Base: 90},\n\t{Month: 8,Name: 'August',Base: 90},\n\t{Month: 9,Name: 'September',Base: 80},\n\t{Month: 10,Name: 'October',Base: 70},\n\t{Month: 11,Name: 'November',Base: 50},\n\t{Month: 12,Name: 'December',Base: 30}\n\t ];","undoManager":{"mark":-2,"position":85,"stack":[[{"start":{"row":0,"column":0},"end":{"row":513,"column":3},"action":"remove","lines":["/*global createObj TokenMod getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.3.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 7 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","//CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true) return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","    //ATTRIBUTE CHECK------------","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","        //CHECK BLOOD ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'BLOODCOLOR') === undefined) CreateAttrib(oCharacter, 'BLOODCOLOR', 'DEFAULT');","                    var Blood = findObjs({name: 'BLOODCOLOR',_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseBlood = Blood.get(\"current\");","                    UseBlood = UseBlood.toString().toUpperCase();","        //CHECK DISABLED AURA/TINT ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter, 'USECOLOR', 'YES');","                    var UseAuraAtt = findObjs({name: \"USECOLOR\",_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if(UseAura != \"YES\" && UseAura != \"NO\") {","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                        UseAuraAtt.set('current', \"YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                }","    //CHECK BARS------------","                var barUsed = state.HealthColors.auraBar;","                if(obj.get(barUsed + \"_max\") === \"\" || obj.get(barUsed + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                var curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                var prevValue = prev[barUsed + \"_value\"];","                if(isNaN(maxValue) && isNaN(curValue)) return;","        //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","        //PERCENTAGE OFF------------","                if(percReal > state.HealthColors.auraPerc) {","                    SetAuraNone(obj);","                    return;","                }","    //CHECK MONSTER OR PLAYER------------","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","                var GM = '', PC = '';","                var markerColor = PercentToRGB(Math.min(100, percReal));","                var pColor = '#ffffff';","        //IF PLAYER------------","                if(type == 'Player' && state.HealthColors.PCAura !== false) {","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if(player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    if(GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({'showname': GM});","                    }","                    PC = state.HealthColors.PCNames;","                    if(PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({'showplayers_name': PC});","                    }","                    if(UseAura !== \"NO\") {","                        if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                    }","                }","        //IF MONSTER------------","                if(type == 'Monster' && state.HealthColors.NPCAura !== false) {","                    GM = state.HealthColors.GM_NPCNames;","                    if(GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({'showname': GM});","                    }","                    PC = state.HealthColors.NPCNames;","                    if(PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({'showplayers_name': PC});","                    }","                    if(UseAura !== \"NO\") {","                        if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","                        else TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                    }","                }","    //SPURT FX------------","                if(state.HealthColors.FX == true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                    if(curValue == prevValue || prevValue === \"\") return;","                    var HurtColor, HealColor, HITS, FX, aFX, FXArray = [];","                    var amount = Math.abs(curValue - prevValue);","                    var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                    var Scale = obj.get(\"height\") / 70;","                    var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","        //IF HEAL------------","                    if(curValue > prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                        FX = aFX.get(\"definition\");","                        HealColor = HEXtoRGB(state.HealthColors.HealFX);","                        FX.startColour = HealColor;","                        FXArray.push(FX);","                    }","        //IF HURT------------","                    else if(curValue < prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                        if(aFX) FX = aFX.get(\"definition\");","                        if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                            HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                            FX.startColour = HurtColor;","                            FXArray.push(FX);","                        }","                        else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                            HurtColor = HEXtoRGB(UseBlood);","                            if(_.difference(HurtColor, [0, 0, 0, 0]).length === 0) {","                                var i = UseBlood.split(/,/);","                                _.each(i, function (FXname) {","                                    aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                    if(aFX) {","                                        FX = aFX.get(\"definition\");","                                        FXArray.push(FX);","                                    }","                                    else GMW(\"No FX with name \" + FXname);","                                });","                                }","                            else {","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                            }","                        }","                    }","                    else return;","        //SPAWN FX------------","                     _.each(FXArray, function (FX) {","                        SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                    });","                }","    //SET DEAD------------","                var dead = state.HealthColors.auraDead;","                if(curValue <= 0 && dead === true) {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else if(dead === true) obj.set(\"status_dead\", false);","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    var option = msgFormula[1];","                    if(option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch(msgFormula[1].toUpperCase()) {","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        aurahelp();","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        aurahelp();","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        aurahelp();","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);","                        aurahelp();","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        aurahelp();","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        aurahelp();","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        aurahelp();","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        aurahelp();","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        aurahelp();","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        aurahelp();","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        aurahelp();","                        break;","                    case \"HEAL\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        aurahelp();","                        break;","                    case \"HURT\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        aurahelp();","                        break;","                    default:","                        return;","                    }","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale,","                \"sizeRandom\": FX.sizeRandom * Scale,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","    //WHISPER GM------------","        GMW = function (text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                var RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //CREATE USECOLOR ATTR------------","        CreateAttrib = function (oCharacter, attrib, value) {","            log(\"Creating \" + attrib);","            createObj(\"attribute\", {name: attrib,current: value,characterid: oCharacter.id});","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","            var scale = Pageon.get(\"scale_number\") / 10;","            obj.set({","                'aura1_radius': sizeSet * scale * 1.8,","                'aura2_radius': sizeSet * scale * 0.1,","                'aura1_color': markerColor,","                'aura2_color': pColor,","                'showplayers_aura1': true,","                'showplayers_aura2': true,","            });","        },","    //HELP MENU------------","        aurahelp = function () {","            var img = \"background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--","                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                HR + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            var tint = state.HealthColors.auraTint;","            if(tint === true) {","                obj.set({'tint_color': \"transparent\",});","            }","            else {","                obj.set({","                    'aura1_color': \"\",","                    'aura2_color': \"\",","                });","            }","        },","    //PERC TO RGB------------","        PercentToRGB = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b;","            if(percent < 50) {","                g = Math.floor(255 * (percent / 50));","                r = 255;","            }","            else {","                g = 255;","                r = Math.floor(255 * ((50 - percent % 50) / 50));","            }","            b = 0;","            var Gradient = rgbToHex(r, g, b);","            return Gradient;","        },","    //RGB TO HEX------------","        rgbToHex = function (r, g, b) {","            var Color = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return Color;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('<' + ScriptName + ' v' + version + ' Ready [Updated: ' + Updated + ']>');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {","                    schemaVersion: schemaVersion","                };","                state.HealthColors.version = version;","            }","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","        //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) {","                TokenMod.ObserveTokenChange(handleToken);","            }","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","            if(!FXHurt) {","                log(ScriptName + ' <Creating Default Hurt FX>');","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                log(ScriptName + ' <Creating Default Heal FX>');","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                        prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","/*------------------------","RETURN OUTSIDE FUNCTIONS","------------------------*/","    return {","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"],"id":2},{"start":{"row":0,"column":0},"end":{"row":515,"column":3},"action":"insert","lines":["/*global createObj TokenMod getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.3.2',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 10 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","//CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","    //**ATTRIBUTE CHECK------------//","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","        //CHECK BLOOD ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'BLOODCOLOR') === undefined) CreateAttrib(oCharacter, 'BLOODCOLOR', 'DEFAULT');","                    var Blood = findObjs({name: 'BLOODCOLOR',_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseBlood = Blood.get(\"current\");","                    UseBlood = UseBlood.toString().toUpperCase();","        //CHECK DISABLED AURA/TINT ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter, 'USECOLOR', 'YES');","                    var UseAuraAtt = findObjs({name: \"USECOLOR\",_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if(UseAura != \"YES\" && UseAura != \"NO\") {","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                        UseAuraAtt.set('current', \"YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                }","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                if(obj.get(barUsed + \"_max\") === \"\" || obj.get(barUsed + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                var curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                var prevValue = prev[barUsed + \"_value\"];","                if(isNaN(maxValue) && isNaN(curValue)) return;","                if(maxValue === \"\" || curValue === \"\" || prevValue === \"\" ) return;","        //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","    //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","                var GM = '', PC = '';","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","        //IF PLAYER------------","                if(type == 'Player' && state.HealthColors.PCAura !== false) {","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if(player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","        //IF MONSTER------------","                else if(type == 'Monster' && state.HealthColors.NPCAura !== false) {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","        //SET SHOW NAMES------------","                if(GM != 'Off') {","                    GM = (GM == \"Yes\") ? true : false;","                    obj.set({'showname': GM});","                }","                if(PC != 'Off') {","                    PC = (PC == \"Yes\") ? true : false;","                    obj.set({'showplayers_name': PC});","                }","    //**SPURT FX------------//","                if(state.HealthColors.FX == true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                    var HurtColor, HealColor, HITS, FX, aFX, FXArray = [];","                    var amount = Math.abs(curValue - prevValue);","                    var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                    var Scale = obj.get(\"height\") / 70;","                    var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","        //IF HEAL------------","                    if(curValue > prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                        FX = aFX.get(\"definition\");","                        HealColor = HEXtoRGB(state.HealthColors.HealFX);","                        FX.startColour = HealColor;","                        FXArray.push(FX);","                    }","        //IF HURT------------","                    else if(curValue < prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                        if(aFX) FX = aFX.get(\"definition\");","                //IF DEFAULT COLOR--","                        if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                            HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                            FX.startColour = HurtColor;","                            FXArray.push(FX);","                        }","                //ELSE CUSTOM COLOR/FX--","                        else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                            HurtColor = HEXtoRGB(UseBlood);","                    //IF CUSTOM COLOR--","                            if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                                }","                    //ELSE ASSUME CUSTOM FX--","                            else {","                                var i = UseBlood.split(/,/);","                                _.each(i, function (FXname) {","                                    aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                    if(aFX) {","                                        FX = aFX.get(\"definition\");","                                        FXArray.push(FX);","                                    }","                                    else GMW(\"No FX with name \" + FXname);","                                });","                            }","                        }","                    }","                    else return;","        //SPAWN FX------------","                    _.each(FXArray, function (FX) {","                        SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                    });","                }","    //**SET DEAD------------","                var deadNPC = state.HealthColors.auraDead;","                var deadPC = state.HealthColors.auraDeadPC;","                if(curValue <= 0 && deadNPC === true && type == 'Monster') {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else if(curValue <= 0 && deadPC === true && type == 'Player') {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else obj.set(\"status_dead\", false);","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var option = msgFormula[1];","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch(msgFormula[1].toUpperCase()) {","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        aurahelp();","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        aurahelp();","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        aurahelp();","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        aurahelp();","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        aurahelp();","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        aurahelp();","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        aurahelp();","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        aurahelp();","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        aurahelp();","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        aurahelp();","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        aurahelp();","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        aurahelp();","                        break;","                    case \"HEAL\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        aurahelp();","                        break;","                    case \"HURT\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        aurahelp();","                        break;","                    default:","                        return;","                    }","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //WHISPER GM------------","        GMW = function (text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                var RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //CREATE USECOLOR ATTR------------","        CreateAttrib = function (oCharacter, attrib, value) {","            log(\"Creating \" + attrib);","            createObj(\"attribute\", {name: attrib,current: value,characterid: oCharacter.id});","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //HELP MENU------------","        aurahelp = function () {","            var img = \"background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            var tint = state.HealthColors.auraTint;","            if(tint === true) {","                obj.set({'tint_color': \"transparent\",});","            }","            else {","                obj.set({'aura1_color': \"\",'aura2_color': \"\",});","            }","        },","    //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) g = Math.floor(255 * (percent / 50)),r = 255;","            else g = 255, r = Math.floor(255 * ((50 - percent % 50) / 50));","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('<' + ScriptName + ' v' + version + ' Ready [Updated: ' + Updated + ']>');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","        //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","        //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) {","                TokenMod.ObserveTokenChange(handleToken);","            }","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","        if(!FXHurt) {","                log(ScriptName + ' <Creating Default Hurt FX>');","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                log(ScriptName + ' <Creating Default Heal FX>');","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","/*------------------------","RETURN OUTSIDE FUNCTIONS","------------------------*/","    return {","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});"]}],[{"start":{"row":515,"column":3},"end":{"row":516,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":516,"column":0},"end":{"row":516,"column":1},"action":"insert","lines":["/"],"id":4}],[{"start":{"row":516,"column":1},"end":{"row":516,"column":2},"action":"insert","lines":["*"],"id":5}],[{"start":{"row":516,"column":2},"end":{"row":517,"column":0},"action":"insert","lines":["",""],"id":6}],[{"start":{"row":517,"column":0},"end":{"row":517,"column":1},"action":"insert","lines":["-"],"id":7}],[{"start":{"row":517,"column":1},"end":{"row":518,"column":0},"action":"insert","lines":["",""],"id":8}],[{"start":{"row":518,"column":0},"end":{"row":518,"column":1},"action":"insert","lines":["-"],"id":9}],[{"start":{"row":518,"column":1},"end":{"row":519,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":519,"column":0},"end":{"row":519,"column":1},"action":"insert","lines":["-"],"id":11}],[{"start":{"row":519,"column":1},"end":{"row":520,"column":0},"action":"insert","lines":["",""],"id":12}],[{"start":{"row":520,"column":0},"end":{"row":520,"column":1},"action":"insert","lines":["-"],"id":13}],[{"start":{"row":520,"column":1},"end":{"row":521,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":521,"column":0},"end":{"row":521,"column":1},"action":"insert","lines":["*"],"id":15}],[{"start":{"row":521,"column":1},"end":{"row":521,"column":2},"action":"insert","lines":["/"],"id":16}],[{"start":{"row":521,"column":2},"end":{"row":522,"column":0},"action":"insert","lines":["",""],"id":17}],[{"start":{"row":522,"column":0},"end":{"row":791,"column":3},"action":"insert","lines":["/*global gmC PlaySound MakeRollNum TopBar state on MidBar obj BottBar getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/","on('chat:message', function(msg) {","    if (msg.type != \"api\") return;","//----CHECK CHARACTER","    var cWho = findObjs({ _type: 'character',name: msg.who})[0];","    if (cWho === undefined) {","        cWho = RollRight(msg.playerid);","        msg.who = cWho.get(\"name\");","    }","    var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","    var PRGB = hexToRgbP(PlayerBGColor);","    var PlayerBG = \"background-image:-webkit-linear-gradient(left, #000000 0%,\"+PlayerBGColor+\" 15%,\"+PlayerBGColor+\" 85%,#000000 100%);\";","    var PlayerBarColor = \"background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.8),\"+PRGB+\",\"+PRGB+\",rgba(0,0,0,0.8));\";","    var MIDBAR = MakeMid(MidBar,PlayerBGColor,PlayerBarColor);","    //","    var msgFormula = msg.content.split(/\\s+/);","    switch (msgFormula[0].toUpperCase()) {","//PIC","        case \"!PIC\":","            var piclink = msgFormula[1];","            var Pic = \"[pic](\" + piclink + \")\";","            sendChat('', \"&{template:RIFTS} {{name=\" + msg.who + \"}} {{pic=\" + Pic + \"}}\");","            break;","","//GM","        case \"!GM\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls some dice.. ●</div>\";","            sendChat('', \"/direct \" + MSG);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                var GMRW = OuterDiv + fPart + \"background-color:\" + gmC + \";'>ROLLED \" + msgFormula[1] + \":<b> \" + rollresult.total + \"</div>\";","                sendChat('ROLL', \"/w GM \" + GMRW);","            });","            break;","//PERC","        case \"!GMPERC\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls Perception Check●</div>\";","            sendChat('', \"/direct \" + MSG);","            break;","        case \"!CHEST\":","            PlaySound('dice', 9000);","    \t\tvar Names = [];","    \t\tif(msg.selected == undefined) {","    \t\t\tsendChat('', \"/desc No one selected\");","    \t\t\treturn;","    \t\t}","    \t\tvar selected = msg.selected;","    \t\ti = 0;","    \t\t_.each(selected, function (obj) {","    \t\t\tvar token = getObj('graphic', msg.selected[i]._id);","    \t\t\tif(token.get(\"represents\") !== '') {","    \t\t\t\tif(token.get('subtype') !== 'token') return;","    \t\t\t\tvar oCharacter = getObj('character', token.get(\"_represents\"));","    \t\t\t\tvar name = (oCharacter.get('name'));","    \t\t\t\tNames.push(oCharacter);","    \t\t\t}","    \t\t\ti++;","    \t\t});","    \t\tvar rand = Names[Math.floor(Math.random() * Names.length)];","    \t\tvar name = (rand.get('name'));","    \t\tvar pColor = GetPColor(rand);","    \t\tvar RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+pColor+\",\"+pColor+\",#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>Event: Pick player</b></div>\"+BottBar + RollColor +\";'>● Who: \" + name + \"  ●</div>\";","            sendChat('', \"/direct \" + MSG);","            break;","//WHISPER","        case \"!WIS\":","            var nXp = msg.content.substr(msg.content.indexOf(\" \") + 1);","            var wischat = OuterDiv + iPart + \"background-color:#831F29;'><b>● \" + nXp + \" ●</div></div>\";","            sendChat('System', \"/w \" + msg.who + ' ' + wischat);","            sendChat(msg.who, \"/w GM \" + wischat);","            break;","//CREDITS","        case \"!CRED\":","            var nCred = msgFormula[1];","            var oC = findObjs({name: \"Credits\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            var Cred = oC.get(\"current\");","            var mCred = oC.get(\"max\");","            var total = parseInt(nCred) + parseInt(Cred);","            oC.set('current', total);","            var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \"  ●</u><b><br>Credits Adjust: \" + formatNumber(nCred) + \"<br>Credits Total: \" + formatNumber(total) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//SAVINGTHROW","        case \"!SAVE\":","            PlaySound('dice', 9000);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                if (msg.who == \"NPC\") total = total + 1;","                else total = total - 1;","                if (total < 1) total = 1;","                if (total > 20) total = 20;","                var rText = total + \"</b> (Needed to beat \" + msgFormula[2]+\")\";","                if (total >= msgFormula[2]) {","                    var RE = \"<b>SUCCEEDED!<BR>\" + rText + \"</b></div>\";","                    var COLOR = \"#47BE02\";","                }","                else {","                    var RE = \"<b>FAILED!<BR>\" + rText + \"</b></div>\";","                    var COLOR = \"#BE0202\";","                }","                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",\"+COLOR+\",#000000);\";","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" save: \" + msgFormula[3] + \"</b></div>\"+BottBar + RollColor +\";'>\" + RE+ \"</div>\";","                sendChat('', \"/direct \" + MSG);","            });","            break;","//DC CHECK","        case \"!CHECK\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#8B4513,#8B4513,#000000);\";","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                var RawTotal = rollresult.total;","                if (msg.who == \"NPC\") RawTotal = RawTotal + 1;","                else rollresult.total = rollresult.total - 1;","                if (RawTotal < 1) RawTotal = 1;","                if (RawTotal > 20) RawTotal = 20;","                var bonus = Math.floor((msgFormula[2] - 10) / 2);","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" \" + msgFormula[3] + \" Check:</b></div>\"+BottBar + RollColor +\";'><b>\" + (RawTotal+bonus) + \"</b> (\" + RawTotal + \" + \" + bonus + \")</div>\";","                sendChat('', \"/direct \" + MSG);","","            });","            break;","//PERC","        case \"!PERC\":","            PlaySound('dice', 9000);","            var nMod = msgFormula[1];","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                var try1 = randomInteger(100);","                sendChat(msg.who, \"/direct <b>Perc Check\");","                sendChat(\"PERC\", \"/w GM <b>\" + msg.who + \" \" + [","                    [try1 < total]","                ] + \"<br>(\" + try1 + \" out of \" + total + \")\");","            });","            break;","//FOOD","        case \"!FOOD\":","            var nXp = msgFormula[1];","            var oC = findObjs({name: \"HUNGER\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (oC === undefined || oC.length === 0) {","                sendChat(msg.who, '/direct No FOOD Found, please set!');","                return;","            }","            var XP = oC.get(\"current\");","            var XPx = oC.get(\"max\");","            var total = parseInt(nXp) + parseInt(XP);","            if (total > XPx) total = XPx;","            oC.set('current', total);","            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \" ate  ●</u><b><br>HUNGER: \" + formatNumber(total) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//SLEEP","        case \"!SLEEP\":","            var attirbSleep = findObjs({name: \"SLEEPING\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (attirbSleep === undefined || attirbSleep.length === 0) {","                sendChat(msg.who, '/direct No SLEEP Found, please set!');","                return;","            }","            var CurrentSleep = attirbSleep.get(\"current\");","            var message = \"Is Sleeping\"","            if (CurrentSleep == 0) {","                attirbSleep.set('current', 1);","                var message = \"Is Sleeping\"","            }","            if (CurrentSleep == 1) {","                attirbSleep.set('current', 0);","                var message = \"Wakes Up\"","            }","            var help = lPart + \"background-color:#\" + greenC + \";'>● \" + msg.who + \" \" + message + \"  ●<b></div>\";","            sendChat('', \"/direct \" + help);","            break;","//XP","        case \"!XP\":","            var nXp = msgFormula[1];","            var oC = findObjs({name: \"XP\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            var oL = findObjs({name: \"Level\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (oC === undefined || oC.length === 0) {","                sendChat(msg.who, '/direct No XP Found, please set!');","                return;","            }","            var XP = oC.get(\"current\");","            var Level = oL.get(\"current\");","            var mXP = oC.get(\"max\");","            var total = parseInt(nXp) + parseInt(XP);","            oC.set('current', total);","            var help = OuterDiv + lPart + \"background-color:#831F29;'><u>● \" + msg.who + \" ●</u> [Level:\" + Level + \"] <br>XP Earned: \" + formatNumber(nXp) + \"<br>XP Total: \" + formatNumber(total) + \"<br>Next Level: \" + formatNumber(mXP) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//BLINDROLL","        case \"!RB\":","            PlaySound('dice', 9000);","            msg.content = MakeRollNum(msg.content, msg.inlinerolls);","            var ar = msg.inlinerolls[0];","            var Atotal = (ar.results.total);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult2 = JSON.parse(ops[0].content);","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                var skillN = \"\", i = 0, GM = \"\", RE = \"\",COLOR = \"#7DB1D1\";","                while (msgFormula[5 + i] !== undefined) {","                    skillN = skillN + \" \" + msgFormula[5 + i];","                    i++;","                }","                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" attempts </b></div>\";","                var totalAd = parseInt(Atotal) + parseInt(msgFormula[3]);","                var rText = \"<b>\" + total + \"</b> out of <b>\" + totalAd + \" </b>(\" + Atotal + \" + \" + msgFormula[3] + \")\";","                if (msgFormula[4].toUpperCase() == \"1\") {","                    if (total > 93) {","                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#B30000,#B30000,#B30000\";","                    }","                    else if (total <= 5) {","                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#00C400,#00C400,#00C400\";","                    }","                    else if (total <= totalAd) {","                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";","                    }","                    else {","                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" FAILED!<BR>\" + rText + \"</div>\";","                    }","                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");","                    if(GM !== \"\") sendChat('BlindRoll', \"/w GM \" + MSG +BottBar + RollColor + GM);","                }","                else {","                    if (total > 93) {","                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#B30000,#B30000,#B30000\";","                    }","                    else if (total <= 5) {","                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#00C400,#00C400,#00C400\";","                    }","                    else if (total <= totalAd) {","                        var RE = msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";","                    }","                    else {","                        var RE = msg.who + \" FAILED!<BR>\" + rText + \"</div>\";","                    }","                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");","                }","            });","            break;","//ROTATE","        case \"!ROTATE\":","            var selected = msg.selected;","            var i = 0;","            _.each(selected, function(obj) {","                var token = getObj('graphic', msg.selected[i]._id);","                token.set({","                    rotation: (randomInteger(360) - 1)","                });","                i++;","            });","            break;","        default:","            return;","    }","});"],"id":18}],[{"start":{"row":523,"column":0},"end":{"row":524,"column":0},"action":"insert","lines":["",""],"id":19}],[{"start":{"row":522,"column":0},"end":{"row":523,"column":0},"action":"remove","lines":["/*global gmC PlaySound MakeRollNum TopBar state on MidBar obj BottBar getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/",""],"id":20}],[{"start":{"row":522,"column":0},"end":{"row":523,"column":0},"action":"remove","lines":["",""],"id":21}],[{"start":{"row":0,"column":0},"end":{"row":790,"column":3},"action":"remove","lines":["/*global createObj TokenMod getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.3.2',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 10 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","//CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","    //**ATTRIBUTE CHECK------------//","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","        //CHECK BLOOD ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'BLOODCOLOR') === undefined) CreateAttrib(oCharacter, 'BLOODCOLOR', 'DEFAULT');","                    var Blood = findObjs({name: 'BLOODCOLOR',_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseBlood = Blood.get(\"current\");","                    UseBlood = UseBlood.toString().toUpperCase();","        //CHECK DISABLED AURA/TINT ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter, 'USECOLOR', 'YES');","                    var UseAuraAtt = findObjs({name: \"USECOLOR\",_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if(UseAura != \"YES\" && UseAura != \"NO\") {","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                        UseAuraAtt.set('current', \"YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                }","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                if(obj.get(barUsed + \"_max\") === \"\" || obj.get(barUsed + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                var curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                var prevValue = prev[barUsed + \"_value\"];","                if(isNaN(maxValue) && isNaN(curValue)) return;","                if(maxValue === \"\" || curValue === \"\" || prevValue === \"\" ) return;","        //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","    //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","                var GM = '', PC = '';","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","        //IF PLAYER------------","                if(type == 'Player' && state.HealthColors.PCAura !== false) {","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if(player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","        //IF MONSTER------------","                else if(type == 'Monster' && state.HealthColors.NPCAura !== false) {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","        //SET SHOW NAMES------------","                if(GM != 'Off') {","                    GM = (GM == \"Yes\") ? true : false;","                    obj.set({'showname': GM});","                }","                if(PC != 'Off') {","                    PC = (PC == \"Yes\") ? true : false;","                    obj.set({'showplayers_name': PC});","                }","    //**SPURT FX------------//","                if(state.HealthColors.FX == true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                    var HurtColor, HealColor, HITS, FX, aFX, FXArray = [];","                    var amount = Math.abs(curValue - prevValue);","                    var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                    var Scale = obj.get(\"height\") / 70;","                    var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","        //IF HEAL------------","                    if(curValue > prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                        FX = aFX.get(\"definition\");","                        HealColor = HEXtoRGB(state.HealthColors.HealFX);","                        FX.startColour = HealColor;","                        FXArray.push(FX);","                    }","        //IF HURT------------","                    else if(curValue < prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                        if(aFX) FX = aFX.get(\"definition\");","                //IF DEFAULT COLOR--","                        if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                            HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                            FX.startColour = HurtColor;","                            FXArray.push(FX);","                        }","                //ELSE CUSTOM COLOR/FX--","                        else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                            HurtColor = HEXtoRGB(UseBlood);","                    //IF CUSTOM COLOR--","                            if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                                }","                    //ELSE ASSUME CUSTOM FX--","                            else {","                                var i = UseBlood.split(/,/);","                                _.each(i, function (FXname) {","                                    aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                    if(aFX) {","                                        FX = aFX.get(\"definition\");","                                        FXArray.push(FX);","                                    }","                                    else GMW(\"No FX with name \" + FXname);","                                });","                            }","                        }","                    }","                    else return;","        //SPAWN FX------------","                    _.each(FXArray, function (FX) {","                        SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                    });","                }","    //**SET DEAD------------","                var deadNPC = state.HealthColors.auraDead;","                var deadPC = state.HealthColors.auraDeadPC;","                if(curValue <= 0 && deadNPC === true && type == 'Monster') {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else if(curValue <= 0 && deadPC === true && type == 'Player') {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else obj.set(\"status_dead\", false);","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var option = msgFormula[1];","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch(msgFormula[1].toUpperCase()) {","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        aurahelp();","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        aurahelp();","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        aurahelp();","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        aurahelp();","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        aurahelp();","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        aurahelp();","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        aurahelp();","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        aurahelp();","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        aurahelp();","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        aurahelp();","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        aurahelp();","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        aurahelp();","                        break;","                    case \"HEAL\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        aurahelp();","                        break;","                    case \"HURT\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        aurahelp();","                        break;","                    default:","                        return;","                    }","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //WHISPER GM------------","        GMW = function (text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                var RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //CREATE USECOLOR ATTR------------","        CreateAttrib = function (oCharacter, attrib, value) {","            log(\"Creating \" + attrib);","            createObj(\"attribute\", {name: attrib,current: value,characterid: oCharacter.id});","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //HELP MENU------------","        aurahelp = function () {","            var img = \"background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            var tint = state.HealthColors.auraTint;","            if(tint === true) {","                obj.set({'tint_color': \"transparent\",});","            }","            else {","                obj.set({'aura1_color': \"\",'aura2_color': \"\",});","            }","        },","    //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) g = Math.floor(255 * (percent / 50)),r = 255;","            else g = 255, r = Math.floor(255 * ((50 - percent % 50) / 50));","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('<' + ScriptName + ' v' + version + ' Ready [Updated: ' + Updated + ']>');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","        //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","        //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) {","                TokenMod.ObserveTokenChange(handleToken);","            }","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","        if(!FXHurt) {","                log(ScriptName + ' <Creating Default Hurt FX>');","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                log(ScriptName + ' <Creating Default Heal FX>');","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","/*------------------------","RETURN OUTSIDE FUNCTIONS","------------------------*/","    return {","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});","/*","-","-","-","-","*/","on('chat:message', function(msg) {","    if (msg.type != \"api\") return;","//----CHECK CHARACTER","    var cWho = findObjs({ _type: 'character',name: msg.who})[0];","    if (cWho === undefined) {","        cWho = RollRight(msg.playerid);","        msg.who = cWho.get(\"name\");","    }","    var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","    var PRGB = hexToRgbP(PlayerBGColor);","    var PlayerBG = \"background-image:-webkit-linear-gradient(left, #000000 0%,\"+PlayerBGColor+\" 15%,\"+PlayerBGColor+\" 85%,#000000 100%);\";","    var PlayerBarColor = \"background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.8),\"+PRGB+\",\"+PRGB+\",rgba(0,0,0,0.8));\";","    var MIDBAR = MakeMid(MidBar,PlayerBGColor,PlayerBarColor);","    //","    var msgFormula = msg.content.split(/\\s+/);","    switch (msgFormula[0].toUpperCase()) {","//PIC","        case \"!PIC\":","            var piclink = msgFormula[1];","            var Pic = \"[pic](\" + piclink + \")\";","            sendChat('', \"&{template:RIFTS} {{name=\" + msg.who + \"}} {{pic=\" + Pic + \"}}\");","            break;","","//GM","        case \"!GM\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls some dice.. ●</div>\";","            sendChat('', \"/direct \" + MSG);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                var GMRW = OuterDiv + fPart + \"background-color:\" + gmC + \";'>ROLLED \" + msgFormula[1] + \":<b> \" + rollresult.total + \"</div>\";","                sendChat('ROLL', \"/w GM \" + GMRW);","            });","            break;","//PERC","        case \"!GMPERC\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls Perception Check●</div>\";","            sendChat('', \"/direct \" + MSG);","            break;","        case \"!CHEST\":","            PlaySound('dice', 9000);","    \t\tvar Names = [];","    \t\tif(msg.selected == undefined) {","    \t\t\tsendChat('', \"/desc No one selected\");","    \t\t\treturn;","    \t\t}","    \t\tvar selected = msg.selected;","    \t\ti = 0;","    \t\t_.each(selected, function (obj) {","    \t\t\tvar token = getObj('graphic', msg.selected[i]._id);","    \t\t\tif(token.get(\"represents\") !== '') {","    \t\t\t\tif(token.get('subtype') !== 'token') return;","    \t\t\t\tvar oCharacter = getObj('character', token.get(\"_represents\"));","    \t\t\t\tvar name = (oCharacter.get('name'));","    \t\t\t\tNames.push(oCharacter);","    \t\t\t}","    \t\t\ti++;","    \t\t});","    \t\tvar rand = Names[Math.floor(Math.random() * Names.length)];","    \t\tvar name = (rand.get('name'));","    \t\tvar pColor = GetPColor(rand);","    \t\tvar RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+pColor+\",\"+pColor+\",#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>Event: Pick player</b></div>\"+BottBar + RollColor +\";'>● Who: \" + name + \"  ●</div>\";","            sendChat('', \"/direct \" + MSG);","            break;","//WHISPER","        case \"!WIS\":","            var nXp = msg.content.substr(msg.content.indexOf(\" \") + 1);","            var wischat = OuterDiv + iPart + \"background-color:#831F29;'><b>● \" + nXp + \" ●</div></div>\";","            sendChat('System', \"/w \" + msg.who + ' ' + wischat);","            sendChat(msg.who, \"/w GM \" + wischat);","            break;","//CREDITS","        case \"!CRED\":","            var nCred = msgFormula[1];","            var oC = findObjs({name: \"Credits\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            var Cred = oC.get(\"current\");","            var mCred = oC.get(\"max\");","            var total = parseInt(nCred) + parseInt(Cred);","            oC.set('current', total);","            var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \"  ●</u><b><br>Credits Adjust: \" + formatNumber(nCred) + \"<br>Credits Total: \" + formatNumber(total) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//SAVINGTHROW","        case \"!SAVE\":","            PlaySound('dice', 9000);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                if (msg.who == \"NPC\") total = total + 1;","                else total = total - 1;","                if (total < 1) total = 1;","                if (total > 20) total = 20;","                var rText = total + \"</b> (Needed to beat \" + msgFormula[2]+\")\";","                if (total >= msgFormula[2]) {","                    var RE = \"<b>SUCCEEDED!<BR>\" + rText + \"</b></div>\";","                    var COLOR = \"#47BE02\";","                }","                else {","                    var RE = \"<b>FAILED!<BR>\" + rText + \"</b></div>\";","                    var COLOR = \"#BE0202\";","                }","                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",\"+COLOR+\",#000000);\";","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" save: \" + msgFormula[3] + \"</b></div>\"+BottBar + RollColor +\";'>\" + RE+ \"</div>\";","                sendChat('', \"/direct \" + MSG);","            });","            break;","//DC CHECK","        case \"!CHECK\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#8B4513,#8B4513,#000000);\";","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                var RawTotal = rollresult.total;","                if (msg.who == \"NPC\") RawTotal = RawTotal + 1;","                else rollresult.total = rollresult.total - 1;","                if (RawTotal < 1) RawTotal = 1;","                if (RawTotal > 20) RawTotal = 20;","                var bonus = Math.floor((msgFormula[2] - 10) / 2);","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" \" + msgFormula[3] + \" Check:</b></div>\"+BottBar + RollColor +\";'><b>\" + (RawTotal+bonus) + \"</b> (\" + RawTotal + \" + \" + bonus + \")</div>\";","                sendChat('', \"/direct \" + MSG);","","            });","            break;","//PERC","        case \"!PERC\":","            PlaySound('dice', 9000);","            var nMod = msgFormula[1];","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                var try1 = randomInteger(100);","                sendChat(msg.who, \"/direct <b>Perc Check\");","                sendChat(\"PERC\", \"/w GM <b>\" + msg.who + \" \" + [","                    [try1 < total]","                ] + \"<br>(\" + try1 + \" out of \" + total + \")\");","            });","            break;","//FOOD","        case \"!FOOD\":","            var nXp = msgFormula[1];","            var oC = findObjs({name: \"HUNGER\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (oC === undefined || oC.length === 0) {","                sendChat(msg.who, '/direct No FOOD Found, please set!');","                return;","            }","            var XP = oC.get(\"current\");","            var XPx = oC.get(\"max\");","            var total = parseInt(nXp) + parseInt(XP);","            if (total > XPx) total = XPx;","            oC.set('current', total);","            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \" ate  ●</u><b><br>HUNGER: \" + formatNumber(total) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//SLEEP","        case \"!SLEEP\":","            var attirbSleep = findObjs({name: \"SLEEPING\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (attirbSleep === undefined || attirbSleep.length === 0) {","                sendChat(msg.who, '/direct No SLEEP Found, please set!');","                return;","            }","            var CurrentSleep = attirbSleep.get(\"current\");","            var message = \"Is Sleeping\"","            if (CurrentSleep == 0) {","                attirbSleep.set('current', 1);","                var message = \"Is Sleeping\"","            }","            if (CurrentSleep == 1) {","                attirbSleep.set('current', 0);","                var message = \"Wakes Up\"","            }","            var help = lPart + \"background-color:#\" + greenC + \";'>● \" + msg.who + \" \" + message + \"  ●<b></div>\";","            sendChat('', \"/direct \" + help);","            break;","//XP","        case \"!XP\":","            var nXp = msgFormula[1];","            var oC = findObjs({name: \"XP\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            var oL = findObjs({name: \"Level\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (oC === undefined || oC.length === 0) {","                sendChat(msg.who, '/direct No XP Found, please set!');","                return;","            }","            var XP = oC.get(\"current\");","            var Level = oL.get(\"current\");","            var mXP = oC.get(\"max\");","            var total = parseInt(nXp) + parseInt(XP);","            oC.set('current', total);","            var help = OuterDiv + lPart + \"background-color:#831F29;'><u>● \" + msg.who + \" ●</u> [Level:\" + Level + \"] <br>XP Earned: \" + formatNumber(nXp) + \"<br>XP Total: \" + formatNumber(total) + \"<br>Next Level: \" + formatNumber(mXP) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//BLINDROLL","        case \"!RB\":","            PlaySound('dice', 9000);","            msg.content = MakeRollNum(msg.content, msg.inlinerolls);","            var ar = msg.inlinerolls[0];","            var Atotal = (ar.results.total);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult2 = JSON.parse(ops[0].content);","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                var skillN = \"\", i = 0, GM = \"\", RE = \"\",COLOR = \"#7DB1D1\";","                while (msgFormula[5 + i] !== undefined) {","                    skillN = skillN + \" \" + msgFormula[5 + i];","                    i++;","                }","                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" attempts </b></div>\";","                var totalAd = parseInt(Atotal) + parseInt(msgFormula[3]);","                var rText = \"<b>\" + total + \"</b> out of <b>\" + totalAd + \" </b>(\" + Atotal + \" + \" + msgFormula[3] + \")\";","                if (msgFormula[4].toUpperCase() == \"1\") {","                    if (total > 93) {","                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#B30000,#B30000,#B30000\";","                    }","                    else if (total <= 5) {","                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#00C400,#00C400,#00C400\";","                    }","                    else if (total <= totalAd) {","                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";","                    }","                    else {","                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" FAILED!<BR>\" + rText + \"</div>\";","                    }","                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");","                    if(GM !== \"\") sendChat('BlindRoll', \"/w GM \" + MSG +BottBar + RollColor + GM);","                }","                else {","                    if (total > 93) {","                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#B30000,#B30000,#B30000\";","                    }","                    else if (total <= 5) {","                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#00C400,#00C400,#00C400\";","                    }","                    else if (total <= totalAd) {","                        var RE = msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";","                    }","                    else {","                        var RE = msg.who + \" FAILED!<BR>\" + rText + \"</div>\";","                    }","                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");","                }","            });","            break;","//ROTATE","        case \"!ROTATE\":","            var selected = msg.selected;","            var i = 0;","            _.each(selected, function(obj) {","                var token = getObj('graphic', msg.selected[i]._id);","                token.set({","                    rotation: (randomInteger(360) - 1)","                });","                i++;","            });","            break;","        default:","            return;","    }","});"],"id":22},{"start":{"row":0,"column":0},"end":{"row":2308,"column":5},"action":"insert","lines":["/*global gmC PlaySound MakeRollNum TopBar state on MidBar obj BottBar getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/","on('chat:message', function(msg) {","    if (msg.type != \"api\") return;","//----CHECK CHARACTER","    var cWho = findObjs({ _type: 'character',name: msg.who})[0];","    if (cWho === undefined) {","        cWho = RollRight(msg.playerid);","        msg.who = cWho.get(\"name\");","    }","    var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","    var PRGB = hexToRgbP(PlayerBGColor);","    var PlayerBG = \"background-image:-webkit-linear-gradient(left, #000000 0%,\"+PlayerBGColor+\" 15%,\"+PlayerBGColor+\" 85%,#000000 100%);\";","    var PlayerBarColor = \"background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.8),\"+PRGB+\",\"+PRGB+\",rgba(0,0,0,0.8));\";","    var MIDBAR = MakeMid(MidBar,PlayerBGColor,PlayerBarColor);","    //","    var msgFormula = msg.content.split(/\\s+/);","    switch (msgFormula[0].toUpperCase()) {","//PIC","        case \"!PIC\":","            var piclink = msgFormula[1];","            var Pic = \"[pic](\" + piclink + \")\";","            sendChat('', \"&{template:RIFTS} {{name=\" + msg.who + \"}} {{pic=\" + Pic + \"}}\");","            break;","","//GM","        case \"!GM\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls some dice.. ●</div>\";","            sendChat('', \"/direct \" + MSG);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                var GMRW = OuterDiv + fPart + \"background-color:\" + gmC + \";'>ROLLED \" + msgFormula[1] + \":<b> \" + rollresult.total + \"</div>\";","                sendChat('ROLL', \"/w GM \" + GMRW);","            });","            break;","//PERC","        case \"!GMPERC\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#848484,#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>GM</b></div>\"+BottBar + RollColor +\";'>●Rolls Perception Check●</div>\";","            sendChat('', \"/direct \" + MSG);","            break;","        case \"!CHEST\":","            PlaySound('dice', 9000);","    \t\tvar Names = [];","    \t\tif(msg.selected == undefined) {","    \t\t\tsendChat('', \"/desc No one selected\");","    \t\t\treturn;","    \t\t}","    \t\tvar selected = msg.selected;","    \t\ti = 0;","    \t\t_.each(selected, function (obj) {","    \t\t\tvar token = getObj('graphic', msg.selected[i]._id);","    \t\t\tif(token.get(\"represents\") !== '') {","    \t\t\t\tif(token.get('subtype') !== 'token') return;","    \t\t\t\tvar oCharacter = getObj('character', token.get(\"_represents\"));","    \t\t\t\tvar name = (oCharacter.get('name'));","    \t\t\t\tNames.push(oCharacter);","    \t\t\t}","    \t\t\ti++;","    \t\t});","    \t\tvar rand = Names[Math.floor(Math.random() * Names.length)];","    \t\tvar name = (rand.get('name'));","    \t\tvar pColor = GetPColor(rand);","    \t\tvar RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+pColor+\",\"+pColor+\",#000000);\";","            var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>Event: Pick player</b></div>\"+BottBar + RollColor +\";'>● Who: \" + name + \"  ●</div>\";","            sendChat('', \"/direct \" + MSG);","            break;","//WHISPER","        case \"!WIS\":","            var nXp = msg.content.substr(msg.content.indexOf(\" \") + 1);","            var wischat = OuterDiv + iPart + \"background-color:#831F29;'><b>● \" + nXp + \" ●</div></div>\";","            sendChat('System', \"/w \" + msg.who + ' ' + wischat);","            sendChat(msg.who, \"/w GM \" + wischat);","            break;","//CREDITS","        case \"!CRED\":","            var nCred = msgFormula[1];","            var oC = findObjs({name: \"Credits\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            var Cred = oC.get(\"current\");","            var mCred = oC.get(\"max\");","            var total = parseInt(nCred) + parseInt(Cred);","            oC.set('current', total);","            var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \"  ●</u><b><br>Credits Adjust: \" + formatNumber(nCred) + \"<br>Credits Total: \" + formatNumber(total) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//SAVINGTHROW","        case \"!SAVE\":","            PlaySound('dice', 9000);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                if (msg.who == \"NPC\") total = total + 1;","                else total = total - 1;","                if (total < 1) total = 1;","                if (total > 20) total = 20;","                var rText = total + \"</b> (Needed to beat \" + msgFormula[2]+\")\";","                if (total >= msgFormula[2]) {","                    var RE = \"<b>SUCCEEDED!<BR>\" + rText + \"</b></div>\";","                    var COLOR = \"#47BE02\";","                }","                else {","                    var RE = \"<b>FAILED!<BR>\" + rText + \"</b></div>\";","                    var COLOR = \"#BE0202\";","                }","                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",\"+COLOR+\",#000000);\";","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" save: \" + msgFormula[3] + \"</b></div>\"+BottBar + RollColor +\";'>\" + RE+ \"</div>\";","                sendChat('', \"/direct \" + MSG);","            });","            break;","//DC CHECK","        case \"!CHECK\":","            PlaySound('dice', 9000);","            var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#8B4513,#8B4513,#000000);\";","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                var RawTotal = rollresult.total;","                if (msg.who == \"NPC\") RawTotal = RawTotal + 1;","                else rollresult.total = rollresult.total - 1;","                if (RawTotal < 1) RawTotal = 1;","                if (RawTotal > 20) RawTotal = 20;","                var bonus = Math.floor((msgFormula[2] - 10) / 2);","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" \" + msgFormula[3] + \" Check:</b></div>\"+BottBar + RollColor +\";'><b>\" + (RawTotal+bonus) + \"</b> (\" + RawTotal + \" + \" + bonus + \")</div>\";","                sendChat('', \"/direct \" + MSG);","","            });","            break;","//PERC","        case \"!PERC\":","            PlaySound('dice', 9000);","            var nMod = msgFormula[1];","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                var try1 = randomInteger(100);","                sendChat(msg.who, \"/direct <b>Perc Check\");","                sendChat(\"PERC\", \"/w GM <b>\" + msg.who + \" \" + [","                    [try1 < total]","                ] + \"<br>(\" + try1 + \" out of \" + total + \")\");","            });","            break;","//FOOD","        case \"!FOOD\":","            var nXp = msgFormula[1];","            var oC = findObjs({name: \"HUNGER\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (oC === undefined || oC.length === 0) {","                sendChat(msg.who, '/direct No FOOD Found, please set!');","                return;","            }","            var XP = oC.get(\"current\");","            var XPx = oC.get(\"max\");","            var total = parseInt(nXp) + parseInt(XP);","            if (total > XPx) total = XPx;","            oC.set('current', total);","            var help = lPart + \"background-color:#\" + greenC + \";'><u>● \" + msg.who + \" ate  ●</u><b><br>HUNGER: \" + formatNumber(total) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//SLEEP","        case \"!SLEEP\":","            var attirbSleep = findObjs({name: \"SLEEPING\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (attirbSleep === undefined || attirbSleep.length === 0) {","                sendChat(msg.who, '/direct No SLEEP Found, please set!');","                return;","            }","            var CurrentSleep = attirbSleep.get(\"current\");","            var message = \"Is Sleeping\"","            if (CurrentSleep == 0) {","                attirbSleep.set('current', 1);","                var message = \"Is Sleeping\"","            }","            if (CurrentSleep == 1) {","                attirbSleep.set('current', 0);","                var message = \"Wakes Up\"","            }","            var help = lPart + \"background-color:#\" + greenC + \";'>● \" + msg.who + \" \" + message + \"  ●<b></div>\";","            sendChat('', \"/direct \" + help);","            break;","//XP","        case \"!XP\":","            var nXp = msgFormula[1];","            var oC = findObjs({name: \"XP\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            var oL = findObjs({name: \"Level\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","            if (oC === undefined || oC.length === 0) {","                sendChat(msg.who, '/direct No XP Found, please set!');","                return;","            }","            var XP = oC.get(\"current\");","            var Level = oL.get(\"current\");","            var mXP = oC.get(\"max\");","            var total = parseInt(nXp) + parseInt(XP);","            oC.set('current', total);","            var help = OuterDiv + lPart + \"background-color:#831F29;'><u>● \" + msg.who + \" ●</u> [Level:\" + Level + \"] <br>XP Earned: \" + formatNumber(nXp) + \"<br>XP Total: \" + formatNumber(total) + \"<br>Next Level: \" + formatNumber(mXP) + \"</div>\";","            sendChat('', \"/direct \" + help);","            break;","//BLINDROLL","        case \"!RB\":","            PlaySound('dice', 9000);","            msg.content = MakeRollNum(msg.content, msg.inlinerolls);","            var ar = msg.inlinerolls[0];","            var Atotal = (ar.results.total);","            sendChat('', \"/roll [[\" + msgFormula[1] + \"]]\", function(ops) {","                var rollresult2 = JSON.parse(ops[0].content);","                var rollresult = JSON.parse(ops[0].content);","                total = rollresult.total;","                var skillN = \"\", i = 0, GM = \"\", RE = \"\",COLOR = \"#7DB1D1\";","                while (msgFormula[5 + i] !== undefined) {","                    skillN = skillN + \" \" + msgFormula[5 + i];","                    i++;","                }","                var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                var MSG = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + msg.who + \" attempts </b></div>\";","                var totalAd = parseInt(Atotal) + parseInt(msgFormula[3]);","                var rText = \"<b>\" + total + \"</b> out of <b>\" + totalAd + \" </b>(\" + Atotal + \" + \" + msgFormula[3] + \")\";","                if (msgFormula[4].toUpperCase() == \"1\") {","                    if (total > 93) {","                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#B30000,#B30000,#B30000\";","                    }","                    else if (total <= 5) {","                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#00C400,#00C400,#00C400\";","                    }","                    else if (total <= totalAd) {","                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";","                    }","                    else {","                        var GM = \";'><B>\"+skillN.toUpperCase()+\"</B><BR> \" + msg.who + \" FAILED!<BR>\" + rText + \"</div>\";","                    }","                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");","                    if(GM !== \"\") sendChat('BlindRoll', \"/w GM \" + MSG +BottBar + RollColor + GM);","                }","                else {","                    if (total > 93) {","                        var RE = \"OBVIOUS FAILURE!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#B30000,#B30000,#B30000\";","                    }","                    else if (total <= 5) {","                        var RE = \"SPECTACULAR SUCCESS!<br><b>Rolled: \" + total + \"!</b>\";","                        COLOR = \"#00C400,#00C400,#00C400\";","                    }","                    else if (total <= totalAd) {","                        var RE = msg.who + \" SUCCEEDED!<BR>\" + rText + \"</div>\";","                    }","                    else {","                        var RE = msg.who + \" FAILED!<BR>\" + rText + \"</div>\";","                    }","                    var RollColor = \"background-image:-webkit-linear-gradient(left, #000000,\"+COLOR+\",#000000);\";","                    sendChat(msg.who, \"/direct \" + MSG + BottBar + RollColor +\";'>●<B>\"+skillN.toUpperCase()+\"</B> ●<br>\"+RE+\"</div>\");","                }","            });","            break;","//ROTATE","        case \"!ROTATE\":","            var selected = msg.selected;","            var i = 0;","            _.each(selected, function(obj) {","                var token = getObj('graphic', msg.selected[i]._id);","                token.set({","                    rotation: (randomInteger(360) - 1)","                });","                i++;","            });","            break;","        default:","            return;","    }","});/*global createObj TokenMod getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","*/","var HealthColors = HealthColors || (function () {","    'use strict';","    var version = '1.3.2',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","        Updated = \"Mar 10 2017\",","/*------------------------","ON TOKEN CHANGE/CREATE","------------------------*/","        handleToken = function (obj, prev) {","//CHECK IF TRIGGERED------------","            if(state.HealthColors.auraColorOn !== true || obj.get(\"layer\") !== \"objects\") return;","            if(obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","    //**ATTRIBUTE CHECK------------//","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if(oCharacter !== undefined) {","        //CHECK BLOOD ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'BLOODCOLOR') === undefined) CreateAttrib(oCharacter, 'BLOODCOLOR', 'DEFAULT');","                    var Blood = findObjs({name: 'BLOODCOLOR',_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseBlood = Blood.get(\"current\");","                    UseBlood = UseBlood.toString().toUpperCase();","        //CHECK DISABLED AURA/TINT ATTRIB------------","                    if(getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter, 'USECOLOR', 'YES');","                    var UseAuraAtt = findObjs({name: \"USECOLOR\",_type: \"attribute\",characterid: oCharacter.id}, {caseInsensitive: true})[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if(UseAura != \"YES\" && UseAura != \"NO\") {","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                        UseAuraAtt.set('current', \"YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                }","    //**CHECK BARS------------//","                var barUsed = state.HealthColors.auraBar;","                if(obj.get(barUsed + \"_max\") === \"\" || obj.get(barUsed + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(barUsed + \"_max\"), 10);","                var curValue = parseInt(obj.get(barUsed + \"_value\"), 10);","                var prevValue = prev[barUsed + \"_value\"];","                if(isNaN(maxValue) && isNaN(curValue)) return;","                if(maxValue === \"\" || curValue === \"\" || prevValue === \"\" ) return;","        //CALC PERCENTAGE------------","                var perc = Math.round((curValue / maxValue) * 100);","                var percReal = Math.min(100, perc);","    //**CHECK MONSTER OR PLAYER------------//","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","                var GM = '', PC = '';","                var markerColor = PercentToHEX(Math.min(100, percReal));","                var pColor = '#ffffff';","        //IF PLAYER------------","                if(type == 'Player' && state.HealthColors.PCAura !== false) {","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if(player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    PC = state.HealthColors.PCNames;","                    if(percReal > state.HealthColors.auraPercPC || curValue === 0) SetAuraNone(obj);","                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","        //IF MONSTER------------","                else if(type == 'Monster' && state.HealthColors.NPCAura !== false) {","                    GM = state.HealthColors.GM_NPCNames;","                    PC = state.HealthColors.NPCNames;","                    if(percReal > state.HealthColors.auraPerc || curValue === 0) SetAuraNone(obj);","                    else if(UseAura !== \"NO\") TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","        //SET SHOW NAMES------------","                if(GM != 'Off') {","                    GM = (GM == \"Yes\") ? true : false;","                    obj.set({'showname': GM});","                }","                if(PC != 'Off') {","                    PC = (PC == \"Yes\") ? true : false;","                    obj.set({'showplayers_name': PC});","                }","    //**SPURT FX------------//","                if(state.HealthColors.FX == true && obj.get(\"layer\") == \"objects\" && UseBlood !== \"OFF\") {","                    var HurtColor, HealColor, HITS, FX, aFX, FXArray = [];","                    var amount = Math.abs(curValue - prevValue);","                    var HitSizeCalc = Math.min((amount / maxValue) * 4, 1);","                    var Scale = obj.get(\"height\") / 70;","                    var HitSize = Math.max(HitSizeCalc, 0.2) * (_.random(60, 100) / 100);","        //IF HEAL------------","                    if(curValue > prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHeal'}, {caseInsensitive: true})[0];","                        FX = aFX.get(\"definition\");","                        HealColor = HEXtoRGB(state.HealthColors.HealFX);","                        FX.startColour = HealColor;","                        FXArray.push(FX);","                    }","        //IF HURT------------","                    else if(curValue < prevValue) {","                        aFX = findObjs({_type: \"custfx\",name: '-DefaultHurt'}, {caseInsensitive: true})[0];","                        if(aFX) FX = aFX.get(\"definition\");","                //IF DEFAULT COLOR--","                        if(UseBlood === \"DEFAULT\" || UseBlood === undefined) {","                            HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                            FX.startColour = HurtColor;","                            FXArray.push(FX);","                        }","                //ELSE CUSTOM COLOR/FX--","                        else if(UseBlood !== \"DEFAULT\" && UseBlood !== undefined) {","                            HurtColor = HEXtoRGB(UseBlood);","                    //IF CUSTOM COLOR--","                            if(_.difference(HurtColor, [0, 0, 0, 0]).length !== 0) {","                                FX.startColour = HurtColor;","                                FXArray.push(FX);","                                }","                    //ELSE ASSUME CUSTOM FX--","                            else {","                                var i = UseBlood.split(/,/);","                                _.each(i, function (FXname) {","                                    aFX = findObjs({_type: \"custfx\",name: FXname}, {caseInsensitive: true})[0];","                                    if(aFX) {","                                        FX = aFX.get(\"definition\");","                                        FXArray.push(FX);","                                    }","                                    else GMW(\"No FX with name \" + FXname);","                                });","                            }","                        }","                    }","                    else return;","        //SPAWN FX------------","                    _.each(FXArray, function (FX) {","                        SpawnFX(Scale, HitSize, obj.get(\"left\"), obj.get(\"top\"), FX, obj.get(\"_pageid\"));","                    });","                }","    //**SET DEAD------------","                var deadNPC = state.HealthColors.auraDead;","                var deadPC = state.HealthColors.auraDeadPC;","                if(curValue <= 0 && deadNPC === true && type == 'Monster') {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else if(curValue <= 0 && deadPC === true && type == 'Player') {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if(state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                }","                else obj.set(\"status_dead\", false);","            }","        },","/*------------------------","CHAT MESSAGES","------------------------*/","        handleInput = function (msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if(msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                var option = msgFormula[1];","                if(!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    if(option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch(msgFormula[1].toUpperCase()) {","                    case \"ON\":","                        state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                        aurahelp();","                        break;","                    case \"BAR\":","                        state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                        aurahelp();","                        break;","                    case \"TINT\":","                        state.HealthColors.auraTint = !state.HealthColors.auraTint;","                        aurahelp();","                        break;","                    case \"PERC\":","                        state.HealthColors.auraPercPC = parseInt(msgFormula[2], 10);","                        state.HealthColors.auraPerc = parseInt(msgFormula[3], 10);","                        aurahelp();","                        break;","                    case \"PC\":","                        state.HealthColors.PCAura = !state.HealthColors.PCAura;","                        aurahelp();","                        break;","                    case \"NPC\":","                        state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                        aurahelp();","                        break;","                    case \"GMNPC\":","                        state.HealthColors.GM_NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"GMPC\":","                        state.HealthColors.GM_PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCNPC\":","                        state.HealthColors.NPCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"PCPC\":","                        state.HealthColors.PCNames = msgFormula[2];","                        aurahelp();","                        break;","                    case \"DEAD\":","                        state.HealthColors.auraDead = !state.HealthColors.auraDead;","                        aurahelp();","                        break;","                    case \"DEADPC\":","                        state.HealthColors.auraDeadPC = !state.HealthColors.auraDeadPC;","                        aurahelp();","                        break;","                    case \"DEADFX\":","                        state.HealthColors.auraDeadFX = msgFormula[2];","                        aurahelp();","                        break;","                    case \"SIZE\":","                        state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                        aurahelp();","                        break;","                    case \"ONEOFF\":","                        state.HealthColors.OneOff = !state.HealthColors.OneOff;","                        aurahelp();","                        break;","                    case \"FX\":","                        state.HealthColors.FX = !state.HealthColors.FX;","                        aurahelp();","                        break;","                    case \"HEAL\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HealFX = UPPER;","                        aurahelp();","                        break;","                    case \"HURT\":","                        var UPPER = msgFormula[2];","                        UPPER = UPPER.toUpperCase();","                        state.HealthColors.HurtFX = UPPER;","                        aurahelp();","                        break;","                    default:","                        return;","                    }","                }","            }","        },","/*------------------------","FUNCTIONS","------------------------*/","    //WHISPER GM------------","        GMW = function (text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","    //SPAWN FX------------","        SpawnFX = function (Scale,HitSize,left,top,FX,pageid) {","            _.defaults(FX, {","                \"maxParticles\": 100,","                \"duration\": 100,","                \"size\": 100,","                \"sizeRandom\": 100,","                \"lifeSpan\": 100,","                \"lifeSpanRandom\": 100,","                \"speed\": 0,","                \"speedRandom\": 0,","                \"angle\": 0,","                \"angleRandom\": 0,","                \"emissionRate\": 100,","                \"startColour\": [255,255,255,1],","                \"endColour\": [0,0,0,1],","                \"gravity\": {\"x\": 0,\"y\": 0.0},","            });","            var newFX = {","                \"maxParticles\": FX.maxParticles * HitSize,","                \"duration\": FX.duration * HitSize,","                \"size\": FX.size * Scale / 2,","                \"sizeRandom\": FX.sizeRandom * Scale / 2,","                \"lifeSpan\": FX.lifeSpan,","                \"lifeSpanRandom\": FX.lifeSpanRandom,","                \"speed\": FX.speed * Scale,","                \"speedRandom\": FX.speedRandom * Scale,","                \"angle\": FX.angle,","                \"angleRandom\": FX.angleRandom,","                \"emissionRate\": FX.emissionRate * HitSize * 2,","                \"startColour\": FX.startColour,","                \"endColour\": FX.endColour,","                \"gravity\": {\"x\": FX.gravity.x * Scale,\"y\": FX.gravity.y * Scale},","            };","            spawnFxWithDefinition(left,top,newFX,pageid);","        },","    //DEATH SOUND------------","        PlayDeath = function (trackname) {","            if(trackname.indexOf(\",\") > 0) {","                var tracklist = trackname.split(\",\");","                var RandTrackName = tracklist[Math.floor(Math.random() * tracklist.length)];","            }","            else RandTrackName = trackname;","            var track = findObjs({type: 'jukeboxtrack',title: RandTrackName})[0];","            if(track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(ScriptName + \": No track found named \" + RandTrackName);","            }","        },","    //CREATE USECOLOR ATTR------------","        CreateAttrib = function (oCharacter, attrib, value) {","            log(\"Creating \" + attrib);","            createObj(\"attribute\", {name: attrib,current: value,characterid: oCharacter.id});","        },","    //SET TOKEN COLORS------------","        TokenSet = function (obj, sizeSet, markerColor, pColor) {","            if(state.HealthColors.auraTint === true) obj.set({'tint_color': markerColor,});","            else {","                var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","                var scale = Pageon.get(\"scale_number\") / 10;","                obj.set({","                    'aura1_radius': sizeSet * scale * 1.8,","                    'aura2_radius': sizeSet * scale * 0.1,","                    'aura1_color': markerColor,","                    'aura2_color': pColor,","                    'showplayers_aura1': true,","                    'showplayers_aura2': true,","                });","            }","        },","    //HELP MENU------------","        aurahelp = function () {","            var img = \"background-image: -webkit-linear-gradient(-45deg, #a7c7dc 0%,#85b2d3 100%);\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; ' + img + ' color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage(PC/NPC): <a ' + style + '\" href=\"!aura perc ?{PCPercent?|100} ?{NPCPercent?|100}\">' + state.HealthColors.auraPercPC + '/'+ state.HealthColors.auraPerc +'</a><br>' + //--","                HR + //--","                'Show PC Health: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show NPC Health: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead PC: <a ' + style + 'background-color:' + (state.HealthColors.auraDeadPC !== true ? off : \"\") + ';\" href=\"!aura deadPC\">' + (state.HealthColors.auraDeadPC !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead NPC: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                HR + //--","                'GM Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                'GM Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                HR + //--","                'PC Sees all PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                'PC Sees all NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Color?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Color?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|' + state.HealthColors.auraDeadFX + '}\">' + FX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","    //OFF BUTTON COLORS------------","        ButtonColor = function (state, off, disable) {","            var color;","            if(state == \"No\") color = off;","            if(state == \"Off\") color = disable;","            return color;","        },","    //REMOVE ALL------------","        SetAuraNone = function (obj) {","            var tint = state.HealthColors.auraTint;","            if(tint === true) {","                obj.set({'tint_color': \"transparent\",});","            }","            else {","                obj.set({'aura1_color': \"\",'aura2_color': \"\",});","            }","        },","    //PERC TO RGB------------","        PercentToHEX = function (percent) {","            if(percent === 100) percent = 99;","            var r, g, b = 0;","            if(percent < 50) g = Math.floor(255 * (percent / 50)),r = 255;","            else g = 255, r = Math.floor(255 * ((50 - percent % 50) / 50));","            var HEX = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return HEX;","        },","    //HEX TO RGB------------","        HEXtoRGB = function (hex) {","            let parts = (hex || '').match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if(parts) {","                let rgb = _.chain(parts).rest().map((d) => parseInt(d, 16)).value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 0.0];","        },","    //CHECK INSTALL & SET STATE------------","        checkInstall = function () {","            log('<' + ScriptName + ' v' + version + ' Ready [Updated: ' + Updated + ']>');","            if(!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {schemaVersion: schemaVersion};","                state.HealthColors.version = version;","            }","        //CHECK STATE VALUES","            if(_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if(_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if(_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if(_.isUndefined(state.HealthColors.auraPercPC)) state.HealthColors.auraPercPC = 100; //precent to start showing PC","            if(_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if(_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if(_.isUndefined(state.HealthColors.auraDeadPC)) state.HealthColors.auraDeadPC = true; //show dead X status PC","            if(_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status NPC","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if(_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if(_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            //-----------------","            if(_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if(_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if(_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if(_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","            if(_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","        //TokenMod CHECK","            if('undefined' !== typeof TokenMod && TokenMod.ObserveTokenChange) {","                TokenMod.ObserveTokenChange(handleToken);","            }","            var FXHurt = findObjs({_type: \"custfx\",name: \"-DefaultHurt\"}, {caseInsensitive: true})[0];","            var FXHeal = findObjs({_type: \"custfx\",name: \"-DefaultHeal\"}, {caseInsensitive: true})[0];","        //DEFAULT FX CHECK","        if(!FXHurt) {","                log(ScriptName + ' <Creating Default Hurt FX>');","                var Hurt = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 3,","                    \"lifeSpan\": 25,","                    \"lifeSpanRandom\": 5,","                    \"speed\": 8,","                    \"speedRandom\": 3,","                    \"gravity\": {\"x\": 0.01,\"y\": 0.65},","                    \"angle\": 270,","                    \"angleRandom\": 25,","                    \"emissionRate\": 100,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHurt\",definition: Hurt});","            }","            if(!FXHeal) {","                log(ScriptName + ' <Creating Default Heal FX>');","                var Heal = {","                    \"maxParticles\": 150,","                    \"duration\": 50,","                    \"size\": 10,","                    \"sizeRandom\": 15,","                    \"lifeSpan\": 50,","                    \"lifeSpanRandom\": 30,","                    \"speed\": 0.5,","                    \"speedRandom\": 2,","                    \"angle\": 0,","                    \"angleRandom\": 180,","                    \"emissionRate\": 1000,","                    \"startColour\": [0, 0, 0, 0],","                    \"endColour\": [0, 0, 0, 0],","                };","                createObj('custfx', {name: \"-DefaultHeal\",definition: Heal});","            }","        },","    //OUTSIDE CALL------------","        UpdateToken = function (obj, prev) {","            if (obj.get(\"type\") === \"graphic\") handleToken(obj, prev);","            else GMW(\"Script sent non-Token to be updated!\");","        },","    //REGISTER TRIGGERS------------","        registerEventHandlers = function () {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","            on('add:token', function (t) {","                _.delay(() => {","                    let token = getObj('graphic', t.id),","                    prev = JSON.parse(JSON.stringify(token));","                    handleToken(token, prev);","                }, 400);","            });","        };","/*------------------------","RETURN OUTSIDE FUNCTIONS","------------------------*/","    return {","        Update: UpdateToken,","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function () {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});on(\"change:graphic\", function(obj, prev) {","    if(obj.get(\"name\") == \"NR\" || Campaign().get(\"turnorder\") == \"\") return;","    var degs;","    if(obj.get(\"left\") != prev.left || obj.get(\"top\") != prev.top) {","         if(obj.get(\"layer\") == \"objects\") {","            var movex = obj.get(\"left\") - prev.left;","            var movey = obj.get(\"top\") - prev.top;","            if(movey != 0) {","                degs = Math.atan(movex/movey) * 57.29577;","                if(movey < 0) degs = 360-degs%360;","                else degs = 180-degs%360;","            }","            else if(movex < 0)degs = 270;","            else degs = 90;","            degs = degs - degs%1;","            if (degs > 360) degs = degs-360;","            obj.set(\"rotation\", degs);","        }","    }","});on(\"change:graphic\", function(obj) {","    var gmnotes = decodeURI(obj.get('gmnotes'));","    var oCharacter = getObj('character', obj.get(\"_represents\"));","    if((obj.get(\"name\") !== \"\" && gmnotes !== \"\") || oCharacter !== undefined) return;","    obj.set('gmnotes', '{ATTACKS}5{/ATTACKS}<br>' +","    '{INIT}1{/INIT}<br>' +","    '{DAM}1{/DAM}<br>' +","    '{STRK}1{/STRK}<br>' +","    '{ABIL1}1d20+@{STRK}~1d6+@{DAM}~att1~NAME1{/ABIL1}<br>' +","    '{ABIL2}1d20+@{STRK}~1d6+@{DAM}~att2~NAME2{/ABIL2}<br>' +","    '{ABIL3}1d20+@{STRK}~3d6+@{DAM}~Rifle~Rifle{/ABIL3}<br>' +","    '{ABIL4}1d20+@{STRK}~2d6+@{DAM}~Pistol~Pistol{/ABIL4}');","});","on('chat:message', function(msg) {","    if (msg.type == 'api' && msg.content.indexOf('!build') !== -1) {","        if (msg.selected == undefined) {","            sendChat(\"IMPORT\", \"/w GM /desc No one selected\");","            return;","        }","        var selected = msg.selected;","        //----------loop tokens","        i = 0;","        _.each(selected, function(obj) {","            var token = getObj('graphic', msg.selected[i]._id);","            var MonsterName = token.get(\"name\");","            var CheckSheet = findObjs({_type: \"character\",name: MonsterName});","            // DO NOT CREATE IF SHEET EXISTS","            if (CheckSheet.length > 0) {","                sendChat(\"IMPORT\", \"/w GM This monster already exists.\");","                return;","            }","            var Character = createObj(\"character\", {avatar: token.get(\"imgsrc\"),name: MonsterName,archived: false});","            token.set(\"represents\", Character.id);","            token.set(\"name\", MonsterName);","            setatt(token, Character);","            setDefaultTokenForCharacter(Character, token);","            sendChat(\"IMPORT\", \"/w GM \"+MonsterName+\" created.\");","            i++;","        });","    }","});","","//----------------------","function setatt(token, Character) {","    var bar1m = parseInt(token.get(\"bar1_max\"));","    var bar2m = parseInt(token.get(\"bar2_max\"));","    token.set('flipv', !token.get('flipv'));","    createObj(\"attribute\", {name: \"A-BODY\",current: bar1m,max: bar1m,characterid: Character.id});","    createObj(\"attribute\", {name: \"HP\",current: bar2m,max: bar2m,characterid: Character.id});","    var STAT = UnwrapString(\"ATTACKS\", \"~\", token);","    createObj(\"attribute\", {name: \"ATT\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});","    var STAT = UnwrapString(\"INIT\", \"~\", token);","    createObj(\"attribute\", {name: \"INIT\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});","    var STAT = UnwrapString(\"DAM\", \"~\", token);","    createObj(\"attribute\", {name: \"DAM\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});","    var STAT = UnwrapString(\"STRK\", \"~\", token);","    createObj(\"attribute\", {name: \"STRK\",current: STAT.uArray[0],max: STAT.uArray[0],characterid: Character.id});","    Create(\"ABIL1\",token,Character);","    Create(\"ABIL2\",token,Character);","    Create(\"ABIL3\",token,Character);","    Create(\"ABIL4\",token,Character);","    Create(\"ABIL5\",token,Character);","    Create(\"ABIL6\",token,Character);","}","//-----------------------","function Create(BIT,token,Character){","    var Ability = UnwrapString(BIT, \"~\", token);","    if(Ability.uArray[0] == undefined || Ability.uArray[0] == \"\") return;","    createObj(\"ability\", {","        name: Ability.uArray[3].toUpperCase(),","        description: \" \",","        action: \"!attack --[[\"+Ability.uArray[0]+\"]] --[[\"+Ability.uArray[1]+\"]] --\"+Ability.uArray[2],","        istokenaction: true,","        characterid: Character.id","    });","}","//-----------------------","function UnwrapString(stringname, separator, obj) {","    var uArray = new Array();","    var gmnotes = decodeURI(obj.get('gmnotes'));","    gmnotes = UnescapeString(gmnotes);","    var startPos = gmnotes.indexOf(\"{\" + stringname + \"}\");","    if (startPos == -1)","        return {","            uArray: uArray","        };","    var endPos = gmnotes.indexOf(\"{/\" + stringname + \"}\");","    return {","        uArray: gmnotes.substr(startPos + stringname.length + 2, (endPos - startPos) - (stringname.length + 2)).split(separator)","    };","}","","function UnescapeString(dirtystring) {","    dirtystring = dirtystring.replace(/%3A/g, ':');","    dirtystring = dirtystring.replace(/%23/g, '#');","    dirtystring = dirtystring.replace(/%3F/g, '?');","    return dirtystring;","}","//-----------------------","on('ready', function() {","  on('add:token', function(obj) {","    var run = function(){","        var oCharacter = getObj('character', obj.get(\"_represents\"));","        if(oCharacter === undefined) return;","        var type = (oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","        if (type == 'Monster') {","            var maxValue = parseInt(obj.get(\"bar1_max\"), 10);","            var randomChange = randomIntFromInterval(70,100);","            var newAmount = Math.round(maxValue*(randomChange/100));","            obj.set(\"bar1_value\", newAmount);","        }","    }","    _.delay(run, 250);","  });","});","function randomIntFromInterval(min,max)","{","    return Math.floor(Math.random()*(max-min+1)+min);","}","//--------------------","var defaultToken = defaultToken || (function() {","\t'use strict';","\tconst version = '1.0',","\tfeedback = true,","\tcheckInstall = function() {","\t\tlog('-=> DefaultToken v'+version+' <=-');","\t},","\tgetPlayerName = function(who) {","\t\tlet match = who.match(/(.*) \\(GM\\)/);","\t\tif (match) return match[1];","        else return who;","\t},","\tsetDefaultTokenForList = function (list) {","\t\tlist.forEach(function (pair) {","\t\t\tsetDefaultTokenForCharacter(pair[0], pair[1]);","\t\t});","\t},","\tparseOpts = function(content, hasValue) {","\t\tlet args, kv, opts = {};","\t\targs = _.rest(content.split(/\\s+--/));","\t\tfor (let k in args) {","\t\t\tkv = args[k].split(/\\s(.+)/);","\t\t\tif (_.contains(hasValue, kv[0])) {","\t\t\t\topts[kv[0]] = kv[1];","\t\t\t} else {","\t\t\t\topts[args[k]] = true;","\t\t\t}","\t\t}","\t\treturn opts;","\t},","\thandleInput = function(msg) {","\t\tif (msg.type === 'api' && msg.content.search(/^!default-token\\b/) !== -1 && msg.selected) {","\t\t\tconst tokensAndChars = _.chain(msg.selected)","\t\t\t\t.map(a => getObj('graphic', a._id))","\t\t\t\t.filter(o => o.get('_subtype') === 'token')","\t\t\t\t.map(o => [o.get('represents'), o])","\t\t\t\t.map(a => [getObj('character', a[0]), a[1]])","\t\t\t\t.filter(a => a[0])","\t\t\t\t.value();","\t\t\tconst opts = _.defaults(parseOpts(msg.content, ['wait']), {wait: '0'});","\t\t\t_.delay(setDefaultTokenForList, opts.wait, tokensAndChars);","\t\t\tif (feedback && msg.selected) {","\t\t\t\tlet output = '/w \"' + getPlayerName(msg.who) +","\t\t\t\t\t'\" Default tokens set for characters ' +","\t\t\t\t\t_.map(tokensAndChars, a => a[0].get('name')).join(', ') + '.'","\t\t\t\tsendChat('API', output);","\t\t\t}","\t\t}","\t\treturn;","\t},","","\tregisterEventHandlers = function() {","\t\ton('chat:message', handleInput);","\t};","","\treturn {","\t\tCheckInstall: checkInstall,","\t\tRegisterEventHandlers: registerEventHandlers","\t};","}());","","on('ready',function() {","\t'use strict';","\tdefaultToken.CheckInstall();","\tdefaultToken.RegisterEventHandlers();","});//PAGECHANGE","on(\"change:campaign:playerpageid\", function (obj, prev) {","    var currentPage = getObj(\"page\", Campaign().get(\"playerpageid\"));","    var pName = currentPage.get(\"name\");","    var help = OuterDiv+iPart + \"color: #B3B3B3; background-image: url(\"+page_img+\");'><b>● Page: \"+pName+\" ●</div></div>\";","\tsendChat('GM', \"/direct \" + help);","});","//LOG WHISPER","on('chat:message', function(whisper) {","    if(whisper.type == 'whisper') {","        var who=getObj('player',whisper.playerid);","        if (who !== undefined) sendChat(\"system\", '/w GM <b>' + whisper.who + ' to ' + whisper.target_name + '-<br>' + TopBar+\";'>\"+whisper.content+\"</div>\");","    };","});","/*------------------","READY","------------------*/","on('ready', function () {","    'use strict';","    var currentPage = getObj(\"page\", Campaign().get(\"playerpageid\"));","    var currentTime = new Date();","    var timestamp = (new Date(currentTime));","    sendChat('API', \"/w GM &{template:RIFTS} {{name=API STARTED}} {{<small>Time:=<small>\" + timestamp + \"}}\");","    //----------------","    var getCleanImgsrc = function (imgsrc) {","        var parts = imgsrc.match(/(.*\\/images\\/.*)(thumb|med|original|max)(.*)$/);","        if(parts) {","            return parts[1] + 'thumb' + parts[3];","        }","        return;","    };","    _.chain(findObjs({type: 'character'})).filter(c => '' === c.get('avatar')).each(c => {c.get('defaulttoken', (dt) => {","            let deftoken = JSON.parse(dt);","            if(deftoken && _.has(deftoken, 'imgsrc')) {","                let imgsrc = getCleanImgsrc(deftoken.imgsrc);","                if(imgsrc) {","                    c.set('avatar', imgsrc);","                    sendChat('', `/w gm <div><img src=\"${imgsrc}\" style=\"max-width: 3em;max-height: 3em;border:1px solid #333; background-color: #999; border-radius: .2em;\"><code>Updated ${c.get('name')}</code></div>`);","                }","            }","        });","    });","});","/*------------------","DIVS","------------------*/","var font = 'Arial';","var greenC = \"#438032\";","var gmC = \"#22571F\";","var redC = \"#A34645\";","var grayC = \"#666666\";","var bShadow =\"3px 3px 1px #707070\";","var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","//---ImgLinks","var page_img = \"http:\\\\//1.bp.blogspot.com/-7AhozEGVBBA/T6aqzDZcVOI/AAAAAAAAAQQ/TBH76givpIs/s1600/TEXleatherthree.png\";","//---START BOXES CODE","var fPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 1px 1px; margin-top: 0.1em; border: 1px solid #000; border-radius: 0px 0px 10px 10px; color: #FFF;\";","var lPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; font-size: 9pt;  text-align: left; vertical-align: middle; background-position:center; padding: 1px 1px; margin-top: 0.2em; border: 2px solid #000; border-radius: 8px 8px 8px 8px; color: #FFF;\";","var hPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; font-size: 7pt; text-align: left; vertical-align: middle; background-position:center; padding: 1px 1px; margin-top: 0.2em; border: 2px solid #000; border-radius: 8px 8px 8px 8px; color: #000;\";","var iPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\";  text-align: center; vertical-align: middle; padding: 0px; margin-top: 0.1em; border: 1px solid #000; border-radius: 10px 10px 10px 10px; color: #FFF;\";","var iPart2 = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\";font-size: 10pt; text-align: left; vertical-align: middle; padding: 0px; margin-top: 0.1em; border: 1px solid #000; border-radius: 10px 10px 10px 10px; color: #FFF;\";","var gPart = \"<div style='box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #919191; border-radius: 8px 8px 8px 8px; color: #FFF;\";","var ePart = \"<div style='box-shadow: \"+bShadow+\"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #000; border-radius: 8px 8px 8px 8px; color: #000;\";","var brPart = \"<div style='font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; border: 1px solid #000; color: #FFF;\";","var OuterDiv = '<div style=\"box-shadow: '+bShadow+'; border: 2px solid black;  text-align: center; vertical-align: middle; background-color: gray; padding: 3px 3px 3px 3px; border-radius: 10px 10px 10px 10px;\">';","/*------------------","Generic Functions","------------------*/","function hexToRgbP(hex){","    var c;","    if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){","        c= hex.substring(1).split('');","        if(c.length== 3){","            c= [c[0], c[0], c[1], c[1], c[2], c[2]];","        }","        c= '0x'+c.join('');","        var RGB = 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',1)';","        return RGB;","    }","    throw new Error('Bad Hex');","}","function hexToRgbA(hex){","    hex = hex.replace('#','');","    r = parseInt(hex.substring(0,2), 16);","    g = parseInt(hex.substring(2,4), 16);","    b = parseInt(hex.substring(4,6), 16);","    result = [r,g,b,1.0];","    return result;","}","//-------PLAYER COLOR","function GetPColor(Player){","\tvar cBy = Player.get('controlledby');","\tplayer = getObj('player', cBy);","\tpColor = player.get('color');","\treturn pColor;","}","function PlaySound(trackname, time, stop) {","    var trackname = trackname.toUpperCase()","    var track = findObjs({type: 'jukeboxtrack', title: trackname})[0];","    if(track) {","        track.set('softstop',false);","        track.set('playing',true);","    }","    else {","        log(\"No track found \"+ trackname);","    }","}","//-----","function SetStat(Player1,Atype,cost){","\tvar ammoC = parseInt(cost);","\tvar ammo0 = findObjs({_type: \"attribute\",name: Atype,_characterid: Player1.id}, {caseInsensitive: true})[0];","\tif(ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\tvar curPageID = findObjs({_type: \"campaign\"})[0].get(\"playerpageid\");","\tvar curPage = findObjs({_type: \"page\", _id: curPageID})[0];","\tvar tokens = findObjs({_type: \"graphic\", layer:\"objects\", _pageid: curPageID, name: Player1.get(\"name\")});","\t_.each(tokens, function(id) {","\t\tvar who = getObj('character', id.get(\"_represents\"));","\t\tvar aSet = findObjs({_type: \"attribute\",name: Atype,_characterid: who.id} , {caseInsensitive: true});","\t\taSet = aSet[0].id;","\t\tid.set(\"bar3_link\", aSet);","\t\tid.set('bar3_value', cAmmo);","\t\tid.set('bar3_max', mAmmo);","\t});","\tif (cAmmo < 0 || cAmmo < ammoC) {","\t\tcAmmo = \"0\";","\t\tammo0.set('current', cAmmo);","\t}","\telse if (cAmmo <= 2 || cAmmo < ammoC) {","\t\tcAmmo = cAmmo - ammoC;","\t\tammo0.set('current', cAmmo);","\t}","\telse {","\t\tcAmmo = cAmmo - ammoC;","\t\tammo0.set('current', cAmmo);","\t}","}","//RANDOM IMAGE","function randomFromTo(from, to){","\treturn Math.floor(Math.random() * (to - from + 1) + from);","}","//make number","function formatNumber (num) {","\treturn num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");","}","//set character name","function RollRight (whoPC) {","\tvar character = findObjs({type: 'character',controlledby: whoPC})[0];","\treturn character;","}","//find level","function fLevel() {","\tvar characters = findObjs({_type: \"character\"});","\tvar chat = '';","\tvar lTotal = 0;","\tvar count = 0;","\t_.each(characters, function (id) {","\t\tvar aa = id.get(\"inplayerjournals\");","\t\tvar aSet = findObjs({_type: \"attribute\",name: \"Level\",_characterid: id.id}, {caseInsensitive: true})[0];","\t\tif(aa == \"all\" && aSet !== undefined) {","\t\t    var aName = findObjs({_type: \"attribute\",name: \"Name\",_characterid: id.id}, {caseInsensitive: true})[0];","\t\t    //log(aSet.get(\"current\") + \" \" +aName.get(\"current\"));","\t\t\tvar a2 = parseInt(aSet.get(\"current\"));","\t\t\tcount = count + 1;","\t\t\tlTotal = lTotal + a2;","\t\t}","\t});","\tlTotal = Math.round(lTotal / count);","\treturn lTotal;","}","//parse loot","function myrolls(loota) {","\tfor(var i = 0; i < loota.length; i++) {","\t\tvar ii = (loota[i].indexOf(\"[[\") != -1);","\t\tif(ii == true) {","\t\t\tvar num = loota[i].replace(/[^0-9]/g, '');","\t\t\tvar res1 = num.substr(0, 1);","\t\t\tvar res2 = num.substr(1, 4);","\t\t\tvar ia = 1;","\t\t\tvar tot = 0;","\t\t\twhile(ia <= res1) {","\t\t\t\tvar tot = tot + randomInteger(res2);","\t\t\t\tia++;","\t\t\t}","\t\t\treturn tot;","\t\t}","\t}","}","function DT(text){","    sendChat('API', \"/w GM \" + text);","}","function MakeRollNum(cont, inline) {","    return _.chain(inline)","        .reduce(function (m, v, k) {","        m['$[[' + k + ']]'] = v.results.total || 0;","        return m;","    }, {})","        .reduce(function (m, v, k) {","        d20 = m.replace(k, v);","        return m.replace(k, v);","    },","        cont).value();","};//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global OuterDiv PlaySound TopBar iPart MidBar BottBar MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","\t\tvar PRGB = hexToRgbP(PlayerBGColor);","        var PlayerBarColor = \"background-image: -webkit-linear-gradient(left, rgba(0,0,0,0.8),\"+PRGB+\",\"+PRGB+\",rgba(0,0,0,0.8));\";","\t\tvar MIDBAR = MakeMid(MidBar,PlayerBGColor,PlayerBarColor);","\t\tvar RollColor = \"background-image:-webkit-linear-gradient(left, #000000,#820101,#000000);\";","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar MainSayDiv = \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 2px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar AmmoDiv =  \"<div style='width: 95%; margin: 0px auto; box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 1;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";","\t\tif (miss == 1)  DTOTALS = \"\";","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t    var CritCheer = '<div style=\"border: 1px solid #666666; border-radius: 20px; width: 99%; height: 40px; overflow: hidden; position: relative;\"><img src=\"https://media.giphy.com/media/11sBLVxNs7v6WA/giphy.gif\" style=\"position: absolute; top:-35px; left:0px;\"/></div>';","\t\t\tDamageTotal = \"<a style='color:RED'><strong>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a><br>\"+CritCheer;","\t\t\tAttackTotal = \"<a style='color:RED'><strong>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b><br>';","\t\t\tRollColor = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";","//--Lucky roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tRollColor = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//Fumble roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><strong style='font-size: 130%;'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tRollColor = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tammoT = AmmoDiv + \"background-color:#B82A2A;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t\tMain = Main + ammoT;","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tammoT = AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t\tMain = Main + ammoT;","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","        var pad = \"\";","        if(BottomText == \"\") var pad = \"padding: 5px 1px;\";","\t\tvar MsgBox = TopBar + RollColor +\";'></div>\"+ MIDBAR +\"<b>\" + who + \"  Attacks</b></div>\"+Main+\"</div>\"+BottBar + pad + RollColor +\";'><b>\" + BottomText + \"</b></div>\";","\t\tvar SendT = MsgBox;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.6;'><strong style='font-size: 90%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 130%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn;","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"), 10);","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"), 10);","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"), 10 );","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"), 10);","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy see you and an easy target!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in Wall/Floor/Tree/Off Balance/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];","/*------------------","GREET","------------------*/","var DXGREET = DXGREET || (function() {","    'use strict';","    var Greet = function(obj) {","            var name = obj.get(\"_displayname\");","            var isGM = \"\";","            var currentTime = new Date();","            var timestamp = (new Date(currentTime));","            if(playerIsGM(obj.id) === true) isGM = \" [GM]\";","            if(obj.get(\"_online\") == true) {","                setTimeout(function() {","                    sendChat('', \"&{template:RIFTS} {{name=Hello}} {{<small>Who:=\" + name + isGM + \"}}{{<small>Time:=<small>\" + timestamp+\"}}\");","                }, 3000);","            }","            if(obj.get(\"_online\") == false) {","                setTimeout(function() {","                    sendChat('', \"&{template:RIFTS} {{name=Goodbye}} {{<small>Who:=\" + name + isGM + \"}}{{<small>Time:=<small>\" + timestamp+\"}}\");","                }, 500);","            }","        },","        registerEventHandlers = function() {","            on('change:player:_online', Greet);","        };","    return {","        RegisterEventHandlers: registerEventHandlers","    };","}());","on('ready', function() {","    'use strict';","    DXGREET.RegisterEventHandlers();","});on(\"chat:message\", function(msg) {","    var tLOOT = '';","    var msgTxt = msg.content;","    if(msg.type == \"api\" && msgTxt.indexOf(\"!enc\") !== -1) {","        var msgFormula = msgTxt.split(\" \");","        //------------------","        var aLoottext = fPart + \"background-color:#0B3B0B;'>● Encounter roll ●</div>\";","        var croll = findObjs({_type: 'character', name: 'World'})[0];","        var oHour = findObjs({name: \"Hour\",_type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];","        var oHourNum = parseInt(oHour.get(\"current\"));","        dType = \"Day\";","        timeChance = 1;","        if(oHourNum >= 20 || oHourNum <= 5 ) { dType = \"Night\"; timeChance = 2; }","        NEchance = 49;","        CEchance = 1*timeChance;","        var loots = randomInteger(100);","        //------------------","        var img = \"http:\\\\//i.imgur.com/hc669Eb.jpg\";","        if(loots >= NEchance) {","            //EVENT ENCOUNTER","            var aLoottext = fPart + \"background-color:#852828;'>● \"+dType+ \" Event ●</div>\";","            sendChat('', \"/desc \" + aLoottext);","            var items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JNzlykL6Jb-5PpXsahe\"});","            var rand1 = randomInteger(items.length);","            var chosen = items[rand1 - 1];","            var lootE = chosen.get(\"name\");","            tLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\" + img + \");'><b><u>\"+NEchance+\" EVENT:</b></u> <a style='color:#888'>#\" + rand1 + \" (\" + loots + \")</a><br>\" + lootE + \"</div>\";","        } else if (loots <= NEchance){","            //REAL ENCOUNTER","            var aLoottext = fPart + \"background-color:#852828;'>● \"+dType+ \" Encounter! ● </div>\";","            sendChat('', \"/desc \" + aLoottext);","            var items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JNy1bCgcImoZvPziK7C\"});","            var rand1 = randomInteger(items.length);","            var chosen = items[rand1 - 1];","            var lootE = chosen.get(\"name\");","            tLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\" + img + \");'><b><u>\"+CEchance+\" CREATURE:</b></u> <a style='color:#888'>#\" + rand1 + \" (\" + loots + \")</a><br>\" + lootE + \"</div>\";","        }","        else {","            tLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\" + img + \");'><b><u>\"+CEchance+\" \"+loots+\" NOTHING</div>\";","        }","        sendChat('', '/w gm ' + tLOOT);","    }","});","on(\"chat:message\", function(msg) {","    var msgTxt = msg.content;","    if(msg.type == \"api\" && msgTxt.indexOf(\"!A\") !== -1) {","","    }","});","","function getFolderObjects(objs) {","    return _.map(objs, function(o) {","        if (_.isString(o)) {","            return getObj('handout', o) || getObj('character', o);","        }","        if (_.isArray(o.i)) {","            o.i = getFolderObjects(o.i);","            return o;","        }","    });","}","","function getObjectFromFolder(path, folderData, getFolder) {","    if (path.indexOf('.') < 0) {","        if (getFolder) {","            return _.find(folderData, (o) => o.n && o.n.toLowerCase() === path.toLowerCase()).i;","        }","        return _.find(folderData, (o) => o.get && o.get('name').toLowerCase() === path.toLowerCase());","    }","    path = path.split('.');","    var folder = path.shift();","    path = path.join('.');","    folderData = _.find(folderData, (o) => o.n && o.n.toLowerCase() === folder.toLowerCase());","    return getObjectFromFolder(path, folderData.i);","}function FoodSet(Hours) {","    var tFood = \"\";","    var tFood1 = '';","    var tFood1= '';","    var characters = findObjs({_type: \"character\" ,inplayerjournals: \"all\"});","    _.each(characters, function(id) {","        color = \"#ABDB27\";","        var aName = findObjs({_type: \"attribute\",name: \"Name\",_characterid: id.id}, {caseInsensitive: true})[0];","        var aFood = findObjs({ _type: \"attribute\",name: \"HUNGER\",_characterid: id.id}, {caseInsensitive: true})[0];","        var HungH = findObjs({_type: \"attribute\",name: \"HUNGERH\",_characterid: id.id}, {caseInsensitive: true})[0];","        if(HungH && aFood !== undefined) {","            var Hperc = HungH.get(\"current\");","            var FoodMax = aFood.get(\"max\")","            var FoodCount = parseFloat(aFood.get(\"current\")-(Hperc*Hours));","            if (FoodCount > FoodMax) FoodCount = FoodMax;","            if (FoodCount < 0) FoodCount = 0;","            FoodCount = Math.round(FoodCount.toFixed(1));","            var FoodPercentage = Math.round(FoodCount)","            var name = aName.get(\"current\") + \"(\"+FoodPercentage+\"/\"+FoodMax+\")\";","            aFood.set('current', FoodCount);","            if (FoodCount <= FoodMax*0.15) {","                tFood = tFood.concat(\"{{<small>\"+name+ \":=<small>is starving!<br>(-8 on all rolls -60% skills).}}\");","                color = \"#F7DB5C\"","            }","            else if (FoodCount <= FoodMax*0.30) {","                tFood = tFood.concat(\"{{<small>\"+name+ \":=<small>needs to eat.<br>(-2 on all rolls -30% skills).}}\");","                color = \"#F7DB5C\"","            }","            else if (FoodCount <= FoodMax*0.45) {","                tFood = tFood.concat(\"{{<small>\"+name+ \":=<small>is getting hungry.}}\");","            }","            if (FoodCount <= FoodMax*0.45) {","                var a = '<div style=\"margin:5px; float:right; display:inline-block; border-radius:2px; width:40%; background-color:black; border:1px solid black; height:3px\">';","                var b = '<div style=\"border-radius: 2px; width:'+Math.round(FoodCount/FoodMax*100)+'%;background-color:'+color+';border-right:1px solid black;height:3px\"></div></div><hr>';","                tFood1 = tFood1.concat(name+\" \"+a+b);","            }","        }","    });","    var Chart = \"<div style='text-align:left; font-size:8pt; background-color:white; padding:2px; border:1px solid black;'>\"+tFood1+\"</div>\";","    sendChat('', \"&{template:RIFTS} {{name=Food}} {{color=food}}\"+tFood+\"{{Stats=\"+Chart+\"}}\");","};","function SleepSet(HoursPassed) {","    var characters = findObjs({_type: \"character\" ,inplayerjournals: \"all\"});","    var tSleep = \"\";","    var IsAsleep = \"\";","    var tFood1 = '';","    _.each(characters, function(id) {","        color = \"#A1D4E6\";","        var aName = findObjs({_type: \"attribute\",name: \"Name\",_characterid: id.id}, {caseInsensitive: true})[0];","        var aSleep = findObjs({ _type: \"attribute\",name: \"SLEEP\",_characterid: id.id}, {caseInsensitive: true})[0];","        var Sleeping = findObjs({ _type: \"attribute\",name: \"SLEEPING\",_characterid: id.id}, {caseInsensitive: true})[0];","        if(aSleep !== undefined) {","            var MaxUp = aSleep.get(\"max\");","            var HoursUp = parseFloat(+aSleep.get(\"current\"));","            var slname = aName.get(\"current\");","            var name = aName.get(\"current\") + \"(\"+HoursUp+\"/\"+MaxUp+\")\";","            var IsSleeping = Sleeping.get(\"current\");","            if (IsSleeping == 1) {","                var IsSleepingAdjust = Sleeping.get(\"max\");","                HoursUp = HoursUp - (HoursPassed * IsSleepingAdjust);","                if (HoursUp < 0) HoursUp = 0;","                IsAsleep = IsAsleep.concat(\"{{<small>\"+ slname + \":=<small> is sleeping [\"+Math.round(HoursUp/IsSleepingAdjust)+\"]}}<br>\");","            }","            else {","            var HoursUp = parseFloat(+aSleep.get(\"current\") + +HoursPassed);","            }","            if (HoursUp >= MaxUp && IsSleeping != 1) {","                tSleep = tSleep.concat(name + \":is passed out.</div>\");","            }","            else if (HoursUp > (MaxUp * 0.80) && IsSleeping != 1) {","                tSleep = tSleep.concat(\"{{<small>\"+ name + \":=<small>is barely able to stay awake!</b><br><i>[-8 on all rolls, -75% on perception rolls, -75% skills, DC PE 16 to fall asleep].}}\");","                color = \"#F7DB5C\"","            }","            else if (HoursUp > (MaxUp * 0.65) && IsSleeping != 1) {","                tSleep = tSleep.concat(\"{{<small>\"+name + \":=<small>seriously needs to sleep.</b><br><i>[-2 on all rolls, -30% on perception rolls, -30% skills, DC PE 10 to fall asleep].}}\");","                color = \"#F7DB5C\"","            }","            else if (HoursUp > (MaxUp * 0.5) && IsSleeping != 1) {","                tSleep = tSleep.concat(\"{{<small>\"+name +\":=<small>is getting sleepy.</b><br><i>[-15% on perception roll,-10% skills].}}\");","            }","            aSleep.set('current', HoursUp);","            var bar = Math.round(HoursUp/MaxUp*100);","            var bar = Math.round((MaxUp-HoursUp)/MaxUp*100);","            if (HoursUp > (MaxUp * 0.5) && IsSleeping != 1) {","                var a = '<div style=\"padding: 0px; margin:5px; float:right; display:inline-block; border-radius:2px; width:40%; background-color:black; border:1px solid black; height:3px\">';","                var b = '<div style=\"border-radius: 2px; width:'+bar+'%;background-color:'+color+';border-right:1px solid black;height:3px\"></div></div><hr>';","                tFood1 = tFood1.concat(name+\" \"+a+b);","            }","            log(tFood1)","        }","    });","    tSleep = tSleep + IsAsleep;","    var Chart = \"<div style='text-align:left; font-size:8pt; background-color:white; padding:1px; border:1px solid black;'>\"+tFood1+\"</div>\";","    var button = \"<a href='!sleep' style='line-height: 1em; border:2px solid; margin:0; padding: 3px; text-align:center; height:8px; background:#1184AB; color:#ffffff; font-size:9px;'>Sleep</a>\";","    sendChat('', \"&{template:RIFTS} {{name=Sleep    \"+button+\"}} {{color=sleep}}\"+tSleep+\"{{Stats=\"+Chart+\"}}\");","};var HR = \"<hr style='width: 40%; border: 3px double #000; margin: 2px;'>\";","var TopBar = \"<div style='width: 95%; box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 3px 0px; margin: 0px auto; border: 1px solid #000; color: #FFF;\";","var MidBar = \"<div style='width: 99%; box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 1px 0px; margin: 0px auto; border: 1px solid #000; color: #FFF;\";","var BottBar = \"<div style='width: 95%; border-radius: 0px 0px 8px 8px; box-shadow: \"+bShadow+\"; font-family: \"+font+\"; text-shadow: \"+tshadow+\"; text-align: center; vertical-align: middle; padding: 0px 1px; margin: 0px auto; border: 1px solid #000; color: #FFF;\";","//-----------","function MakeMid(MidBar,PlayerBGColor,PlayerBarColor){","        var BAR = MidBar + \"background-color:\"+ PlayerBGColor +\";\"+ PlayerBarColor +\";'>\";","        return BAR;","}on(\"chat:message\", function (msg) {","    var tLOOT = '';","    var msgTxt = msg.content;","\tif(msg.type == \"api\" && msgTxt.indexOf(\"!loot\") !== -1) {","\t\tvar msgFormula = msgTxt.split(\" \");","\t\t//---------catch non players","\t\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\t\tif(cWho === undefined) {","\t\t\tcWho = RollRight(msg.playerid);","\t\t\tmsg.who = cWho.get(\"name\");","\t\t}","\t\t//---------check credits set","\t\tvar oC = findObjs({name: \"Credits\",_type: \"attribute\",characterid: cWho.id}, {caseInsensitive: true})[0];","\t\tif(oC === undefined || oC.length === 0) {","\t\t\tsendChat(msg.who, '/direct No Credits Found, please set!');","\t\t\treturn;","\t\t}","\t\t/*------------------","        LOOT CALC","        ------------------*/","\t\telse {","\t\t\tvar aLoottext = fPart + \"background-color:##0B3B0B;'>● \" + msg.who + \" Looks for loot..  ●</div>\";","\t\t\tsendChat('', \"/direct \" + aLoottext);","\t\t\t//set times to run----------------------","\t\t\tvar x = 0;","\t\t\tvar times = msgFormula[1];","\t\t\tif(times > 20) {times = 20;}","\t\t\twhile(x < times || x < 1) {","\t\t\t\t//---------set cash or loot","\t\t\t\tvar loots = randomInteger(100);","\t\t\t\t//---------set cash or loot","\t\t\t\tlog(\"-KcVBLxjpNV8rVybDpD0\")","/*------------------","CASH LOOT","------------------*/","\t\t\t\tif(loots <= 25) {","\t\t\t\t\t//Set Cash Value---------------------------------","\t\t\t\t\tvar mColor = \"#456646\";","\t\t\t\t\tvar level = fLevel();","\t\t\t\t\tvar T = randomInteger(200)+randomInteger(50);","\t\t\t\t\t//---set big payout","\t\t\t\t\tvar BigMoney = randomInteger(100);","\t\t\t\t\tvar BigM = '';","\t\t\t\t\tif(BigMoney <= 10) {","\t\t\t\t\t\tvar BigM = (\"<a style='color:#00ff00'> BIG \");","\t\t\t\t\t\tT = (T * 20) + (150 * level);","\t\t\t\t\t\tmColor = \"#009605\";","\t\t\t\t\t}","\t\t\t\t\tvar cR = Math.floor(T * (level));","\t\t\t\t\t//give money-------------------------","\t\t\t\t\tvar credits = parseInt(oC.get(\"current\"));","\t\t\t\t\tvar credits = parseInt(credits);","\t\t\t\t\tvar total = credits + cR;","\t\t\t\t\toC.set('current', total);","\t\t\t\t\tvar gold = total.toString().replace(/\\B(?=(\\d{2})+(?!\\d))/g, \" \");","\t\t\t\t\t//tell money-------------------------","\t\t\t\t\tvar lootE = '<b><u>'+BigM+'MONEY:</a><br></b></u>' + cR + ' Credits. Your total: ' + total + ' </b>';","\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/PREQJkH.jpg\";","\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size:80px 60px; background-image: url(\"+img+\");'>\" + lootE +\"</div>\";","\t\t\t\t}","/*------------------","ITEM LOOT","------------------*/","\t\t\t\telse if(loots <= 85) {","\t\t\t\t\t//mundane loot-------------------------","\t\t\t\t\tvar items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JCg8SKoOgAP2zgFnXk_\"});","\t\t\t\t\tvar rand1 = randomInteger(items.length);","\t\t\t\t\tvar chosen = items[rand1 - 1];","\t\t\t\t\tvar loot = chosen.get(\"name\");","\t\t\t\t\tvar loot1 = loot.split(\" \");","\t\t\t\t\tvar a = myrolls(loot1);","\t\t\t\t\tvar lootE = loot.replace(/\\[.*?\\]\\]/g, a);","\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/hc669Eb.jpg\";","\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\"+img+\");'><b><u> ITEM:</b></u> <a style='color:#888'>#\"+rand1+\" (\"+loots+\")</a><br>\"+lootE+\"</div>\";","\t\t\t\t}","\t\t\t\telse if(loots <= 95) {","\t\t\t\t\t//mundane loot-------------------------","\t\t\t\t\tvar items = findObjs({_type: \"tableitem\",_rollabletableid: \"-KcVBLxjpNV8rVybDpD0\"});","\t\t\t\t\tvar rand1 = randomInteger(items.length);","\t\t\t\t\tvar chosen = items[rand1 - 1];","\t\t\t\t\tvar loot = chosen.get(\"name\");","\t\t\t\t\tvar loot1 = loot.split(\" \");","\t\t\t\t\tvar a = myrolls(loot1);","\t\t\t\t\tvar lootE = loot.replace(/\\[.*?\\]\\]/g, a);","\t\t\t\t\tvar wQualList = ['Masterwork', 'Ornate', 'Fancy', 'Average', 'Poor', 'Cheap'];","                    var wQual = wQualList[Math.floor(Math.random() * wQualList.length)];","\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/hc669Eb.jpg\";","\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\"+img+\");'><b><u> ITEM:</b></u> <a style='color:#888'>#\"+rand1+\" (\"+loots+\")</a><br>\"+wQual+\" Quality \"+lootE+\"<b> (Appraise for value)</b></div>\";","\t\t\t\t}","/*------------------","WEAPON LOOT","------------------*/","\t\t\t\telse {","\t\t\t\t\tvar items = findObjs({_type: \"tableitem\",_rollabletableid: \"-JDlef2TgoMN63HS6hT1\"});","                    var rand1 = randomInteger(items.length);","\t\t\t\t\tvar chosen = items[rand1 - 1];","\t\t\t\t\tvar loot = chosen.get(\"name\");","\t\t\t\t\tvar loot1 = loot.split(\" \");","\t\t\t\t\tvar a = myrolls(loot1);","\t\t\t\t\tvar lootE = loot.replace(/\\[.*?\\]\\]/g, a);","                    var wQualList = ['Excellent', 'Good', 'Average', 'Poor', 'Salvageable', 'Broken'];","                    var wQual = wQualList[Math.floor(Math.random() * wQualList.length)];","\t\t\t\t\tvar img = \"http:\\\\//i.imgur.com/gGUKNRe.jpg\";","\t\t\t\t\ttLOOT = tLOOT + lPart + \"background-size: 100%; background-image: url(\"+img+\");'><b><u>WEAPON:</b></u> <a style='color:#888'>#\"+rand1+\" (\"+loots+\")</a><br>\"+wQual+\" \"+lootE+\"</div>\";","\t\t\t\t}","\t\t\t\tx++;","\t\t\t}","\t\t\tsendChat(msg.who, '/w gm ' + tLOOT);","\t\t\tsendChat(msg.who, \"/w \" + msg.who + ' ' + tLOOT);","\t\t};","\t}","});","on('chat:message', function (msg) {","    if(msg.type == 'api' && msg.content.indexOf('!Ches1t') !== -1) {","\t\tvar Names = [];","\t\tif(msg.selected == undefined) {","\t\t\tsendChat('', \"/desc No one selected\");","\t\t\treturn;","\t\t}","\t\tvar selected = msg.selected;","\t\ti = 0;","\t\t_.each(selected, function (obj) {","\t\t\tvar token = getObj('graphic', msg.selected[i]._id);","\t\t\tif(token.get(\"represents\") !== '') {","\t\t\t\tif(token.get('subtype') !== 'token') return;","\t\t\t\tvar oCharacter = getObj('character', token.get(\"_represents\"));","\t\t\t\tvar name = (oCharacter.get('name'));","\t\t\t\tNames.push(oCharacter);","\t\t\t}","\t\t\ti++;","\t\t});","\t\tvar rand = Names[Math.floor(Math.random() * Names.length)];","\t\tvar name = (rand.get('name'));","\t\tpColor = GetPColor(rand);","\t\tvar whoC = OuterDiv + iPart + \"background-color:#\"+pColor+\";'><b>● Who: \" + name + \"  ●</div>\";","\t\tsendChat('Picked', \"/direct \" +  whoC);","\t}","});//!magic --[[1d5]] rounds --desc --ammo","on(\"chat:message\", function (msg_orig) {","    var msg = _.clone(msg_orig);","    if (msg.type != \"api\") return;","    if(_.has(msg,'inlinerolls')){","        msg.content = MakeRollNum(msg.content, msg.inlinerolls);","    }","    var msgTxt = msg.content;","    var command = msg.content.split(\" \", 1);","    if (command == \"!cast\") {","        var cWho = findObjs({_type: 'character',name: msg.who})[0];","        if (cWho == undefined && msg.who != \"GM (GM)\") {","            cWho = RollRight(msg.playerid);","            msg.who = cWho.get(\"name\");","        }","        var who = msg.who;","        var msgFormula = msgTxt.split(\" --\");","        //-----------------------------","        //AMMO PARTS----------------","        //-----------------------------","        cAmmo =\"0\";","        mAmmo =\"0\";","        if (msgFormula[6] !== undefined) {","            var ammoF = msgFormula[6].split(\" \");","            var ammoCount = ammoF[0];","            var ammoType = ammoF[1];","            if (cWho !== undefined) {","                var ammo0 = findObjs({_type: \"attribute\",name: ammoType,_characterid: cWho.id}, {caseInsensitive: true})[0];","            }","            if (ammo0 == undefined){","                sendChat(who, '/direct <b> '+msg.who+' set cost type!');","                return;","            }","            else {","                cAmmo = parseInt(ammo0.get(\"current\") - ammoCount);","                cAmmo1 = parseInt(ammo0.get(\"current\"));","                mAmmo = parseInt(ammo0.get(\"max\"));","                var per = (cAmmo/mAmmo)*100;","                var ammoT = '<div style=\"border: 2px solid #333; background-color: black; border-radius: 13px; padding: 3px; margin: 1px;\"><div style=\"background-color: orange; width: '+per+'%; height: 3px; border-radius: 10px;\"></div></div>';","                if (cAmmo1 < ammoCount) {","                    sendChat(who, '/direct <b> '+msgFormula[1].toUpperCase()+': not enough points!');","                    return;","                }","                SetStat(cWho,ammoType,ammoCount);","            }","        }","        var bColor = \"\";","        var ammoF = msgFormula[6].split(\" \");","        var ammoType = ammoF[1];","        if (ammoType == \"PPE\") {","            bColor = \"#C8CFE6\"","        }","        else {","            bColor = \"#D1C8E6\";","        }","        var rollresult = 0;","        var name = msgFormula[1].toUpperCase();","        var range = \"<b>Range: </b>\" + msgFormula[2];","        var dam = \"<b><br>Damage: </b><span style='color:#ff0000'>\" + msgFormula[3] + \"</span>\";","        var dur = \"<b><br>Duration: </b><span style='color:#ff0000'>\" + msgFormula[4] + \"</span>\";","        var cost =  \"<b><br>Cost: </b>\" + msgFormula[6];","        var desc = \"<br><b>Desc: \" + msgFormula[5];","        var boxcolor =  \"#545454\";","        pad = \"2px;\";","        var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","        var toptext = brPart + \"background-color:\" + PlayerBGColor + \";'>\" + msg.who +\" used:</div>\";","        weburl = \"http:\\\\//fc05.deviantart.net/fs70/f/2014/189/4/5/magic___free_texture_by_camy_orca-d7pro4i.jpg\";","        var SayParts = \"<div style='line-height: 9px; text-shadow: \"+tshadow+\"; margin:0.0em; font-size: 9pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\"+weburl+\");'><b>●\"+ name +\"●</b></div>\";","        var top = \"<div style=' box-shadow: \"+bShadow+\"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \"+font+\"; text-align: center; vertical-align: middle; padding: 2px 2px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\"+toptext+\"</b></div>\";","        var Main = \"<div style='box-shadow: \"+bShadow+\"; text-shadow: 1px 1px #878787; font-family: \"+ font + \"; font-size: small; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:\"+bColor+\"; color: #000;'><i>\"+SayParts+\"<br>\" + range+dam+dur+cost+desc + \"</div>\";","        var End = \"<div style='box-shadow: \"+bShadow+\"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \"+font+\"; font-size: 12px ;text-align: center; padding: \"+pad+\" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 5px 5px; color: #FFFFFF; background-color:#545454;'><b>\"+cAmmo + \" of \" + mAmmo  +  \" left\"+ammoT+\"</div>\";","        if (who == \"NPC\") {","            var PlayerBGColor = getObj(\"player\", msg.playerid).get(\"color\");","            var toptext = brPart + \"padding: 10px; background-color:\" + PlayerBGColor + \";'><b>\" + msg.who +\" used a Power!</b></div>\";","            sendChat(who, toptext);","            sendChat('BlindRoll', \"/w GM \" + top + Main + End);","            return;","        }","        else sendChat(who, '' + top + Main + End);","    }","});/*global gmC state on obj getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/","var WillTurnOrder = {};","var TurnData = {};","var BestRoll = 0;","var intChat = '';","/*------------------","API CHAT COMMANDS","------------------*/","on('chat:message', function(msg) {","    /*--TURNS-SET--*/","    if(msg.type == 'api' && msg.content.indexOf('!Turns') !== -1) {","\t\tvar turnorder;","\t\tif(!Campaign().get(\"turnorder\")) return;","\t\tturnorder = JSON.parse(Campaign().get(\"turnorder\"));","\t\tsort(turnorder); /*--SORT TURNS--*/","\t\tturnorder = JSON.parse(Campaign().get(\"turnorder\"));","\t\tSetPurple(turnorder, false);","\t\tfor(var i in turnorder) {","\t\t\tcAttacks = 5; /*-DEFAULT ATTACKS-*/","\t\t\tname = turnorder[i].id; /*-TURN ORDER WHO-*/","\t\t\tid1 = getObj(\"graphic\", turnorder[i].id); /*-GET TOKEN-*/","\t\t\tpColor = '#636363';","\t\t\tif(id1 != undefined) {","\t\t\t\toCharacter = getObj(\"character\", id1.get(\"represents\"));","\t\t\t\tiName = id1.get(\"name\");","\t\t\t\tif(oCharacter != undefined) {","\t\t\t\t\tiName = oCharacter.get(\"name\");","\t\t\t\t\toAttacks = findObjs({","\t\t\t\t\t\t_type: \"attribute\",","\t\t\t\t\t\tname: \"ATT\",","\t\t\t\t\t\t_characterid: oCharacter.id","\t\t\t\t\t})[0];","\t\t\t\t\tif(oAttacks != undefined) cAttacks = parseInt(oAttacks.get(\"current\"));","\t\t\t\t\tvar type = (oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","\t\t\t\t\tif(type == 'Player') {","\t\t\t\t\t\tvar cBy = oCharacter.get('controlledby');","\t\t\t\t\t\tif(cBy.split(',').length == 1 && cBy != 'all') {","\t\t\t\t\t\t\tplayer = getObj('player', cBy);","\t\t\t\t\t\t\tpColor = player.get('color');","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif(oCharacter == undefined && id1.get(\"gmnotes\") != \"\") {","\t\t\t\t\tcAttacks = id1.get(\"gmnotes\");","\t\t\t\t}","\t\t\t\tif(oCharacter == undefined) {","\t\t\t\t\tsetbars(id1);","\t\t\t\t}","\t\t\t\tvar init = parseInt(turnorder[i].pr);","\t\t\t\tif(init < cAttacks) {","\t\t\t\t\tinit = cAttacks;","\t\t\t\t\tturnorder[i].pr = cAttacks;","\t\t\t\t}","\t\t\t\taddPlayer(name, parseInt(init), parseInt(cAttacks));","\t\t\t}","\t\t}","\t\tvar sTurns = createOrder();","\t\tsort(sTurns); /*--SORT TURNS--*/","\t\tvar aFirst = JSON.parse(Campaign().get(\"turnorder\"));","\t\tvar iName2 = getObj(\"graphic\", aFirst[1].id).get(\"name\");","\t\tif(getObj(\"graphic\", aFirst[1].id).get(\"layer\") == 'gmlayer') iName2 = \"UNKNOWN\";","\t\tvar C = fPart + \" background-color:#A80000;'><b>● ROUND STARTS ●</b></div>\";","\t\tvar R = fPart + \" background-color:#A80000;'><b>\" + iName2 + \"</b> goes first!</div>\";","\t\tsendChat('TurnTracker', \"/direct \" + C + R + \"<br>\" + intChat);","\t\treset();","\t}","\t/*--RESET--*/","\tif(msg.type == 'api' && msg.content.indexOf('!Reset') !== -1) {","\t\tif(!Campaign().get(\"turnorder\")) return;","\t\tvar turn_order = JSON.parse(Campaign().get(\"turnorder\"));","\t\tCampaign().set(\"turnorder\", '');","\t\tsendChat('', '/desc Turns Reset!');","\t}","});","/*------------------","HIGHLIGHT TURNS","------------------*/","on(\"change:campaign:turnorder\", function(obj, prev) {","\tif(!Campaign().get(\"turnorder\")) return;","\tvar turn_order = JSON.parse(Campaign().get(\"turnorder\"));","\tif(!turn_order.length) return;","\tif(!turn_order[0].id == -1) {","\t\tSetPurple(turn_order, true);","\t\treturn;","\t}","\tvar current_token = getObj(\"graphic\", turn_order[0].id);","\tif(current_token != undefined) {","\t\tif(turn_order[0].pr == turn_order[0].pr) {","\t\t\tvar iName2 = getObj(\"graphic\", current_token.id).get(\"name\");","\t\t\toCharacter = getObj(\"character\", current_token.get(\"represents\"));","\t\t\tpColor = '#ff0000';","\t\t\tif(getObj(\"graphic\", current_token.id).get(\"layer\") == 'gmlayer') pColor = '#3D3D3D';","\t\t\tif(oCharacter != undefined) {","\t\t\t\tvar type = (oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","\t\t\t\tif(type == 'Player') {","\t\t\t\t\tvar cBy = oCharacter.get('controlledby');","\t\t\t\t\tif(cBy.split(',').length == 1 && cBy != 'all') {","\t\t\t\t\t\tplayer = getObj('player', cBy);","\t\t\t\t\t\tpColor = player.get('color');","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tdieName = 'StartRound';","\t\t\tvar to = JSON.parse(obj.get('turnorder'));","\t\t\tloc = _.find(to, function(e) {","\t\t\t\treturn dieName === e.custom;","\t\t\t});","\t\t\tif(loc !== undefined) {","\t\t\t\tmovemarker(current_token, pColor, iName2);","\t\t\t} else SetPurple(turn_order, 1);","\t\t}","\t}","});","/*------------------","FUNCTIONS","------------------*/","//--MOVE TURN MARKER","function movemarker(current_token, pColor, iName2) {","\tif(current_token.get(\"layer\") == \"gmlayer\") {","        piclink = 'http://www.clker.com/cliparts/i/X/D/N/j/p/icon-with-question-mark-hi.png';","\t\tiName2 = \"UNKNOWN\";","\t} else {","        var piclink = current_token.get(\"imgsrc\");","        var size = current_token.get(\"height\");","        var HITS = {","            \"angle\": 0,","        \t\"angleRandom\": 180,","        \t\"duration\": 10,","        \t\"emissionRate\": 100,","        \t\"endColour\": [255, 255, 255, 0],","        \t\"endColourRandom\": [0, 0, 0, 0],","        \t\"gravity\": {\"x\":0, \"y\":0},","        \t\"lifeSpan\": 10,","        \t\"lifeSpanRandom\": 30,","        \t\"maxParticles\": 100,","        \t\"size\": size/2,","        \t\"sizeRandom\": 15,","        \t\"speed\": 0.0*(size/30),","        \t\"speedRandom\": 0.0*(size/30),","        \t\"startColour\": [50, 50, 150, 0.1],","        \t\"startColourRandom\": [0, 0, 0, 0.1]","        };","    spawnFxWithDefinition(current_token.get(\"left\"),current_token.get(\"top\"), HITS, current_token.get(\"_pageid\"));","\t}","\tvar picbox = \"<div style= 'background-color:#ffffff; display: inline-block; border: 1px solid #000; margin: 0.2em; border-radius: 10px 10px 10px 10px; align:'center''><img src=\" + piclink + \" style=height:30px; width:30px;'></div>\";","\tvar table = '<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\"><tr><td width=\"20%\">' + picbox + '</td><td width=\"90%\"><b>Turn: ' + iName2 + '</b></td></tr></table>';","\tvar R = iPart2 + \" background-color:#\" + pColor + \";'>\" + table + \"</div>\";","\tsendChat('', \"/direct \" + R);","};","//--SET BARS","function setbars(id1) {","\tif(id1.get(\"bar1_value\") == \"\" || id1.get(\"bar2_value\") == \"\") {","\t\tid1.set('bar1_value', 100);","\t\tid1.set('bar1_max', 100);","\t\tid1.set('bar2_value', 100);","\t\tid1.set('bar2_max', 100);","\t}","};","","function SetPurple(turn_order, toggle) {","\ti = 0;","\t_.each(turn_order, function(obj) {","\t\tvar tokens = getObj('graphic', turn_order[i].id);","\t\tif(tokens == undefined) return;","\t\ttokens.set(\"status_purple\", toggle);","\t\ti++;","\t});","};","//--SORT LIST","function sort(order) {","\tvar nOrd = order.sortByProp('pr');","\tCampaign().set(\"turnorder\", JSON.stringify(nOrd));","};","Array.prototype.sortByProp = function(p) {","\treturn this.sort(function(a, b) {","\t\treturn(parseInt(a[p], 10) < parseInt(b[p], 10)) ? 1 : (parseInt(a[p], 10) > parseInt(b[p], 10)) ? -1 : 0;","\t});","};","//--ADDPLAYER","function addPlayer(id, Roll, Attack) {","\tvar inc = Roll / Attack;","\tinc = Math.round(inc * 100) / 100;","\tvar init = Roll;","\tif(Roll > BestRoll) {","\t\tBestRoll = Roll;","\t}","\tvar table = [];","\tfor(var i = 0; i < Attack; i++) {","\t\tif(init >= 0) {","\t\t\tif(init == 0) init = 1;","\t\t\ttable.push(parseInt(init));","\t\t\tinit = (init - inc);","\t\t}","\t}","\toutput = pColor;","\tiName = iName.toUpperCase();","\tturnNums = table.toString();","\tif(id1.get(\"layer\") == 'gmlayer') iName = \"UNKNOWN\";","\tChatSay = iPart + \"background-color:\" + output + \";'>\" + \"<b>\" + iName + \"</b> (Att:\" + Attack + \") (Roll:\" + Roll + \")<br></b><b>\" + turnNums + \"</b></div>\";","\tif(iName == \"UNKNOWN\") ChatSay = \"\";","\tintChat1 = ChatSay;","\tintChat += intChat1;","\tTurnData[id] = {\"Roll\": Roll,\"Attack\": Attack,\"Table\": table};","};","//--CREATE ORDER","function createOrder() {","\tvar order = [];","\tfor(i = (BestRoll + 1); i > 0; i--) {","\t\t_.each(TurnData, function(value, key) {","\t\t\tif(value.Table.indexOf(i) != -1) {","\t\t\t\torder.push({\"id\": key,\"pr\": i,\"custom\": \"\"});","\t\t\t}","\t\t});","\t}","\torder.unshift({\"id\": '-1',\"pr\": 100,\"custom\": \"StartRound\"});","\treturn order;","};","//--RESET TURNS","function reset() {","\tTurnData = {};","\tBestRoll = 0;","\tintChat = '';","};/*global MonthId gmC state on log myrolls obj getObj iPart _ playerIsGM brPart RollRight formatNumber findObjs sendChat CONFIG lPart fPart gm_img gPart greenC redC grayC OuterDiv Campaign randomFromTo createObj fixNO toFront randomInteger*/","//CODE-----------------","on(\"chat:message\", function(msg) {","    var msgTxt = msg.content;","    var msgFormula = msgTxt.split(\" \");","    if(msg.type == \"api\" && msgTxt.toUpperCase().indexOf('!HOUR') !== -1) {","        var nHour = msgFormula[1];","        if(nHour == undefined) nHour = 0;","        time(nHour);","        FoodSet(nHour);","        SleepSet(nHour);","    }","    if(msg.type == \"api\" && msgTxt.toUpperCase().indexOf('!WEATHER') !== -1) {","        weath(function() {","            var wText = state.weather","            sendChat('', \"&{template:RIFTS} {{name=Nature}} {{color=world}}\" + wText);","        });","    }","    if(msg.type == \"api\" && msgTxt.toUpperCase().indexOf('!NOW') !== -1) {","        cText = state.world;","        wText = state.weather;","        sendChat('', cText + wText);","    }","});","//","function weath(callback) {","    var wText = \"\",","    sentinel = true;","    //Get Date-----------------","    var croll = findObjs({_type: 'character', name: 'World'})[0];","","    var oMonth = findObjs({name: \"Month\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];","    var MonthNum = parseInt(oMonth.get(\"current\"));","","    var oDay = findObjs({name: \"Day\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];","    var oDay = parseInt(oDay.get(\"current\"));","","    var oYear = findObjs({name: \"Year\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];","    var oYearNum = parseInt(oYear.get(\"current\"));","","    var oTerrain = findObjs({name: \"Terrain\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];","    var oTerrainname = oTerrain.get(\"current\");","    var oTerrainNum = parseInt(oTerrain.get(\"max\"));","","    var oHour = findObjs({name: \"Hour\",_type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];","    var oHourNum = parseInt(oHour.get(\"current\"));","    log(oTerrainNum)","    //Lookup name-----------------","    MonthId.forEach(function(opts) {","        var oType = \"\";","        if(MonthNum == opts.Month) {","            var Calm = 100;","            var cDust = 51;","            var cRain = 50;","            var cRare = 5;","            //---find temp","            var rN = Math.floor(Math.random() * 30) - 15;","            var tChange = rN;","            var TempBase = (opts.Base + rN + oTerrainNum);","            if(oHourNum >= 17 || oHourNum <= 7) TempBase = TempBase - 20;","            var TempBaseReal = TempBase;","            if(TempBase <= 20) {","                var TempBase = TempBase + \"F (Exposer Warning!)\";","            } else if(TempBase >= 100) {","                var TempBase = TempBase + \"F (Heat Warning!)\";","            } else {","                var TempBase = TempBase + \"F \";","            }","            //----------","            var ranType = randomInteger(100);","            if(ranType < cRare) {","                oType = \"Rare\";","            } else if(ranType < cRain) {","                oType = \"Rain\";","            } else if(ranType < cDust) {","                oType = \"Dust\";","            } else {","                oType = \"Calm\";","            }","            //----------","            if(TempBaseReal <= 35 & oType == \"Rain\") oType = \"Snow\";","            if(TempBaseReal > 35 & oType == \"Snow\") oType = \"Rain\";","            //----------","            var oDesc = \"\";","            sentinel = false;","            sendChat(\"NoOne\", \"/roll 1t[W-\" + oType + \"]\", function(ops) {","                var rollresult = JSON.parse(ops[0].content);","                oDesc = rollresult.rolls[0].results[0].tableItem.name;","                var output1 = TempBase;","                var output2 = \"<i>\" + oType;","                wText = \"{{<small>Type:=<b><small>\" + output2 + \"</b>}} {{<small>Temp:=<small>\" + output1 + \"}} {{<small>Weather:=<small>\" + oDesc + \"}}\";","                state.weather = wText;","                callback();","            });","        }","    });","    if(sentinel) {","        callback();","    }","};","//-------TIME FUNCTION","function time(HourT) {","    var nHour = parseInt(HourT);","    var croll = findObjs({ _type: 'character',name: 'World'})[0];","    //--hour------------------------","    var Hour = findObjs({name: \"Hour\",_type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];","    var HourNum = parseInt(Hour.get(\"current\"));","    var mHourNum = parseInt(Hour.get(\"max\"));","    //--day------------------------","    var DayChat = findObjs({name: \"Day\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];","    var DayNum = parseInt(DayChat.get(\"current\"));","    var mDayNum = parseInt(DayChat.get(\"max\"));","    //--month------------------------","    var MonthChat = findObjs({name: \"Month\",_type: \"attribute\",_characterid: croll.id}, {caseInsensitive: true})[0];","    var MonthNum = parseInt(MonthChat.get(\"current\"));","    var mMonthNum = parseInt(MonthChat.get(\"max\"));","    //--year------------------------","    var YearChat = findObjs({name: \"Year\", _type: \"attribute\", _characterid: croll.id}, {caseInsensitive: true})[0];","    var YearNum = parseInt(YearChat.get(\"current\"));","    //--------------","    //set","    Hour.set('current', HourNum + nHour);","    HourNum = parseInt(Hour.get(\"current\"));","    var nDay1 = '';","    if(HourNum >= mHourNum || HourNum == 0) {","        Hour.set('current', (HourNum - 24) + 0);","        DayChat.set('current', DayNum + 1);","        var nDay1 = \"{{NewDay=<b>A New Day is Here</b>}}\";","    }","    if(DayNum > mDayNum) {","        DayChat.set('current', 1);","        MonthChat.set('current', MonthNum + 1);","    }","    if(MonthNum > mMonthNum) {","        MonthChat.set('current', 1);","        YearChat.set('current', YearNum + 1);","    }","    wText = \"\";","    var cWeather = randomInteger(7);","    var finishWork = function() {","        //------------------","        var HourNum = parseInt(Hour.get(\"current\"));","        var DayNum = parseInt(DayChat.get(\"current\"));","        var MonthNum = parseInt(MonthChat.get(\"current\"));","        var Clock = (HourNum >= 12) ? 'PM' : 'AM';","        if(HourNum >= 12) {","            HourNum = HourNum - 12;","        }","        if(HourNum == 0) HourNum = 12;","        MonthId.forEach(function(opts) {","            if(MonthNum == opts.Month) {","                var MonthName = opts.Name;","                var Day = HourNum + \" \" + Clock + \" \" + MonthName + \" \" + DayNum + \", \" + YearNum;","                var cText = \"&{template:RIFTS} {{name=World}} {{color=world}} {{<small>Time:=\" + Day + \"}}\" + nDay1;","                state.world = cText;","                if(cWeather == 1) wText = state.weather","                sendChat('', cText + wText);","            }","        });","    };","    if(cWeather == 1 && nHour != 0) {","        weath(finishWork);","        wText = state.weather;","    } else {","        finishWork();","    }","};","/*------------------","WEATHER STUFF","------------------*/","//---MONTH","var MonthId = [","    {Month: 1,Name: 'January',Base: 30},","\t{Month: 2,Name: 'February',Base: 50},","\t{Month: 3,Name: 'March',Base: 50},","\t{Month: 4,Name: 'April',Base: 70},","\t{Month: 5,Name: 'May',Base: 80},","\t{Month: 6,Name: 'June',Base: 90},","\t{Month: 7,Name: 'July',Base: 90},","\t{Month: 8,Name: 'August',Base: 90},","\t{Month: 9,Name: 'September',Base: 80},","\t{Month: 10,Name: 'October',Base: 70},","\t{Month: 11,Name: 'November',Base: 50},","\t{Month: 12,Name: 'December',Base: 30}","\t ];\u001a"]}],[{"start":{"row":2308,"column":4},"end":{"row":2308,"column":5},"action":"remove","lines":["\u001a"],"id":23}],[{"start":{"row":11,"column":0},"end":{"row":11,"column":138},"action":"remove","lines":["    var PlayerBG = \"background-image:-webkit-linear-gradient(left, #000000 0%,\"+PlayerBGColor+\" 15%,\"+PlayerBGColor+\" 85%,#000000 100%);\";"],"id":24}],[{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"remove","lines":["",""],"id":25}],[{"start":{"row":823,"column":8},"end":{"row":823,"column":9},"action":"insert","lines":["v"],"id":26}],[{"start":{"row":823,"column":9},"end":{"row":823,"column":10},"action":"insert","lines":["a"],"id":27}],[{"start":{"row":823,"column":10},"end":{"row":823,"column":11},"action":"insert","lines":["r"],"id":28}],[{"start":{"row":823,"column":11},"end":{"row":823,"column":12},"action":"insert","lines":[" "],"id":29}],[{"start":{"row":0,"column":42},"end":{"row":0,"column":69},"action":"insert","lines":["setDefaultTokenForCharacter"],"id":30}],[{"start":{"row":0,"column":69},"end":{"row":0,"column":70},"action":"insert","lines":[" "],"id":31}],[{"start":{"row":1070,"column":4},"end":{"row":1070,"column":5},"action":"insert","lines":["v"],"id":32}],[{"start":{"row":1070,"column":5},"end":{"row":1070,"column":6},"action":"insert","lines":["a"],"id":33}],[{"start":{"row":1070,"column":6},"end":{"row":1070,"column":7},"action":"insert","lines":["r"],"id":34}],[{"start":{"row":1070,"column":7},"end":{"row":1070,"column":8},"action":"insert","lines":[" "],"id":35}],[{"start":{"row":1071,"column":4},"end":{"row":1071,"column":5},"action":"insert","lines":["v"],"id":36}],[{"start":{"row":1071,"column":5},"end":{"row":1071,"column":6},"action":"insert","lines":["a"],"id":37}],[{"start":{"row":1071,"column":6},"end":{"row":1071,"column":7},"action":"insert","lines":["r"],"id":38}],[{"start":{"row":1071,"column":7},"end":{"row":1071,"column":8},"action":"insert","lines":[" "],"id":39}],[{"start":{"row":1072,"column":4},"end":{"row":1072,"column":5},"action":"insert","lines":["v"],"id":40}],[{"start":{"row":1072,"column":5},"end":{"row":1072,"column":6},"action":"insert","lines":["a"],"id":41}],[{"start":{"row":1072,"column":6},"end":{"row":1072,"column":7},"action":"insert","lines":["r"],"id":42}],[{"start":{"row":1072,"column":7},"end":{"row":1072,"column":8},"action":"insert","lines":[" "],"id":43}],[{"start":{"row":1073,"column":4},"end":{"row":1073,"column":5},"action":"insert","lines":["v"],"id":44}],[{"start":{"row":1073,"column":5},"end":{"row":1073,"column":6},"action":"insert","lines":["a"],"id":45}],[{"start":{"row":1073,"column":6},"end":{"row":1073,"column":7},"action":"insert","lines":["r"],"id":46}],[{"start":{"row":1073,"column":7},"end":{"row":1073,"column":8},"action":"insert","lines":[" "],"id":47}],[{"start":{"row":1079,"column":1},"end":{"row":1079,"column":2},"action":"insert","lines":["v"],"id":48}],[{"start":{"row":1079,"column":2},"end":{"row":1079,"column":3},"action":"insert","lines":["a"],"id":49}],[{"start":{"row":1079,"column":3},"end":{"row":1079,"column":4},"action":"insert","lines":["r"],"id":50}],[{"start":{"row":1079,"column":4},"end":{"row":1079,"column":5},"action":"insert","lines":[" "],"id":51}],[{"start":{"row":1080,"column":1},"end":{"row":1080,"column":2},"action":"insert","lines":["v"],"id":52}],[{"start":{"row":1080,"column":2},"end":{"row":1080,"column":3},"action":"insert","lines":["a"],"id":53}],[{"start":{"row":1080,"column":3},"end":{"row":1080,"column":4},"action":"insert","lines":["r"],"id":54}],[{"start":{"row":1080,"column":4},"end":{"row":1080,"column":5},"action":"insert","lines":[" "],"id":55}],[{"start":{"row":1186,"column":8},"end":{"row":1186,"column":9},"action":"insert","lines":["v"],"id":56}],[{"start":{"row":1186,"column":9},"end":{"row":1186,"column":10},"action":"insert","lines":["a"],"id":57}],[{"start":{"row":1186,"column":10},"end":{"row":1186,"column":11},"action":"insert","lines":["r"],"id":58}],[{"start":{"row":1186,"column":11},"end":{"row":1186,"column":12},"action":"insert","lines":[" "],"id":59}],[{"start":{"row":1186,"column":1},"end":{"row":1186,"column":34},"action":"remove","lines":["       var d20 = m.replace(k, v);"],"id":60}],[{"start":{"row":1186,"column":1},"end":{"row":1187,"column":0},"action":"remove","lines":["",""],"id":61}],[{"start":{"row":1190,"column":0},"end":{"row":1191,"column":3},"action":"remove","lines":["/*global OuterDiv PlaySound TopBar iPart MidBar BottBar MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */"],"id":62}],[{"start":{"row":1189,"column":2},"end":{"row":1190,"column":0},"action":"insert","lines":["",""],"id":63}],[{"start":{"row":1190,"column":51},"end":{"row":1191,"column":0},"action":"remove","lines":["",""],"id":64}],[{"start":{"row":1190,"column":51},"end":{"row":1191,"column":0},"action":"insert","lines":["",""],"id":65}],[{"start":{"row":1191,"column":0},"end":{"row":1192,"column":0},"action":"remove","lines":["",""],"id":66}],[{"start":{"row":1313,"column":3},"end":{"row":1313,"column":4},"action":"remove","lines":["v"],"id":67}],[{"start":{"row":1313,"column":3},"end":{"row":1313,"column":4},"action":"remove","lines":["a"],"id":68}],[{"start":{"row":1313,"column":3},"end":{"row":1313,"column":4},"action":"remove","lines":["r"],"id":69}],[{"start":{"row":1313,"column":3},"end":{"row":1313,"column":4},"action":"remove","lines":[" "],"id":70}],[{"start":{"row":1585,"column":8},"end":{"row":1585,"column":9},"action":"insert","lines":["v"],"id":71}],[{"start":{"row":1585,"column":9},"end":{"row":1585,"column":10},"action":"insert","lines":["a"],"id":72}],[{"start":{"row":1585,"column":10},"end":{"row":1585,"column":11},"action":"insert","lines":["r"],"id":73}],[{"start":{"row":1585,"column":11},"end":{"row":1585,"column":12},"action":"insert","lines":[" "],"id":74}],[{"start":{"row":1922,"column":4},"end":{"row":1922,"column":5},"action":"insert","lines":["v"],"id":75}],[{"start":{"row":1922,"column":5},"end":{"row":1922,"column":6},"action":"insert","lines":["a"],"id":76}],[{"start":{"row":1922,"column":6},"end":{"row":1922,"column":7},"action":"insert","lines":["r"],"id":77}],[{"start":{"row":1922,"column":7},"end":{"row":1922,"column":8},"action":"insert","lines":[" "],"id":78}],[{"start":{"row":1917,"column":3},"end":{"row":1917,"column":4},"action":"insert","lines":["v"],"id":79}],[{"start":{"row":1917,"column":4},"end":{"row":1917,"column":5},"action":"insert","lines":["a"],"id":80}],[{"start":{"row":1917,"column":5},"end":{"row":1917,"column":6},"action":"insert","lines":["r"],"id":81}],[{"start":{"row":1917,"column":6},"end":{"row":1917,"column":7},"action":"insert","lines":[" "],"id":82}],[{"start":{"row":1918,"column":3},"end":{"row":1918,"column":7},"action":"insert","lines":["var "],"id":83}],[{"start":{"row":1919,"column":3},"end":{"row":1919,"column":7},"action":"insert","lines":["var "],"id":84}],[{"start":{"row":1920,"column":3},"end":{"row":1920,"column":7},"action":"insert","lines":["var "],"id":85}],[{"start":{"row":1923,"column":4},"end":{"row":1923,"column":8},"action":"insert","lines":["var "],"id":86}],[{"start":{"row":1926,"column":5},"end":{"row":1926,"column":9},"action":"insert","lines":["var "],"id":87}]]},"ace":{"folds":[],"scrolltop":26679,"scrollleft":0,"selection":{"start":{"row":1929,"column":4},"end":{"row":1929,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1904,"state":"comment1","mode":"ace/mode/javascript"}},"timestamp":1489192152533}