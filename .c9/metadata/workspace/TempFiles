{"changed":true,"filter":false,"title":"TempFiles","tooltip":"/TempFiles","value":"/*\nMy Profile link: https://app.roll20.net/users/262130/dxwarlock\nGIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors\nRoll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor\nLast Updated 2/23/2017\n*/\n/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/\nvar HealthColors = HealthColors || (function() {\n    'use strict';\n    var version = '1.1.0',\n        ScriptName = \"HealthColors\",\n        schemaVersion = '1.0.3',\n/*--------\nON TOKEN UPDATE\n--------*/\n        handleToken = function(obj, prev) {\n            var ColorOn = state.HealthColors.auraColorOn;\n            var bar = state.HealthColors.auraBar;\n            var tint = state.HealthColors.auraTint;\n            var onPerc = state.HealthColors.auraPerc;\n            var dead = state.HealthColors.auraDead;\n            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {\n                if (ColorOn !== true) return; //Check Toggle\n//CHECK BARS ------------\n                if (obj.get(bar + \"_max\") === \"\" || obj.get(bar + \"_value\") === \"\") return;\n                var maxValue = parseInt(obj.get(bar + \"_max\"), 10);\n                var curValue = parseInt(obj.get(bar + \"_value\"), 10);\n                var prevValue = prev[bar + \"_value\"];\n                if (isNaN(maxValue) && isNaN(curValue)) return;\n//CALC PERCENTAGE------------\n                var percReal = Math.round((curValue / maxValue) * 100);\n                var perc = Math.round((curValue / maxValue) * 120);\n//SET DEAD------------\n                if (curValue <= 0 && dead === true) {\n                    obj.set(\"status_dead\", true);\n                    SetAuraNone(obj);\n                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);\n                    return;\n                }\n                else if (dead === true) obj.set(\"status_dead\", false);\n//PERCENTAGE OFF------------\n                if (percReal > onPerc) {\n                    SetAuraNone(obj);\n                    return;\n                }\n//CHECK DISABLED TOKEN------------\n                var oCharacter = getObj('character', obj.get(\"_represents\"));\n                if (oCharacter !== undefined) {\n                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter);\n                    var UseAuraAtt = findObjs({\n                        name: \"USECOLOR\",\n                        _type: \"attribute\",\n                        characterid: oCharacter.id\n                    }, {\n                        caseInsensitive: true\n                    })[0];\n                    var UseAura = UseAuraAtt.get(\"current\");\n                    UseAura = UseAura.toString().toUpperCase();\n                    if (UseAura != \"YES\" && UseAura != \"NO\") {\n                        UseAuraAtt.set('current', \"YES\");\n                        var name = oCharacter.get('name');\n                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");\n                    }\n                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();\n                    if (UseAura == \"NO\") return;\n                }\n//CHECK MONSTER OR PLAYER------------\n                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';\n//IF PLAYER------------\n                GMW(PercentToRGB(Math.min(100, percReal)))\n                var GM = '';\n                var PC = '';\n                var markerColor = PercentToRGB(Math.min(100, percReal));\n                var pColor = '#ffffff';\n                if (type == 'Player') {\n                    if (state.HealthColors.PCAura === false) return;\n                    var cBy = oCharacter.get('controlledby');\n                    var player = getObj('player', cBy);\n                    pColor = '#000000';\n                    if (player !== undefined) pColor = player.get('color');\n                    GM = state.HealthColors.GM_PCNames;\n                    if (GM != 'Off') {\n                        GM = (GM == \"Yes\") ? true : false;\n                        obj.set({\n                            'showname': GM\n                        });\n                    }\n                    PC = state.HealthColors.PCNames;\n                    if (PC != 'Off') {\n                        PC = (PC == \"Yes\") ? true : false;\n                        obj.set({\n                            'showplayers_name': PC\n                        });\n                    }\n\n                }\n//IF MONSTER------------\n                if (type == 'Monster') {\n                    if (state.HealthColors.NPCAura === false) return;\n                    GM = state.HealthColors.GM_NPCNames;\n                    if (GM != 'Off') {\n                        GM = (GM == \"Yes\") ? true : false;\n                        obj.set({\n                            'showname': GM\n                        });\n                    }\n                    PC = state.HealthColors.NPCNames;\n                    if (PC != 'Off') {\n                        PC = (PC == \"Yes\") ? true : false;\n                        obj.set({\n                            'showplayers_name': PC\n                        });\n                    }\n                }\n//SET AURA|TINT------------\n                if (tint === true) obj.set({\n                    'tint_color': markerColor,\n                });\n                else {\n                    TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);\n                }\n//SPURT FX------------\n                if (state.HealthColors.FX == true) {\n                    if (curValue == prevValue || prevValue == \"\") return;\n                    var amount = Math.abs(curValue-prevValue);\n                    var HitSize = (amount/maxValue)*4;\n                    var HitSize = Math.max(HitSize, 0.5);\n                    //GMW(HitSize);\n                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);\n                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);\n                    var size = obj.get(\"height\");\n                    var multi = size / 70;\n                    var StartColor = HurtColor;\n                    var EndColor = [255, 0, 0, 0];\n                    if (curValue > prevValue && prevValue !== \"\") {\n                        StartColor = HealColor;\n                        EndColor = [255, 255, 255, 0];\n                    }\n                    var HITS = {\n                        \"maxParticles\": 150*HitSize,\n                        \"duration\": 50*HitSize,\n                        \"size\": size / 10*HitSize,\n                        \"sizeRandom\": 3,\n                        \"lifeSpan\": 25,\n                        \"lifeSpanRandom\": 5,\n                        \"speed\": multi * 8,\n                        \"speedRandom\": multi * 2,\n                        \"gravity\": {\n                            \"x\": multi * 0.01,\n                            \"y\": multi * 0.65\n                        },\n                        \"angle\": 270,\n                        \"angleRandom\": 15,\n                        \"emissionRate\": 5,\n                        \"startColour\": StartColor,\n                        \"endColour\": EndColor,\n                    };\n                    spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));\n                }\n            }\n        },\n/*--------\nCHAT MESSAGE\n --------*/\n        handleInput = function(msg) {\n            var msgFormula = msg.content.split(/\\s+/);\n            var command = msgFormula[0].toUpperCase();\n            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {\n                if (!playerIsGM(msg.playerid)) {\n                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");\n                    return;\n                }\n                else {\n                    var option = msgFormula[1];\n                    if (option === undefined) {\n                        aurahelp();\n                        return;\n                    }\n                    switch (msgFormula[1].toUpperCase()) {\n                        case \"ON\":\n                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;\n                            aurahelp();\n                            break;\n                        case \"BAR\":\n                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"TINT\":\n                            state.HealthColors.auraTint = !state.HealthColors.auraTint;\n                            aurahelp();\n                            break;\n                        case \"PERC\":\n                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);\n                            aurahelp();\n                            break;\n                        case \"PC\":\n                            state.HealthColors.PCAura = !state.HealthColors.PCAura;\n                            aurahelp();\n                            break;\n                        case \"NPC\":\n                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;\n                            aurahelp();\n                            break;\n                        case \"GMNPC\":\n                            state.HealthColors.GM_NPCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"GMPC\":\n                            state.HealthColors.GM_PCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"PCNPC\":\n                            state.HealthColors.NPCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"PCPC\":\n                            state.HealthColors.PCNames = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"DEAD\":\n                            state.HealthColors.auraDead = !state.HealthColors.auraDead;\n                            aurahelp();\n                            break;\n                        case \"DEADFX\":\n                            state.HealthColors.auraDeadFX = msgFormula[2];\n                            aurahelp();\n                            break;\n                        case \"SIZE\":\n                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);\n                            aurahelp();\n                            break;\n                        case \"ONEOFF\":\n                            state.HealthColors.OneOff = !state.HealthColors.OneOff;\n                            aurahelp();\n                            break;\n                        case \"FX\":\n                            state.HealthColors.FX = !state.HealthColors.FX;\n                            aurahelp();\n                            break;\n                        case \"HEAL\":\n                            var UPPER = msgFormula[2];\n                            UPPER = UPPER.toUpperCase();\n                            state.HealthColors.HealFX = UPPER;\n                            aurahelp();\n                            break;\n                        case \"HURT\":\n                            var UPPER = msgFormula[2];\n                            UPPER = UPPER.toUpperCase();\n                            state.HealthColors.HurtFX = UPPER;\n                            aurahelp();\n                            break;\n                        default:\n                            return;\n                    }\n                }\n            }\n        },\n/*--------\nFUNCTIONS\n--------*/\n//WHISPER GM------------\n        GMW = function(text) {\n            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");\n        },\n//DEATH SOUND------------\n        PlayDeath = function(trackname) {\n            var track = findObjs({\n                type: 'jukeboxtrack',\n                title: trackname\n            })[0];\n            if (track) {\n                track.set('playing', false);\n                track.set('softstop', false);\n                track.set('volume', 50);\n                track.set('playing', true);\n            }\n            else {\n                log(\"No track found\");\n            }\n        },\n//CREATE USECOLOR ATTR------------\n        CreateAttrib = function(oCharacter) {\n            log(\"Creating USECOLOR\");\n            createObj(\"attribute\", {\n                name: 'USECOLOR',\n                current: 'YES',\n                characterid: oCharacter.id\n            });\n        },\n//SET TOKEN COLORS------------\n        TokenSet = function(obj, sizeSet, markerColor, pColor) {\n            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));\n            var scale = Pageon.get(\"scale_number\") / 10;\n            obj.set({\n                'aura1_radius': sizeSet * scale * 1.8,\n                'aura2_radius': sizeSet * scale * 0.1,\n                'aura1_color': markerColor,\n                'aura2_color': pColor,\n                'showplayers_aura1': true,\n                'showplayers_aura2': true,\n            });\n        },\n//HELP MENU------------\n        aurahelp = function() {\n            var img = \"http://worldcitizenfinancial.com/wp-content/uploads/2014/07/Light-Blue-Gradient-Texture-11-1024x576.jpg\";\n            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";\n            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';\n            var off = \"#A84D4D\";\n            var disable = \"#D6D6D6\";\n            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";\n            var FX = state.HealthColors.auraDeadFX.substring(0, 4);\n            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; background-image: url(' + img + '); color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--\n                HR + //--\n                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--\n                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--\n                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|None}\">' + FX + '</a><br>' + //--\n                HR + //--\n                'Global GM Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---\n                'Global GM Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--\n                HR + //--\n                ' Global PC Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--\n                ' Global PC Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--\n                HR + //--\n                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--\n                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--\n                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Sound Name?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--\n                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Sound Name?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--\n                HR + //--\n                '</div>');\n        },\n//OFF BUTTON COLORS------------\n        ButtonColor = function(state, off, disable) {\n            var color;\n            if (state == \"No\") color = off;\n            if (state == \"Off\") color = disable;\n            return color;\n        },\n//REMOVE ALL------------\n        SetAuraNone = function(obj) {\n            var tint = state.HealthColors.auraTint;\n            if (tint === true) {\n                obj.set({\n                    'tint_color': \"transparent\",\n                });\n            }\n            else {\n                obj.set({\n                    'aura1_color': \"\",\n                    'aura2_color': \"\",\n                });\n            }\n        },\n//SET TOKEN COLORS------------\n        newColor = function(ratio) {\n            var color = PercentToRGB(ratio, 100, 50);\n            var hex = rgbToHex(color.r, color.g, color.b);\n            return (hex);\n        },\n//PERC TO RGB------------\n        PercentToRGB = function (percent) {\n\t    if (percent === 100) percent = 99;\n\t    var r, g, b;\n\t    if (percent < 50) {\n\t        g = Math.floor(255 * (percent / 50));\n\t        r = 255;\n\t    } else {\n\t        g = 255;\n\t        r = Math.floor(255 * ((50 - percent % 50) / 50));\n\t    }\n\t    b = 0;\n\t    var Gradient = rgbToHex(r,g,b);\n\t    return Gradient;\n\t},\n//HEX TO RGB------------\n        HEXtoRGB = function(hex) {\n            let parts = hex.match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);\n            if (parts) {\n                let rgb = _.chain(parts)\n                    .rest()\n                    .map((d) => parseInt(d, 16))\n                    .value();\n                rgb.push(1.0);\n                return rgb;\n            }\n            return [0, 0, 0, 1.0];\n        },\n//RGB TO HEX COLOR------------\n        rgbToHex = function(r, g, b) {\n            var Color = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n            return Color;\n        },\n//CHECK INSTALL SET STATE------------\n        checkInstall = function() {\n            log('<' + ScriptName + ' v' + version + ' Ready>');\n            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {\n                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');\n                state.HealthColors = {\n                    schemaVersion: schemaVersion\n                };\n                state.HealthColors.version = version;\n            }\n            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off\n            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use\n            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?\n            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?\n            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?\n            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing\n            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status\n            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name\n            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?\n            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?\n            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?\n            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?\n            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?\n            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?\n            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR\n            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?\n        },\n        registerEventHandlers = function() {\n            on('chat:message', handleInput);\n            on(\"change:token\", handleToken);\n        };\n/*-------------\nRETURN OUTSIDE FUNCTIONS\n-----------*/\n    return {\n        CheckInstall: checkInstall,\n        RegisterEventHandlers: registerEventHandlers\n    };\n}());\n//On Ready\non('ready', function() {\n    'use strict';\n    HealthColors.CheckInstall();\n    HealthColors.RegisterEventHandlers();\n});\n","undoManager":{"mark":16,"position":100,"stack":[[{"start":{"row":96,"column":0},"end":{"row":96,"column":19},"action":"remove","lines":["\t\tif (miss !== 1) {"],"id":1340}],[{"start":{"row":96,"column":0},"end":{"row":97,"column":0},"action":"remove","lines":["",""],"id":1341}],[{"start":{"row":117,"column":0},"end":{"row":117,"column":3},"action":"remove","lines":["\t\t}"],"id":1342}],[{"start":{"row":96,"column":0},"end":{"row":96,"column":1},"action":"remove","lines":["\t"],"id":1343},{"start":{"row":97,"column":0},"end":{"row":97,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":98,"column":0},"end":{"row":98,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":99,"column":0},"end":{"row":99,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":100,"column":0},"end":{"row":100,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":101,"column":0},"end":{"row":101,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":102,"column":0},"end":{"row":102,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":103,"column":0},"end":{"row":103,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":104,"column":0},"end":{"row":104,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":105,"column":0},"end":{"row":105,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":106,"column":0},"end":{"row":106,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":107,"column":0},"end":{"row":107,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":108,"column":0},"end":{"row":108,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":109,"column":0},"end":{"row":109,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":110,"column":0},"end":{"row":110,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":111,"column":0},"end":{"row":111,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":112,"column":0},"end":{"row":112,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":113,"column":0},"end":{"row":113,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":114,"column":0},"end":{"row":114,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":115,"column":0},"end":{"row":115,"column":1},"action":"remove","lines":["\t"]},{"start":{"row":116,"column":0},"end":{"row":116,"column":1},"action":"remove","lines":["\t"]}],[{"start":{"row":116,"column":63},"end":{"row":117,"column":0},"action":"insert","lines":["",""],"id":1344},{"start":{"row":117,"column":0},"end":{"row":117,"column":2},"action":"insert","lines":["\t\t"]}],[{"start":{"row":117,"column":2},"end":{"row":117,"column":17},"action":"insert","lines":["if (miss !== 1)"],"id":1345}],[{"start":{"row":117,"column":11},"end":{"row":117,"column":12},"action":"remove","lines":["!"],"id":1346}],[{"start":{"row":117,"column":16},"end":{"row":117,"column":17},"action":"insert","lines":[" "],"id":1347}],[{"start":{"row":117,"column":17},"end":{"row":117,"column":32},"action":"insert","lines":["DamageRollRaw ="],"id":1348}],[{"start":{"row":117,"column":32},"end":{"row":117,"column":33},"action":"insert","lines":[" "],"id":1349}],[{"start":{"row":117,"column":33},"end":{"row":117,"column":34},"action":"insert","lines":["a"],"id":1350}],[{"start":{"row":117,"column":34},"end":{"row":117,"column":35},"action":"insert","lines":[";"],"id":1351}],[{"start":{"row":117,"column":33},"end":{"row":117,"column":34},"action":"remove","lines":["a"],"id":1352},{"start":{"row":117,"column":33},"end":{"row":117,"column":61},"action":"insert","lines":["\"<b>\" + DamageBonus + \"</b>\""]}],[{"start":{"row":117,"column":37},"end":{"row":117,"column":56},"action":"remove","lines":["\" + DamageBonus + \""],"id":1353},{"start":{"row":117,"column":37},"end":{"row":117,"column":38},"action":"insert","lines":["0"]}],[{"start":{"row":0,"column":0},"end":{"row":282,"column":0},"action":"remove","lines":["//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global PlaySound MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar MainSayDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar AmmoDiv = \"<div style='box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; margin:0px; padding:0px 0px 0px 0px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 1;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar boxcolor = getObj(\"player\", msg.playerid).get(\"color\");","        var bg_crit = \"background-image:-webkit-linear-gradient(top, \"+boxcolor+\" 0%,#010101 50%,#0a0a0a 53%,#4e4e4e 76%,#383838 87%,#1b1b1b 100%);\";","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\tboxcolor = '#831F29';","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","\t\t//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tboxcolor = \"#bbb\";","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","\t\t//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tif (miss == 1) DamageRollRaw = \"<b>0</b>\";","","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t\tDamageTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tAttackTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b>';","\t\t\tbg_crit = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a></div>\";","\t\t//--CRIT roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//FAIL roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:RED;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","\t\tvar pad = \"6px;\";","\t\tif (BottomText != \"\") pad = \"2px;\";","\t\tvar top = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 0px 0px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + who + \"  Attacks</b></div>\";","\t\tvar End = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; font-size: 16px ;text-align: center; padding: \" + pad + \" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 8px 8px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + BottomText + \"</div>\";","\t\tvar SendT = top + Main + End;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.5;'><strong style='font-size: 70%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 120%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"));","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"));","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"));","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"));","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy question if you know what you are doing!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in wall/floor/Tree/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];",""],"id":1354},{"start":{"row":0,"column":0},"end":{"row":283,"column":0},"action":"insert","lines":["//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global PlaySound MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar MainSayDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar AmmoDiv = \"<div style='box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; margin:0px; padding:0px 0px 0px 0px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 1;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar boxcolor = getObj(\"player\", msg.playerid).get(\"color\");","        var bg_crit = \"background-image:-webkit-linear-gradient(top, \"+boxcolor+\" 0%,#010101 50%,#0a0a0a 53%,#4e4e4e 76%,#383838 87%,#1b1b1b 100%);\";","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\tboxcolor = '#831F29';","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","\t\t//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tboxcolor = \"#bbb\";","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","\t\t//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";","\t\tif (miss == 1)  DTOTALS = \"\";","","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t\tDamageTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tAttackTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b>';","\t\t\tbg_crit = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";","\t\t//--CRIT roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//FAIL roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:RED;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","\t\tvar pad = \"6px;\";","\t\tif (BottomText != \"\") pad = \"2px;\";","\t\tvar top = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 0px 0px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + who + \"  Attacks</b></div>\";","\t\tvar End = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; font-size: 16px ;text-align: center; padding: \" + pad + \" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 8px 8px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + BottomText + \"</div>\";","\t\tvar SendT = top + Main + End;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.5;'><strong style='font-size: 70%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 120%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"));","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"));","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"));","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"));","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy question if you know what you are doing!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in wall/floor/Tree/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];",""]}],[{"start":{"row":0,"column":0},"end":{"row":283,"column":0},"action":"remove","lines":["//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global PlaySound MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar MainSayDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar AmmoDiv = \"<div style='box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; margin:0px; padding:0px 0px 0px 0px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 1;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar boxcolor = getObj(\"player\", msg.playerid).get(\"color\");","        var bg_crit = \"background-image:-webkit-linear-gradient(top, \"+boxcolor+\" 0%,#010101 50%,#0a0a0a 53%,#4e4e4e 76%,#383838 87%,#1b1b1b 100%);\";","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\tboxcolor = '#831F29';","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","\t\t//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tboxcolor = \"#bbb\";","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","\t\t//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";","\t\tif (miss == 1)  DTOTALS = \"\";","","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t\tDamageTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tAttackTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b>';","\t\t\tbg_crit = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";","\t\t//--CRIT roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//FAIL roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:RED;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","\t\tvar pad = \"6px;\";","\t\tif (BottomText != \"\") pad = \"2px;\";","\t\tvar top = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 0px 0px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + who + \"  Attacks</b></div>\";","\t\tvar End = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; font-size: 16px ;text-align: center; padding: \" + pad + \" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 8px 8px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + BottomText + \"</div>\";","\t\tvar SendT = top + Main + End;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.5;'><strong style='font-size: 70%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 120%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"));","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"));","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"));","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"));","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy question if you know what you are doing!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in wall/floor/Tree/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];",""],"id":1355},{"start":{"row":0,"column":0},"end":{"row":283,"column":0},"action":"insert","lines":["//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global PlaySound MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar MainSayDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar AmmoDiv = \"<div style='box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; margin:0px; padding:0px 0px 0px 0px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 5;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar boxcolor = getObj(\"player\", msg.playerid).get(\"color\");","        var bg_crit = \"background-image:-webkit-linear-gradient(top, \"+boxcolor+\" 0%,#010101 50%,#0a0a0a 53%,#4e4e4e 76%,#383838 87%,#1b1b1b 100%);\";","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\tboxcolor = '#831F29';","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","\t\t//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tboxcolor = \"#bbb\";","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","\t\t//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";","\t\tif (miss == 1)  DTOTALS = \"\";","","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t\tDamageTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tAttackTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b>';","\t\t\tbg_crit = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";","\t\t//--CRIT roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//FAIL roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><strong style='font-size: 150%;'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:RED;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","\t\tvar pad = \"6px;\";","\t\tif (BottomText != \"\") pad = \"2px;\";","\t\tvar top = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 0px 0px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + who + \"  Attacks</b></div>\";","\t\tvar End = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; font-size: 16px ;text-align: center; padding: \" + pad + \" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 8px 8px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + BottomText + \"</div>\";","\t\tvar SendT = top + Main + End;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.5;'><strong style='font-size: 70%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 120%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"));","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"));","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"));","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"));","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy see you and an easy target!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in Wall/Floor/Tree/Off Balance/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];",""]}],[{"start":{"row":0,"column":0},"end":{"row":283,"column":0},"action":"remove","lines":["//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global PlaySound MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar MainSayDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar AmmoDiv = \"<div style='box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; margin:0px; padding:0px 0px 0px 0px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 5;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar boxcolor = getObj(\"player\", msg.playerid).get(\"color\");","        var bg_crit = \"background-image:-webkit-linear-gradient(top, \"+boxcolor+\" 0%,#010101 50%,#0a0a0a 53%,#4e4e4e 76%,#383838 87%,#1b1b1b 100%);\";","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\tboxcolor = '#831F29';","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","\t\t//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tboxcolor = \"#bbb\";","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","\t\t//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";","\t\tif (miss == 1)  DTOTALS = \"\";","","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t\tDamageTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tAttackTotal = \"<a style='color:RED'><strong style='font-size: 110%;'>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b>';","\t\t\tbg_crit = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";","\t\t//--CRIT roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//FAIL roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><strong style='font-size: 150%;'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:RED;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","\t\tvar pad = \"6px;\";","\t\tif (BottomText != \"\") pad = \"2px;\";","\t\tvar top = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 0px 0px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + who + \"  Attacks</b></div>\";","\t\tvar End = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; font-size: 16px ;text-align: center; padding: \" + pad + \" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 8px 8px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + BottomText + \"</div>\";","\t\tvar SendT = top + Main + End;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.5;'><strong style='font-size: 70%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 120%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"));","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"));","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"));","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"));","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy see you and an easy target!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in Wall/Floor/Tree/Off Balance/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];",""],"id":1356},{"start":{"row":0,"column":0},"end":{"row":284,"column":0},"action":"insert","lines":["//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global PlaySound MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar MainSayDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar AmmoDiv = \"<div style='box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; margin:0px; padding:0px 0px 0px 0px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 1;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar boxcolor = getObj(\"player\", msg.playerid).get(\"color\");","        var bg_crit = \"background-image:-webkit-linear-gradient(top, \"+boxcolor+\" 0%,#0a0a0a 70%,#4e4e4e 84%,#383838 87%,#1b1b1b 100%);\";","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\tboxcolor = '#831F29';","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","\t\t//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tboxcolor = \"#bbb\";","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","\t\t//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";","\t\tif (miss == 1)  DTOTALS = \"\";","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t    var CritCheer = '<div style=\"width: 98%; height: 40px; border: solid #666666; overflow: hidden; position: relative;\"><img  src=\"https://media.giphy.com/media/11sBLVxNs7v6WA/giphy.gif\" style=\"position: absolute; top:-35px; left:0px;\"/></div>';","\t\t\tDamageTotal = \"<a style='color:RED'><strong>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a><br>\"+CritCheer;","\t\t\tAttackTotal = \"<a style='color:RED'><strong>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b><br>';","\t\t\tbg_crit = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";","//--CRIT roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//FAIL roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><strong style='font-size: 150%;'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:RED;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","\t\tvar pad = \"6px;\";","\t\tif (BottomText != \"\") pad = \"2px;\";","\t\tvar top = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 0px 0px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + who + \"  Attacks</b></div>\";","\t\tvar End = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; font-size: 16px ;text-align: center; padding: \" + pad + \" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 8px 8px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + BottomText + \"</div>\";","\t\tvar SendT = top + Main + End;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.5;'><strong style='font-size: 70%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 130%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"));","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"));","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"));","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"));","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy see you and an easy target!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in Wall/Floor/Tree/Off Balance/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];",""]}],[{"start":{"row":0,"column":0},"end":{"row":284,"column":0},"action":"remove","lines":["//!attack --[[1d20]] --[[3d6]] --saying! --ammotype","/*global PlaySound MakeRollNum log on findObjs randomInteger RollRight _ sendChat bShadow font getObj"," */","on('chat:message', function(msg) {","\tif (msg.type != \"api\") return;","\t//log(msg.content);","\tvar msgTxt = msg.content;","\tvar command = msgTxt.split(\" \", 1);","\tvar cWho = findObjs({_type: 'character',name: msg.who})[0];","\tif (cWho == undefined && msg.who.indexOf(\"(GM)\") == -1) {","\t\tcWho = RollRight(msg.playerid);","\t\tmsg.who = cWho.get(\"name\");","\t}","/*-----------CHECK API-----------*/","\tif (command == \"!attack\") {","/*-----------BOXES-----------*/","\t\tvar Main;","\t\tvar topimg = \"https://s3.amazonaws.com/files.staging.d20.io/images/181118/cN5ui3MXx87UBgVUgzwYTQ/med.jpg?141868063\";","\t\tvar TextShadow = \"-1px -1px #444, 1px -1px #444, -1px 1px #444, 1px 1px #444\";","\t\tvar SayParts = \"<div style='text-shadow: 1px 1px #000, -1px -1px #000, -1px 1px #000, 1px -1px #000; margin: 0em 0em 0em 0em;; font-size:8pt; display:inline-block; text-align: center; vertical-align:middle; padding: 0px 6px 0px 6px; border: 1px solid #000; border-radius: 3px; color: #FFF; background-image: url(\" + topimg + \");'>\";","\t\tvar MainSayDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family:\" + font + \"; font-size: x-small; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color:#CEC7B6; color: #000;'>\";","\t\tvar MainEvenDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #CEC7B6; color: #000;'>\";","\t\tvar MainOddDiv = \"<div style='box-shadow: \" + bShadow + \"; text-shadow: 1px 1px #878787; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 1px; border-left: 1px solid #000; border-right: 1px solid #000; border-radius: 0px; background-color: #C0B9A8; color: #000;'>\";","\t\tvar RollDiv = \"<div style='margin: 0em 0.1em 0.1em 0em; font-size: 10pt; text-shadow: \" + TextShadow + \"; width: 15px; height: 15px; line-height: 15px; display:inline-block; text-align:center; padding: 0px 1px 0px 0px; border: 1px solid #000; border-radius: 3px; color: #FFF;\";","\t\tvar AmmoDiv = \"<div style='box-shadow: \" + bShadow + \"; font-family: \" + font + \"; font-size: 8pt; text-align: center; margin:0px; padding:0px 0px 0px 0px; border-left: 1px solid #000; border-right: 1px solid #000; border-top: 1px solid #000; border-radius: 0px; color: #000;\";","/*---------------------------*/","\t\tvar who = msg.who;","\t\tmsg.content = MakeRollNum(msg.content, msg.inlinerolls);","//check rolls---------------------","\t\tvar AttackRolls = msg.inlinerolls[0];","\t\tvar DamageRolls = msg.inlinerolls[1];","//define var----------------------","\t\tif (AttackRolls === undefined || DamageRolls === undefined) {","\t\t\tsendChat('', \"/direct <B><I>bad macro!\");","\t\t\treturn;","\t\t}","\t\tmsgFormula = msgTxt.split(\" --\");","\t\tvar Lucky = 20;","\t\tvar failRange = 1;","\t\tvar DamageRollRaw = \"\";","\t\tvar BottomText = \"\";","\t\tvar fumble = 0;","\t\tvar miss = 0;","\t\tvar boxcolor = getObj(\"player\", msg.playerid).get(\"color\");","        var bg_crit = \"background-image:-webkit-linear-gradient(top, \"+boxcolor+\" 0%,#0a0a0a 70%,#4e4e4e 84%,#383838 87%,#1b1b1b 100%);\";","\t\tvar crit_img = \"http:\\\\//media.giphy.com/media/3KqZp8MBaf1Ty/giphy.gif\";","\t\tvar fail_img = \"http:\\\\//fc06.deviantart.net/fs70/f/2013/076/5/2/_tutorial__creating_an_animated_light_pulse_in_ps_by_d_k0d3-d5ybir4.gif\";","\t\tif (msg.who == \"GM (GM)\") {","\t\t\tboxcolor = '#831F29';","\t\t\twho = \"NPC\";","\t\t}","/*-----------START-----------*/","//Check for GUN","\t\tif (who !== \"NPC\") {","\t\t\tif (msgFormula[4] === undefined) msgFormula[4] = msgFormula[3];","\t\t\tif (msgFormula[4] !== undefined) {","\t\t\t\tvar gunleng = msgFormula[4].length - 1;","\t\t\t\tvar ammo = parseInt(msgFormula[4].substr(gunleng), 10);","\t\t\t\tif (!isNaN(ammo)) {","\t\t\t\t\tgunleng = msgFormula[4].length - 2;","\t\t\t\t\tvar gun = msgFormula[4].substr(0, gunleng);","\t\t\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (FindGun == undefined) {","\t\t\t\t\t\tsendChat('Error', \"/desc \" + msg.who + \" You do not own a  \" + gun);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\tvar GunName = FindGun.get(\"name\");","\t\t\t\t\tvar leng = GunName.length - 5;","\t\t\t\t\tleng = GunName.substr(0, leng);","\t\t\t\t\tvar ammo0 = findObjs({name: leng + \"_WEAPpay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\t\t\tif (ammo0 == undefined) {","\t\t\t\t\t\tammo0 = FindGun;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","/*-----------ATTACK PARTS-----------*/","//--Attack Modifier","\t\tvar AttackBonus;","\t\tvar AttackRollText;","\t\tif (AttackRolls.results.rolls[1] === undefined) AttackBonus = \"\";","\t\telse AttackBonus = (AttackRolls.results.rolls[1].expr);","\t\tvar AttackRollRaw = AttackRolls.results.rolls[0].results[0]['v'];","\t\t//Attack total and type","\t\tvar AttackTotal = (AttackRolls.results.total);","\t\tvar Atype = \"<a style='color:RED'>\" + AttackRolls.expression + \"</a>\";","//--Set Miss","\t\tif (AttackRollRaw <= 3) {","\t\t\tAttackRollText = RollDiv + \"background-color:#A80000;'>\" + AttackRollRaw + \"</div>\";","\t\t\tBottomText = BottomText + \" \" + 'MISS';","\t\t\tboxcolor = \"#bbb\";","\t\t\tvar miss = 1;","\t\t}","\t\telse AttackRollText = RollDiv + \"background-color:#696969;'>\" + AttackRollRaw + \"</div>\";","/*-----------DAMAGE PARTS-----------*/","//--Damage modifier","\t\tvar DamageBonus;","\t\tif (DamageRolls.results.rolls[1] === undefined) DamageBonus = \"\";","\t\telse DamageBonus = (DamageRolls.results.rolls[1].expr);","\t\t//--Set damage total","\t\tvar DamageTotal = DamageRolls.results.total;","\t\t//--Make damage text for all rolls","\t\tvar dam = DamageRolls.results.rolls[0];","\t\tvar i = 0;","\t\twhile (dam.results[i] !== undefined) {","\t\t\tvar dNum = dam.results[i]['v'];","\t\t\tvar num;","\t\t\tvar ddimg = \"http://image.blingee.com.s3.amazonaws.com/images19/content/output/000/000/000/061/788808721_1076628.gif?4\";","\t\t\tvar bg_max = \"background-position:center; background-image: url(\" + ddimg + \");\";","\t\t\tif (dNum == 1) num = RollDiv + \"background-color:#A80000;'>\" + dNum + \"</div></b></a>\";","\t\t\telse if (dNum == DamageRolls.results.rolls[0].sides) num = RollDiv + \"background-color:#00A120;\" + bg_max + \"'><b>\" + dNum + \"</b></div></b></a>\";","\t\t\telse num = RollDiv + \"background-color:#696969;'>\" + dNum + \"</div>\";","\t\t\tDamageRollRaw = DamageRollRaw + \"\" + (num);","\t\t\ti++;","\t\t}","\t\tvar Dtype = \"<a style='color:RED;'>\" + DamageRolls.expression + \"</a>\";","\t\tDamageRollRaw = DamageRollRaw + \"<b>\" + DamageBonus + \"</b>\";","\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a>\";","\t\tif (miss == 1)  DTOTALS = \"\";","//--Set Double Damage","\t\tif (AttackRollRaw >= 20) {","\t\t    var CritCheer = '<div style=\"width: 98%; height: 40px; border: solid #666666; overflow: hidden; position: relative;\"><img  src=\"https://media.giphy.com/media/11sBLVxNs7v6WA/giphy.gif\" style=\"position: absolute; top:-35px; left:0px;\"/></div>';","\t\t\tDamageTotal = \"<a style='color:RED'><strong>\" + DamageTotal * 2 + \"!</strong></a>\";","\t\t\tvar DTOTALS = Dtype + \"<b> Damage:<br></b>\" + DamageRollRaw + \"<b> = <a style='color:BLUE'>\" + DamageTotal + \"</b></a><br>\"+CritCheer;","\t\t\tAttackTotal = \"<a style='color:RED'><strong>\" + AttackTotal + \"!</strong></a>\";","\t\t\tBottomText = BottomText + \" \" + '<b>DOUBLE DAMAGE!</b><BR><b>(NATURAL 20!)</b><br>';","\t\t\tbg_crit = \"background-position:center; background-image: url(\" + crit_img + \");\";","\t\t\tPlaySound('Critical', 9000);","\t\t}","//set motto","\t\tif (msgFormula[3] !== undefined) {","\t\t\tvar WarCryleng = msgFormula[3].length - 1;","\t\t\tvar sayingCheck = parseInt(msgFormula[3].substr(WarCryleng), 10);","\t\t\tif (isNaN(sayingCheck)) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t}","\t\t\telse if (msgFormula[3] !== undefined && msgFormula[4] == undefined) {","\t\t\t\tWarCry = msgFormula[3].toUpperCase();","\t\t\t\tWarCryleng = msgFormula[3].length - 2;","\t\t\t\tvar WarCry = msgFormula[3].substr(0, WarCryleng).toUpperCase();","\t\t\t}","\t\t}","\t\telse {","\t\t\tWarCry = \"ATTACK!\";","\t\t}","//CHATBOX PARTS----------------","\t\tMain = MainSayDiv + SayParts + \"<b><i><marquee><img src='logo.jpg'></marquee> ●\" + WarCry + \"●</i></b></div></div>\";","\t\tMain = Main + MainOddDiv + Atype + \" <b>To Hit: </b>\" + AttackRollText + \"<b>\" + AttackBonus + \" = <a style='color:BLUE'>\" + AttackTotal + \"</b></a></div>\";","\t\tMain = Main + MainEvenDiv + DTOTALS + \"</div>\";","//--CRIT roll","\t\tvar IsLucky = randomInteger(Lucky);","\t\tif (IsLucky >= Lucky && AttackRollRaw > 4) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><b>Lucky Shot!: \" + aLoc[Math.floor(Math.random() * aLoc.length)] + \"</b></div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(http:\\\\//i.imgur.com/cFiEs5R.gif);\";","\t\t\tBottomText = BottomText + \" \" + SayParts + \"<b><i>●LUCKY SHOT●</i></b></div></div>\";","","//FAIL roll","\t\t}","\t\tif (AttackRollRaw <= failRange) {","\t\t\tMain = Main + MainOddDiv + \"<a style = 'color:PURPLE'><strong style='font-size: 150%;'><b>Fumble!: \" + aFum[Math.floor(Math.random() * aFum.length)] + \"</div>\";","\t\t\tbg_crit = \"background-position:50% 54%; background-image: url(\" + fail_img + \");\";","\t\t\tBottomText = BottomText + \" \" + 'FUMBLE';","\t\t\tfumble = 1;","\t\t}","/*-----------","AMMO PARTS","-----------*/","\t\tif (FindGun !== undefined && who !== \"NPC\" && ammo0 !== undefined) {","\t\t\tvar ammoleng = msgFormula[4].length - 1;","\t\t\tvar ammo = parseInt(msgFormula[4].substr(ammoleng));","\t\t\tvar ammoC = parseInt(ammo);","\t\t\tif (ammoC === undefined || isNaN(ammoC)) ammoC = 1;","\t\t\tvar cAmmo = parseInt(ammo0.get(\"current\"));","\t\t\tvar mAmmo = parseInt(ammo0.get(\"max\"));","\t\t\tif (isNaN(cAmmo) || isNaN(mAmmo)) {","\t\t\t\tsendChat('Error', \"/desc Set ammo for  \" + gun);","\t\t\t\treturn;","\t\t\t}","\t\t\tif (mAmmo == 0) {}","\t\t\telse if (cAmmo <= 0 || cAmmo < ammoC) {","\t\t\t\tcAmmo = \"0\";","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tMain = AmmoDiv + \"background-color:RED;'><b><i>Not Enough \" + gun + \" ammo left in clip.</div>\";","\t\t\t}","\t\t\telse if (cAmmo <= 3 || cAmmo < ammoC) {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 3px;\"><div style=\"background-color: red; width: ' + per + '%; height: 5px; border-radius: 10px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:RED;'><b><i>\" + cAmmo + \" \" + gun + \" ammo left in clip.</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t\telse {","\t\t\t\tcAmmo = cAmmo - ammoC;","\t\t\t\tammo0.set('current', cAmmo);","\t\t\t\tvar per = (cAmmo / mAmmo) * 100;","\t\t\t\tvar ammoT = '<div style=\"border: 2px solid #333; background-color: #0D0D0D; border-radius: 13px; padding: 1px;\"><div style=\"background-color: orange; width: ' + per + '%; height: 3px; border-radius: 10px; margins: 0px;\"></div></div>';","\t\t\t\tMain = Main + AmmoDiv + \"background-color:#A8A191;'><b><i>\" + cAmmo + \" of \" + mAmmo + \" \" + gun + \" ammo left</b></i>\" + ammoT + \"</div>\";","\t\t\t}","\t\t}","/*-----------SEND CHAT-----------*/","\t\tvar pad = \"6px;\";","\t\tif (BottomText != \"\") pad = \"2px;\";","\t\tvar top = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; text-align: center; vertical-align: middle; padding: 0px 0px; margin-top: 0.2em; border: 1px solid #000; border-radius: 10px 10px 0px 0px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + who + \"  Attacks</b></div>\";","\t\tvar End = \"<div style='\" + bg_crit + \" box-shadow: \" + bShadow + \"; text-shadow: -1px -1px #000, 1px -1px #000, -1px 1px #000, 2px 2px #000; font-family: \" + font + \"; font-size: 16px ;text-align: center; padding: \" + pad + \" vertical-align: middle; border: 1px solid #000; border-radius: 0px 0px 8px 8px; color: #FFFFFF; background-color:\" + boxcolor + \";'><b>\" + BottomText + \"</div>\";","\t\tvar SendT = top + Main + End;","\t\tif (AttackRollRaw <= 3 && fumble != 1) {","\t\t\tSendT = \"<div style='opacity: 0.5;'><strong style='font-size: 70%;'>\" + SendT + \"</strong></div>\";","\t\t}","\t\tif (AttackRollRaw >= 20) {","\t\t\tSendT = \"<strong style='font-size: 130%;'>\" + SendT + \"</strong>\";","\t\t}","\t\tsendChat(who, '/direct ' + SendT);","\t\tPlaySound('dice', 9000);","\t\treturn;","\t}","","//----------------------------","//RELOAD----------------","//----------------------------","\tif (command == \"!reload\") {","\t\tif (cWho !== undefined) {","\t\t\tvar msgFormula = msgTxt.split(\" --\");","\t\t\tvar gun = msgFormula[1];","\t\t\tvar FindGun = findObjs({current: gun,type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (FindGun == undefined) {","\t\t\t\tsendChat('', '/desc ' + msg.who + ': <b>ammo not found</b>');","\t\t\t\treturn","\t\t\t}","\t\t\tClips = 0;","\t\t\tvar attName = FindGun.get(\"name\");","\t\t\tvar Ammo0 = findObjs({name: attName + \"pay\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Ammo1 = findObjs({name: attName + \"Rounds\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tvar Clipsc = findObjs({name: attName + \"clip\",type: \"attribute\",_characterid: cWho.id}, {caseInsensitive: true})[0];","\t\t\tif (Clipsc != undefined) {","\t\t\t\tvar Clips = parseInt(Clipsc.get(\"current\"));","\t\t\t}","\t\t\tvar cWep = parseInt(Ammo0.get(\"current\"));","\t\t\tvar mWep = parseInt(Ammo0.get(\"max\"));","\t\t\tvar cAmmo = parseInt(Ammo1.get(\"current\"));","\t\t\tif (cAmmo <= 0) {","\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' NO AMMO TO RELOAD!</div>';","\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t}","\t\t\telse {","\t\t\t\tvar needed = mWep - cWep;","\t\t\t\tif (needed >= cAmmo) {","\t\t\t\t\tneeded = cAmmo;","\t\t\t\t}","\t\t\t\tif (Clips == 10) {","\t\t\t\t\tneeded = 1;","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = cAmmo;","\t\t\t\t\tAmmo0.set('current', mWep);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>● \" + msg.who + ' is reloading: ' + needed + \" clips on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + 'Clips)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tcAmmo = cAmmo - needed;","\t\t\t\t\tvar reloads = Math.round((cAmmo / mWep) * 10) / 10;","\t\t\t\t\tAmmo0.set('current', cWep + needed);","\t\t\t\t\tAmmo1.set('current', cAmmo);","\t\t\t\t\tvar help = OuterDiv + iPart + \"background-color:#A80000;'><b>\" + msg.who + ' is reloading ' + needed + \" Ammo on:<br>● \" + msgFormula[1] + ' ●<br>' + cAmmo + ' left(' + reloads + ' reloads)</div>';","\t\t\t\t\tsendChat('', '/direct ' + help);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","});","//---AUTO LOCATION ROLLS","var aLoc = [\"Head\", \"Left Arm\", \"Right Arm\", \"Left Leg\", \"Right Leg\", \"..Dangly Bits! (Main Body)\", \"FREE ATTACK!\"];","//---FUMBLE ROLLS","var aFum = [","\t\"Hit a totally different friendly target in general direction of aimed target (if possible)\",","\t\"Ungracefully fumbled the attack!, lose next attack\",","\t\"Got something in eye, lose this attack\",","\t\"Missed so badly, it makes the enemy see you and an easy target!\",","\t\"Total gun jam/broke weapon(or limb!).. useless this fight. Must get fixed.\",","\t\"Tripped!, next attack to get up\",","\t\"Miss and weapon jam! (GUN) jams, (MELEE) Missed and stuck in Wall/Floor/Tree/Off Balance/etc loose next attack\",","\t\"Missed, and draws sole aggression of the target\",","\t\"Somehow hit a Flying Squirrel!\",","\t\"Failed so badly nearest ally falls back to help.\"","];",""],"id":1357},{"start":{"row":0,"column":0},"end":{"row":478,"column":0},"action":"insert","lines":["/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","Last Updated 2/23/2017","*/","/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","var HealthColors = HealthColors || (function() {","    'use strict';","    var version = '1.1.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","/*--------","ON TOKEN UPDATE","--------*/","        handleToken = function(obj, prev) {","            var ColorOn = state.HealthColors.auraColorOn;","            var bar = state.HealthColors.auraBar;","            var tint = state.HealthColors.auraTint;","            var onPerc = state.HealthColors.auraPerc;","            var dead = state.HealthColors.auraDead;","            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","                if (ColorOn !== true) return; //Check Toggle","//CHECK BARS ------------","                if (obj.get(bar + \"_max\") === \"\" || obj.get(bar + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(bar + \"_max\"), 10);","                var curValue = parseInt(obj.get(bar + \"_value\"), 10);","                var prevValue = prev[bar + \"_value\"];","                if (isNaN(maxValue) && isNaN(curValue)) return;","//CALC PERCENTAGE------------","                var percReal = Math.round((curValue / maxValue) * 100);","                var perc = Math.round((curValue / maxValue) * 120);","//SET DEAD------------","                if (curValue <= 0 && dead === true) {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                    return;","                }","                else if (dead === true) obj.set(\"status_dead\", false);","//PERCENTAGE OFF------------","                if (percReal > onPerc) {","                    SetAuraNone(obj);","                    return;","                }","//CHECK DISABLED TOKEN------------","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if (oCharacter !== undefined) {","                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter);","                    var UseAuraAtt = findObjs({","                        name: \"USECOLOR\",","                        _type: \"attribute\",","                        characterid: oCharacter.id","                    }, {","                        caseInsensitive: true","                    })[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if (UseAura != \"YES\" && UseAura != \"NO\") {","                        UseAuraAtt.set('current', \"YES\");","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                    if (UseAura == \"NO\") return;","                }","//CHECK MONSTER OR PLAYER------------","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","//IF PLAYER------------","                var markerColor = newColor(perc);","                var pColor = '#ffffff';","                var GM = '';","                var PC = '';","                if (type == 'Player') {","                    if (state.HealthColors.PCAura === false) return;","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if (player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.PCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","","                }","//IF MONSTER------------","                if (type == 'Monster') {","                    if (state.HealthColors.NPCAura === false) return;","                    GM = state.HealthColors.GM_NPCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.NPCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","                }","//SET AURA|TINT------------","                if (tint === true) obj.set({","                    'tint_color': markerColor,","                });","                else {","                    TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","//SPURT FX------------","                if (state.HealthColors.FX == true) {","                    if (curValue == prevValue || prevValue == \"\") return;","                    var amount = Math.abs(curValue-prevValue);","                    var HitSize = (amount/maxValue)*4;","                    var HitSize = Math.max(HitSize, 0.5);","                    GMW(HitSize);","                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);","                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                    var size = obj.get(\"height\");","                    var multi = size / 70;","                    var StartColor = HurtColor;","                    var EndColor = [255, 0, 0, 0];","                    if (curValue > prevValue && prevValue !== \"\") {","                        StartColor = HealColor;","                        EndColor = [255, 255, 255, 0];","                    }","                    var HITS = {","                        \"maxParticles\": 150*HitSize,","                        \"duration\": 50*HitSize,","                        \"size\": size / 10*HitSize,","                        \"sizeRandom\": 3,","                        \"lifeSpan\": 25,","                        \"lifeSpanRandom\": 5,","                        \"speed\": multi * 8,","                        \"speedRandom\": multi * 2,","                        \"gravity\": {","                            \"x\": multi * 0.01,","                            \"y\": multi * 0.65","                        },","                        \"angle\": 270,","                        \"angleRandom\": 15,","                        \"emissionRate\": 5,","                        \"startColour\": StartColor,","                        \"endColour\": EndColor,","                    };","                    spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));","                }","            }","        },","/*--------","CHAT MESSAGE"," --------*/","        handleInput = function(msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                if (!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    var option = msgFormula[1];","                    if (option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch (msgFormula[1].toUpperCase()) {","                        case \"ON\":","                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                            aurahelp();","                            break;","                        case \"BAR\":","                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                            aurahelp();","                            break;","                        case \"TINT\":","                            state.HealthColors.auraTint = !state.HealthColors.auraTint;","                            aurahelp();","                            break;","                        case \"PERC\":","                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);","                            aurahelp();","                            break;","                        case \"PC\":","                            state.HealthColors.PCAura = !state.HealthColors.PCAura;","                            aurahelp();","                            break;","                        case \"NPC\":","                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                            aurahelp();","                            break;","                        case \"GMNPC\":","                            state.HealthColors.GM_NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"GMPC\":","                            state.HealthColors.GM_PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCNPC\":","                            state.HealthColors.NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCPC\":","                            state.HealthColors.PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"DEAD\":","                            state.HealthColors.auraDead = !state.HealthColors.auraDead;","                            aurahelp();","                            break;","                        case \"DEADFX\":","                            state.HealthColors.auraDeadFX = msgFormula[2];","                            aurahelp();","                            break;","                        case \"SIZE\":","                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                            aurahelp();","                            break;","                        case \"ONEOFF\":","                            state.HealthColors.OneOff = !state.HealthColors.OneOff;","                            aurahelp();","                            break;","                        case \"FX\":","                            state.HealthColors.FX = !state.HealthColors.FX;","                            aurahelp();","                            break;","                        case \"HEAL\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HealFX = UPPER;","                            aurahelp();","                            break;","                        case \"HURT\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HurtFX = UPPER;","                            aurahelp();","                            break;","                        default:","                            return;","                    }","                }","            }","        },","/*--------","FUNCTIONS","--------*/","//WHISPER GM------------","        GMW = function(text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","//DEATH SOUND------------","        PlayDeath = function(trackname) {","            var track = findObjs({","                type: 'jukeboxtrack',","                title: trackname","            })[0];","            if (track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(\"No track found\");","            }","        },","//CREATE USECOLOR ATTR------------","        CreateAttrib = function(oCharacter) {","            log(\"Creating USECOLOR\");","            createObj(\"attribute\", {","                name: 'USECOLOR',","                current: 'YES',","                characterid: oCharacter.id","            });","        },","//SET TOKEN COLORS------------","        TokenSet = function(obj, sizeSet, markerColor, pColor) {","            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","            var scale = Pageon.get(\"scale_number\") / 10;","            obj.set({","                'aura1_radius': sizeSet * scale * 1.8,","                'aura2_radius': sizeSet * scale * 0.1,","                'aura1_color': markerColor,","                'aura2_color': pColor,","                'showplayers_aura1': true,","                'showplayers_aura2': true,","            });","        },","//HELP MENU------------","        aurahelp = function() {","            var img = \"http://worldcitizenfinancial.com/wp-content/uploads/2014/07/Light-Blue-Gradient-Texture-11-1024x576.jpg\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; background-image: url(' + img + '); color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--","                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|None}\">' + FX + '</a><br>' + //--","                HR + //--","                'Global GM Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                'Global GM Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                HR + //--","                ' Global PC Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                ' Global PC Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Sound Name?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Sound Name?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","//OFF BUTTON COLORS------------","        ButtonColor = function(state, off, disable) {","            var color;","            if (state == \"No\") color = off;","            if (state == \"Off\") color = disable;","            return color;","        },","//REMOVE ALL------------","        SetAuraNone = function(obj) {","            var tint = state.HealthColors.auraTint;","            if (tint === true) {","                obj.set({","                    'tint_color': \"transparent\",","                });","            }","            else {","                obj.set({","                    'aura1_color': \"\",","                    'aura2_color': \"\",","                });","            }","        },","//SET TOKEN COLORS------------","        newColor = function(ratio) {","            var color = hsl2rgb(ratio, 100, 50);","            var hex = rgbToHex(color.r, color.g, color.b);","            return (hex);","        },","//HEX TO RGB------------","        HEXtoRGB = function(hex) {","            let parts = hex.match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if (parts) {","                let rgb = _.chain(parts)","                    .rest()","                    .map((d) => parseInt(d, 16))","                    .value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 1.0];","        },","//RGB TO HEX COLOR------------","        rgbToHex = function(r, g, b) {","            return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","        },","//HSL TO RGB COLOR------------","        hsl2rgb = function(h, s, l) {","            var r, g, b, m, c, x;","            if (!isFinite(h)) h = 0;","            if (!isFinite(s)) s = 0;","            if (!isFinite(l)) l = 0;","            h /= 60;","            if (h < 0) h = 6 - (-h % 6);","            h %= 6;","            s = Math.max(0, Math.min(1, s / 100));","            l = Math.max(0, Math.min(1, l / 100));","            c = (1 - Math.abs((2 * l) - 1)) * s;","            x = c * (1 - Math.abs((h % 2) - 1));","            if (h < 1) {","                r = c;","                g = x;","                b = 0;","            }","            else if (h < 2) {","                r = x;","                g = c;","                b = 0;","            }","            else if (h < 3) {","                r = 0;","                g = c;","                b = x;","            }","            else if (h < 4) {","                r = 0;","                g = x;","                b = c;","            }","            else if (h < 5) {","                r = x;","                g = 0;","                b = c;","            }","            else {","                r = c;","                g = 0;","                b = x;","            }","            m = l - c / 2;","            r = Math.round((r + m) * 255);","            g = Math.round((g + m) * 255);","            b = Math.round((b + m) * 255);","            return {","                r: r,","                g: g,","                b: b","            };","        },","//CHECK INSTALL SET STATE------------","        checkInstall = function() {","            log('<' + ScriptName + ' v' + version + ' Ready>');","            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {","                    schemaVersion: schemaVersion","                };","                state.HealthColors.version = version;","            }","            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing","            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status","            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","        },","        registerEventHandlers = function() {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","        };","/*-------------","RETURN OUTSIDE FUNCTIONS","-----------*/","    return {","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function() {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});",""]}],[{"start":{"row":362,"column":10},"end":{"row":363,"column":0},"action":"insert","lines":["",""],"id":1358},{"start":{"row":363,"column":0},"end":{"row":363,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":363,"column":8},"end":{"row":382,"column":1},"action":"insert","lines":["function percentToRGB(percent) {","    if (percent === 100) {","        percent = 99","    }","    var r, g, b;","","    if (percent < 50) {","        // green to yellow","        r = Math.floor(255 * (percent / 50));","        g = 255;","","    } else {","        // yellow to red","        r = 255;","        g = Math.floor(255 * ((50 - percent % 50) / 50));","    }","    b = 0;","","    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";","}"],"id":1359}],[{"start":{"row":382,"column":1},"end":{"row":382,"column":2},"action":"insert","lines":[","],"id":1360}],[{"start":{"row":363,"column":17},"end":{"row":363,"column":29},"action":"remove","lines":["percentToRGB"],"id":1361}],[{"start":{"row":363,"column":8},"end":{"row":363,"column":20},"action":"insert","lines":["percentToRGB"],"id":1362}],[{"start":{"row":363,"column":20},"end":{"row":363,"column":21},"action":"insert","lines":[" "],"id":1363}],[{"start":{"row":363,"column":21},"end":{"row":363,"column":22},"action":"insert","lines":["="],"id":1364}],[{"start":{"row":363,"column":22},"end":{"row":363,"column":23},"action":"insert","lines":[" "],"id":1365}],[{"start":{"row":372,"column":16},"end":{"row":373,"column":0},"action":"remove","lines":["",""],"id":1366}],[{"start":{"row":368,"column":0},"end":{"row":369,"column":0},"action":"remove","lines":["",""],"id":1367}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":["{"],"id":1368}],[{"start":{"row":364,"column":25},"end":{"row":365,"column":0},"action":"remove","lines":["",""],"id":1369}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1370}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1371}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1372}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1373}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1374}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1375}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1376}],[{"start":{"row":364,"column":25},"end":{"row":364,"column":26},"action":"remove","lines":[" "],"id":1377}],[{"start":{"row":364,"column":37},"end":{"row":365,"column":0},"action":"remove","lines":["",""],"id":1378}],[{"start":{"row":364,"column":37},"end":{"row":364,"column":38},"action":"remove","lines":[" "],"id":1379}],[{"start":{"row":364,"column":37},"end":{"row":364,"column":38},"action":"remove","lines":[" "],"id":1380}],[{"start":{"row":364,"column":37},"end":{"row":364,"column":38},"action":"remove","lines":[" "],"id":1381}],[{"start":{"row":364,"column":37},"end":{"row":364,"column":38},"action":"remove","lines":[" "],"id":1382}],[{"start":{"row":364,"column":37},"end":{"row":364,"column":38},"action":"remove","lines":["}"],"id":1383}],[{"start":{"row":364,"column":37},"end":{"row":364,"column":38},"action":"insert","lines":[";"],"id":1384}],[{"start":{"row":375,"column":10},"end":{"row":376,"column":0},"action":"remove","lines":["",""],"id":1385}],[{"start":{"row":364,"column":0},"end":{"row":364,"column":1},"action":"insert","lines":["\t"],"id":1386},{"start":{"row":365,"column":0},"end":{"row":365,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":366,"column":0},"end":{"row":366,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":367,"column":0},"end":{"row":367,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":368,"column":0},"end":{"row":368,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":369,"column":0},"end":{"row":369,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":370,"column":0},"end":{"row":370,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":371,"column":0},"end":{"row":371,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":372,"column":0},"end":{"row":372,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":373,"column":0},"end":{"row":373,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":374,"column":0},"end":{"row":374,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":375,"column":0},"end":{"row":375,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":376,"column":0},"end":{"row":376,"column":1},"action":"insert","lines":["\t"]},{"start":{"row":377,"column":0},"end":{"row":377,"column":1},"action":"insert","lines":["\t"]}],[{"start":{"row":30,"column":71},"end":{"row":31,"column":0},"action":"insert","lines":["",""],"id":1387},{"start":{"row":31,"column":0},"end":{"row":31,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":31,"column":16},"end":{"row":31,"column":28},"action":"insert","lines":["percentToRGB"],"id":1388}],[{"start":{"row":31,"column":28},"end":{"row":31,"column":30},"action":"insert","lines":["()"],"id":1389}],[{"start":{"row":31,"column":29},"end":{"row":31,"column":36},"action":"insert","lines":["percRea"],"id":1390}],[{"start":{"row":31,"column":36},"end":{"row":31,"column":37},"action":"insert","lines":["l"],"id":1391}],[{"start":{"row":31,"column":38},"end":{"row":31,"column":39},"action":"insert","lines":[";"],"id":1392}],[{"start":{"row":31,"column":39},"end":{"row":32,"column":0},"action":"insert","lines":["",""],"id":1393},{"start":{"row":32,"column":0},"end":{"row":32,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":32,"column":16},"end":{"row":32,"column":17},"action":"insert","lines":["G"],"id":1394}],[{"start":{"row":32,"column":17},"end":{"row":32,"column":18},"action":"insert","lines":["W"],"id":1395}],[{"start":{"row":32,"column":17},"end":{"row":32,"column":18},"action":"remove","lines":["W"],"id":1396}],[{"start":{"row":32,"column":17},"end":{"row":32,"column":18},"action":"insert","lines":["M"],"id":1397}],[{"start":{"row":32,"column":18},"end":{"row":32,"column":19},"action":"insert","lines":["W"],"id":1398}],[{"start":{"row":32,"column":19},"end":{"row":32,"column":21},"action":"insert","lines":["()"],"id":1399}],[{"start":{"row":31,"column":16},"end":{"row":31,"column":17},"action":"insert","lines":["v"],"id":1400}],[{"start":{"row":31,"column":17},"end":{"row":31,"column":18},"action":"insert","lines":["a"],"id":1401}],[{"start":{"row":31,"column":18},"end":{"row":31,"column":19},"action":"insert","lines":["r"],"id":1402}],[{"start":{"row":31,"column":19},"end":{"row":31,"column":20},"action":"insert","lines":[" "],"id":1403}],[{"start":{"row":31,"column":20},"end":{"row":31,"column":21},"action":"insert","lines":["t"],"id":1404}],[{"start":{"row":31,"column":21},"end":{"row":31,"column":22},"action":"insert","lines":["e"],"id":1405}],[{"start":{"row":31,"column":22},"end":{"row":31,"column":23},"action":"insert","lines":["m"],"id":1406}],[{"start":{"row":31,"column":23},"end":{"row":31,"column":24},"action":"insert","lines":["p"],"id":1407}],[{"start":{"row":31,"column":24},"end":{"row":31,"column":25},"action":"insert","lines":["1"],"id":1408}],[{"start":{"row":31,"column":25},"end":{"row":31,"column":26},"action":"insert","lines":[" "],"id":1409}],[{"start":{"row":31,"column":26},"end":{"row":31,"column":27},"action":"insert","lines":["="],"id":1410}],[{"start":{"row":31,"column":27},"end":{"row":31,"column":28},"action":"insert","lines":[" "],"id":1411}],[{"start":{"row":32,"column":20},"end":{"row":32,"column":21},"action":"insert","lines":["t"],"id":1412}],[{"start":{"row":32,"column":21},"end":{"row":32,"column":22},"action":"insert","lines":["e"],"id":1413}],[{"start":{"row":32,"column":22},"end":{"row":32,"column":23},"action":"insert","lines":["m"],"id":1414}],[{"start":{"row":32,"column":23},"end":{"row":32,"column":24},"action":"insert","lines":["p"],"id":1415}],[{"start":{"row":32,"column":24},"end":{"row":32,"column":25},"action":"insert","lines":["1"],"id":1416}],[{"start":{"row":0,"column":0},"end":{"row":495,"column":0},"action":"remove","lines":["/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","Last Updated 2/23/2017","*/","/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","var HealthColors = HealthColors || (function() {","    'use strict';","    var version = '1.1.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","/*--------","ON TOKEN UPDATE","--------*/","        handleToken = function(obj, prev) {","            var ColorOn = state.HealthColors.auraColorOn;","            var bar = state.HealthColors.auraBar;","            var tint = state.HealthColors.auraTint;","            var onPerc = state.HealthColors.auraPerc;","            var dead = state.HealthColors.auraDead;","            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","                if (ColorOn !== true) return; //Check Toggle","//CHECK BARS ------------","                if (obj.get(bar + \"_max\") === \"\" || obj.get(bar + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(bar + \"_max\"), 10);","                var curValue = parseInt(obj.get(bar + \"_value\"), 10);","                var prevValue = prev[bar + \"_value\"];","                if (isNaN(maxValue) && isNaN(curValue)) return;","//CALC PERCENTAGE------------","                var percReal = Math.round((curValue / maxValue) * 100);","                var temp1 = percentToRGB(percReal);","                GMW(temp1)","                var perc = Math.round((curValue / maxValue) * 120);","//SET DEAD------------","                if (curValue <= 0 && dead === true) {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                    return;","                }","                else if (dead === true) obj.set(\"status_dead\", false);","//PERCENTAGE OFF------------","                if (percReal > onPerc) {","                    SetAuraNone(obj);","                    return;","                }","//CHECK DISABLED TOKEN------------","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if (oCharacter !== undefined) {","                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter);","                    var UseAuraAtt = findObjs({","                        name: \"USECOLOR\",","                        _type: \"attribute\",","                        characterid: oCharacter.id","                    }, {","                        caseInsensitive: true","                    })[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if (UseAura != \"YES\" && UseAura != \"NO\") {","                        UseAuraAtt.set('current', \"YES\");","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                    if (UseAura == \"NO\") return;","                }","//CHECK MONSTER OR PLAYER------------","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","//IF PLAYER------------","                var markerColor = newColor(perc);","                var pColor = '#ffffff';","                var GM = '';","                var PC = '';","                if (type == 'Player') {","                    if (state.HealthColors.PCAura === false) return;","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if (player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.PCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","","                }","//IF MONSTER------------","                if (type == 'Monster') {","                    if (state.HealthColors.NPCAura === false) return;","                    GM = state.HealthColors.GM_NPCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.NPCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","                }","//SET AURA|TINT------------","                if (tint === true) obj.set({","                    'tint_color': markerColor,","                });","                else {","                    TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","//SPURT FX------------","                if (state.HealthColors.FX == true) {","                    if (curValue == prevValue || prevValue == \"\") return;","                    var amount = Math.abs(curValue-prevValue);","                    var HitSize = (amount/maxValue)*4;","                    var HitSize = Math.max(HitSize, 0.5);","                    GMW(HitSize);","                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);","                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                    var size = obj.get(\"height\");","                    var multi = size / 70;","                    var StartColor = HurtColor;","                    var EndColor = [255, 0, 0, 0];","                    if (curValue > prevValue && prevValue !== \"\") {","                        StartColor = HealColor;","                        EndColor = [255, 255, 255, 0];","                    }","                    var HITS = {","                        \"maxParticles\": 150*HitSize,","                        \"duration\": 50*HitSize,","                        \"size\": size / 10*HitSize,","                        \"sizeRandom\": 3,","                        \"lifeSpan\": 25,","                        \"lifeSpanRandom\": 5,","                        \"speed\": multi * 8,","                        \"speedRandom\": multi * 2,","                        \"gravity\": {","                            \"x\": multi * 0.01,","                            \"y\": multi * 0.65","                        },","                        \"angle\": 270,","                        \"angleRandom\": 15,","                        \"emissionRate\": 5,","                        \"startColour\": StartColor,","                        \"endColour\": EndColor,","                    };","                    spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));","                }","            }","        },","/*--------","CHAT MESSAGE"," --------*/","        handleInput = function(msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                if (!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    var option = msgFormula[1];","                    if (option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch (msgFormula[1].toUpperCase()) {","                        case \"ON\":","                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                            aurahelp();","                            break;","                        case \"BAR\":","                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                            aurahelp();","                            break;","                        case \"TINT\":","                            state.HealthColors.auraTint = !state.HealthColors.auraTint;","                            aurahelp();","                            break;","                        case \"PERC\":","                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);","                            aurahelp();","                            break;","                        case \"PC\":","                            state.HealthColors.PCAura = !state.HealthColors.PCAura;","                            aurahelp();","                            break;","                        case \"NPC\":","                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                            aurahelp();","                            break;","                        case \"GMNPC\":","                            state.HealthColors.GM_NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"GMPC\":","                            state.HealthColors.GM_PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCNPC\":","                            state.HealthColors.NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCPC\":","                            state.HealthColors.PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"DEAD\":","                            state.HealthColors.auraDead = !state.HealthColors.auraDead;","                            aurahelp();","                            break;","                        case \"DEADFX\":","                            state.HealthColors.auraDeadFX = msgFormula[2];","                            aurahelp();","                            break;","                        case \"SIZE\":","                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                            aurahelp();","                            break;","                        case \"ONEOFF\":","                            state.HealthColors.OneOff = !state.HealthColors.OneOff;","                            aurahelp();","                            break;","                        case \"FX\":","                            state.HealthColors.FX = !state.HealthColors.FX;","                            aurahelp();","                            break;","                        case \"HEAL\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HealFX = UPPER;","                            aurahelp();","                            break;","                        case \"HURT\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HurtFX = UPPER;","                            aurahelp();","                            break;","                        default:","                            return;","                    }","                }","            }","        },","/*--------","FUNCTIONS","--------*/","//WHISPER GM------------","        GMW = function(text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","//DEATH SOUND------------","        PlayDeath = function(trackname) {","            var track = findObjs({","                type: 'jukeboxtrack',","                title: trackname","            })[0];","            if (track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(\"No track found\");","            }","        },","//CREATE USECOLOR ATTR------------","        CreateAttrib = function(oCharacter) {","            log(\"Creating USECOLOR\");","            createObj(\"attribute\", {","                name: 'USECOLOR',","                current: 'YES',","                characterid: oCharacter.id","            });","        },","//SET TOKEN COLORS------------","        TokenSet = function(obj, sizeSet, markerColor, pColor) {","            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","            var scale = Pageon.get(\"scale_number\") / 10;","            obj.set({","                'aura1_radius': sizeSet * scale * 1.8,","                'aura2_radius': sizeSet * scale * 0.1,","                'aura1_color': markerColor,","                'aura2_color': pColor,","                'showplayers_aura1': true,","                'showplayers_aura2': true,","            });","        },","//HELP MENU------------","        aurahelp = function() {","            var img = \"http://worldcitizenfinancial.com/wp-content/uploads/2014/07/Light-Blue-Gradient-Texture-11-1024x576.jpg\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; background-image: url(' + img + '); color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--","                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|None}\">' + FX + '</a><br>' + //--","                HR + //--","                'Global GM Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                'Global GM Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                HR + //--","                ' Global PC Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                ' Global PC Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Sound Name?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Sound Name?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","//OFF BUTTON COLORS------------","        ButtonColor = function(state, off, disable) {","            var color;","            if (state == \"No\") color = off;","            if (state == \"Off\") color = disable;","            return color;","        },","//REMOVE ALL------------","        SetAuraNone = function(obj) {","            var tint = state.HealthColors.auraTint;","            if (tint === true) {","                obj.set({","                    'tint_color': \"transparent\",","                });","            }","            else {","                obj.set({","                    'aura1_color': \"\",","                    'aura2_color': \"\",","                });","            }","        },","//SET TOKEN COLORS------------","        newColor = function(ratio) {","            var color = hsl2rgb(ratio, 100, 50);","            var hex = rgbToHex(color.r, color.g, color.b);","            return (hex);","        },","        percentToRGB = function (percent) {","\t    if (percent === 100) percent = 99;","\t    var r, g, b;","\t    if (percent < 50) {","\t        // green to yellow","\t        r = Math.floor(255 * (percent / 50));","\t        g = 255;","\t    } else {","\t        // yellow to red","\t        r = 255;","\t        g = Math.floor(255 * ((50 - percent % 50) / 50));","\t    }","\t    b = 0;","\t    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";","\t},","//HEX TO RGB------------","        HEXtoRGB = function(hex) {","            let parts = hex.match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if (parts) {","                let rgb = _.chain(parts)","                    .rest()","                    .map((d) => parseInt(d, 16))","                    .value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 1.0];","        },","//RGB TO HEX COLOR------------","        rgbToHex = function(r, g, b) {","            return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","        },","//HSL TO RGB COLOR------------","        hsl2rgb = function(h, s, l) {","            var r, g, b, m, c, x;","            if (!isFinite(h)) h = 0;","            if (!isFinite(s)) s = 0;","            if (!isFinite(l)) l = 0;","            h /= 60;","            if (h < 0) h = 6 - (-h % 6);","            h %= 6;","            s = Math.max(0, Math.min(1, s / 100));","            l = Math.max(0, Math.min(1, l / 100));","            c = (1 - Math.abs((2 * l) - 1)) * s;","            x = c * (1 - Math.abs((h % 2) - 1));","            if (h < 1) {","                r = c;","                g = x;","                b = 0;","            }","            else if (h < 2) {","                r = x;","                g = c;","                b = 0;","            }","            else if (h < 3) {","                r = 0;","                g = c;","                b = x;","            }","            else if (h < 4) {","                r = 0;","                g = x;","                b = c;","            }","            else if (h < 5) {","                r = x;","                g = 0;","                b = c;","            }","            else {","                r = c;","                g = 0;","                b = x;","            }","            m = l - c / 2;","            r = Math.round((r + m) * 255);","            g = Math.round((g + m) * 255);","            b = Math.round((b + m) * 255);","            return {","                r: r,","                g: g,","                b: b","            };","        },","//CHECK INSTALL SET STATE------------","        checkInstall = function() {","            log('<' + ScriptName + ' v' + version + ' Ready>');","            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {","                    schemaVersion: schemaVersion","                };","                state.HealthColors.version = version;","            }","            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing","            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status","            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","        },","        registerEventHandlers = function() {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","        };","/*-------------","RETURN OUTSIDE FUNCTIONS","-----------*/","    return {","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function() {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});",""],"id":1417},{"start":{"row":0,"column":0},"end":{"row":498,"column":0},"action":"insert","lines":["/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","Last Updated 2/23/2017","*/","/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","var HealthColors = HealthColors || (function() {","    'use strict';","    var version = '1.1.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","/*--------","ON TOKEN UPDATE","--------*/","        handleToken = function(obj, prev) {","            var ColorOn = state.HealthColors.auraColorOn;","            var bar = state.HealthColors.auraBar;","            var tint = state.HealthColors.auraTint;","            var onPerc = state.HealthColors.auraPerc;","            var dead = state.HealthColors.auraDead;","            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","                if (ColorOn !== true) return; //Check Toggle","//CHECK BARS ------------","                if (obj.get(bar + \"_max\") === \"\" || obj.get(bar + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(bar + \"_max\"), 10);","                var curValue = parseInt(obj.get(bar + \"_value\"), 10);","                var prevValue = prev[bar + \"_value\"];","                if (isNaN(maxValue) && isNaN(curValue)) return;","//CALC PERCENTAGE------------","                var percReal = Math.round((curValue / maxValue) * 100);","                var perc = Math.round((curValue / maxValue) * 120);","//SET DEAD------------","                if (curValue <= 0 && dead === true) {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                    return;","                }","                else if (dead === true) obj.set(\"status_dead\", false);","//PERCENTAGE OFF------------","                if (percReal > onPerc) {","                    SetAuraNone(obj);","                    return;","                }","//CHECK DISABLED TOKEN------------","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if (oCharacter !== undefined) {","                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter);","                    var UseAuraAtt = findObjs({","                        name: \"USECOLOR\",","                        _type: \"attribute\",","                        characterid: oCharacter.id","                    }, {","                        caseInsensitive: true","                    })[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if (UseAura != \"YES\" && UseAura != \"NO\") {","                        UseAuraAtt.set('current', \"YES\");","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                    if (UseAura == \"NO\") return;","                }","//CHECK MONSTER OR PLAYER------------","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","//IF PLAYER------------","                var markerColor = newColor(perc);","                var temp1 = percentToRGB(percReal);","                GMW(markerColor);","                GMW(rgbToHex(temp1[0],temp1[1],temp1[2]));","                var pColor = '#ffffff';","                var GM = '';","                var PC = '';","                if (type == 'Player') {","                    if (state.HealthColors.PCAura === false) return;","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if (player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.PCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","","                }","//IF MONSTER------------","                if (type == 'Monster') {","                    if (state.HealthColors.NPCAura === false) return;","                    GM = state.HealthColors.GM_NPCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.NPCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","                }","//SET AURA|TINT------------","                if (tint === true) obj.set({","                    'tint_color': markerColor,","                });","                else {","                    TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","//SPURT FX------------","                if (state.HealthColors.FX == true) {","                    if (curValue == prevValue || prevValue == \"\") return;","                    var amount = Math.abs(curValue-prevValue);","                    var HitSize = (amount/maxValue)*4;","                    var HitSize = Math.max(HitSize, 0.5);","                    GMW(HitSize);","                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);","                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                    var size = obj.get(\"height\");","                    var multi = size / 70;","                    var StartColor = HurtColor;","                    var EndColor = [255, 0, 0, 0];","                    if (curValue > prevValue && prevValue !== \"\") {","                        StartColor = HealColor;","                        EndColor = [255, 255, 255, 0];","                    }","                    var HITS = {","                        \"maxParticles\": 150*HitSize,","                        \"duration\": 50*HitSize,","                        \"size\": size / 10*HitSize,","                        \"sizeRandom\": 3,","                        \"lifeSpan\": 25,","                        \"lifeSpanRandom\": 5,","                        \"speed\": multi * 8,","                        \"speedRandom\": multi * 2,","                        \"gravity\": {","                            \"x\": multi * 0.01,","                            \"y\": multi * 0.65","                        },","                        \"angle\": 270,","                        \"angleRandom\": 15,","                        \"emissionRate\": 5,","                        \"startColour\": StartColor,","                        \"endColour\": EndColor,","                    };","                    spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));","                }","            }","        },","/*--------","CHAT MESSAGE"," --------*/","        handleInput = function(msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                if (!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    var option = msgFormula[1];","                    if (option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch (msgFormula[1].toUpperCase()) {","                        case \"ON\":","                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                            aurahelp();","                            break;","                        case \"BAR\":","                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                            aurahelp();","                            break;","                        case \"TINT\":","                            state.HealthColors.auraTint = !state.HealthColors.auraTint;","                            aurahelp();","                            break;","                        case \"PERC\":","                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);","                            aurahelp();","                            break;","                        case \"PC\":","                            state.HealthColors.PCAura = !state.HealthColors.PCAura;","                            aurahelp();","                            break;","                        case \"NPC\":","                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                            aurahelp();","                            break;","                        case \"GMNPC\":","                            state.HealthColors.GM_NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"GMPC\":","                            state.HealthColors.GM_PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCNPC\":","                            state.HealthColors.NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCPC\":","                            state.HealthColors.PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"DEAD\":","                            state.HealthColors.auraDead = !state.HealthColors.auraDead;","                            aurahelp();","                            break;","                        case \"DEADFX\":","                            state.HealthColors.auraDeadFX = msgFormula[2];","                            aurahelp();","                            break;","                        case \"SIZE\":","                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                            aurahelp();","                            break;","                        case \"ONEOFF\":","                            state.HealthColors.OneOff = !state.HealthColors.OneOff;","                            aurahelp();","                            break;","                        case \"FX\":","                            state.HealthColors.FX = !state.HealthColors.FX;","                            aurahelp();","                            break;","                        case \"HEAL\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HealFX = UPPER;","                            aurahelp();","                            break;","                        case \"HURT\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HurtFX = UPPER;","                            aurahelp();","                            break;","                        default:","                            return;","                    }","                }","            }","        },","/*--------","FUNCTIONS","--------*/","//WHISPER GM------------","        GMW = function(text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","//DEATH SOUND------------","        PlayDeath = function(trackname) {","            var track = findObjs({","                type: 'jukeboxtrack',","                title: trackname","            })[0];","            if (track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(\"No track found\");","            }","        },","//CREATE USECOLOR ATTR------------","        CreateAttrib = function(oCharacter) {","            log(\"Creating USECOLOR\");","            createObj(\"attribute\", {","                name: 'USECOLOR',","                current: 'YES',","                characterid: oCharacter.id","            });","        },","//SET TOKEN COLORS------------","        TokenSet = function(obj, sizeSet, markerColor, pColor) {","            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","            var scale = Pageon.get(\"scale_number\") / 10;","            obj.set({","                'aura1_radius': sizeSet * scale * 1.8,","                'aura2_radius': sizeSet * scale * 0.1,","                'aura1_color': markerColor,","                'aura2_color': pColor,","                'showplayers_aura1': true,","                'showplayers_aura2': true,","            });","        },","//HELP MENU------------","        aurahelp = function() {","            var img = \"http://worldcitizenfinancial.com/wp-content/uploads/2014/07/Light-Blue-Gradient-Texture-11-1024x576.jpg\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; background-image: url(' + img + '); color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--","                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|None}\">' + FX + '</a><br>' + //--","                HR + //--","                'Global GM Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                'Global GM Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                HR + //--","                ' Global PC Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                ' Global PC Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Sound Name?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Sound Name?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","//OFF BUTTON COLORS------------","        ButtonColor = function(state, off, disable) {","            var color;","            if (state == \"No\") color = off;","            if (state == \"Off\") color = disable;","            return color;","        },","//REMOVE ALL------------","        SetAuraNone = function(obj) {","            var tint = state.HealthColors.auraTint;","            if (tint === true) {","                obj.set({","                    'tint_color': \"transparent\",","                });","            }","            else {","                obj.set({","                    'aura1_color': \"\",","                    'aura2_color': \"\",","                });","            }","        },","//SET TOKEN COLORS------------","        newColor = function(ratio) {","            var color = hsl2rgb(ratio, 100, 50);","            var hex = rgbToHex(color.r, color.g, color.b);","            return (hex);","        },","        percentToRGB = function (percent) {","\t    if (percent === 100) percent = 99;","\t    var r, g, b;","\t    if (percent < 50) {","\t        // green to yellow","\t        r = Math.floor(255 * (percent / 50));","\t        g = 255;","\t    } else {","\t        // yellow to red","\t        r = 255;","\t        g = Math.floor(255 * ((50 - percent % 50) / 50));","\t    }","\t    b = 0;","\t    return [r,g,b];","\t},","//HEX TO RGB------------","        HEXtoRGB = function(hex) {","            let parts = hex.match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if (parts) {","                let rgb = _.chain(parts)","                    .rest()","                    .map((d) => parseInt(d, 16))","                    .value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 1.0];","        },","//RGB TO HEX COLOR------------","        rgbToHex = function(r, g, b) {","            var Color = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            log([r,g,b]);","            return Color;","        },","//HSL TO RGB COLOR------------","        hsl2rgb = function(h, s, l) {","            var r, g, b, m, c, x;","            if (!isFinite(h)) h = 0;","            if (!isFinite(s)) s = 0;","            if (!isFinite(l)) l = 0;","            h /= 60;","            if (h < 0) h = 6 - (-h % 6);","            h %= 6;","            s = Math.max(0, Math.min(1, s / 100));","            l = Math.max(0, Math.min(1, l / 100));","            c = (1 - Math.abs((2 * l) - 1)) * s;","            x = c * (1 - Math.abs((h % 2) - 1));","            if (h < 1) {","                r = c;","                g = x;","                b = 0;","            }","            else if (h < 2) {","                r = x;","                g = c;","                b = 0;","            }","            else if (h < 3) {","                r = 0;","                g = c;","                b = x;","            }","            else if (h < 4) {","                r = 0;","                g = x;","                b = c;","            }","            else if (h < 5) {","                r = x;","                g = 0;","                b = c;","            }","            else {","                r = c;","                g = 0;","                b = x;","            }","            m = l - c / 2;","            r = Math.round((r + m) * 255);","            g = Math.round((g + m) * 255);","            b = Math.round((b + m) * 255);","            return {","                r: r,","                g: g,","                b: b","            };","        },","//CHECK INSTALL SET STATE------------","        checkInstall = function() {","            log('<' + ScriptName + ' v' + version + ' Ready>');","            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {","                    schemaVersion: schemaVersion","                };","                state.HealthColors.version = version;","            }","            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing","            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status","            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","        },","        registerEventHandlers = function() {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","        };","/*-------------","RETURN OUTSIDE FUNCTIONS","-----------*/","    return {","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function() {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});",""]}],[{"start":{"row":370,"column":0},"end":{"row":370,"column":27},"action":"remove","lines":["\t        // green to yellow"],"id":1418}],[{"start":{"row":370,"column":0},"end":{"row":371,"column":0},"action":"remove","lines":["",""],"id":1419}],[{"start":{"row":373,"column":0},"end":{"row":373,"column":25},"action":"remove","lines":["\t        // yellow to red"],"id":1420}],[{"start":{"row":373,"column":0},"end":{"row":374,"column":0},"action":"remove","lines":["",""],"id":1421}],[{"start":{"row":376,"column":11},"end":{"row":377,"column":0},"action":"insert","lines":["",""],"id":1422},{"start":{"row":377,"column":0},"end":{"row":377,"column":5},"action":"insert","lines":["\t    "]}],[{"start":{"row":377,"column":5},"end":{"row":377,"column":6},"action":"insert","lines":["l"],"id":1423}],[{"start":{"row":377,"column":6},"end":{"row":377,"column":7},"action":"insert","lines":["o"],"id":1424}],[{"start":{"row":377,"column":7},"end":{"row":377,"column":8},"action":"insert","lines":["g"],"id":1425}],[{"start":{"row":377,"column":8},"end":{"row":377,"column":10},"action":"insert","lines":["()"],"id":1426}],[{"start":{"row":377,"column":9},"end":{"row":377,"column":16},"action":"insert","lines":["[r,g,b]"],"id":1427}],[{"start":{"row":377,"column":9},"end":{"row":377,"column":10},"action":"insert","lines":["a"],"id":1428}],[{"start":{"row":377,"column":9},"end":{"row":377,"column":10},"action":"remove","lines":["a"],"id":1429}],[{"start":{"row":377,"column":9},"end":{"row":377,"column":10},"action":"insert","lines":["\""],"id":1430}],[{"start":{"row":377,"column":10},"end":{"row":377,"column":11},"action":"insert","lines":["a"],"id":1431}],[{"start":{"row":377,"column":11},"end":{"row":377,"column":12},"action":"insert","lines":["'"],"id":1432}],[{"start":{"row":377,"column":11},"end":{"row":377,"column":12},"action":"remove","lines":["'"],"id":1433}],[{"start":{"row":377,"column":11},"end":{"row":377,"column":12},"action":"insert","lines":["\""],"id":1434}],[{"start":{"row":377,"column":12},"end":{"row":377,"column":13},"action":"insert","lines":["="],"id":1435}],[{"start":{"row":377,"column":12},"end":{"row":377,"column":13},"action":"remove","lines":["="],"id":1436}],[{"start":{"row":377,"column":12},"end":{"row":377,"column":13},"action":"insert","lines":["+"],"id":1437}],[{"start":{"row":0,"column":0},"end":{"row":497,"column":0},"action":"remove","lines":["/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","Last Updated 2/23/2017","*/","/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","var HealthColors = HealthColors || (function() {","    'use strict';","    var version = '1.1.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","/*--------","ON TOKEN UPDATE","--------*/","        handleToken = function(obj, prev) {","            var ColorOn = state.HealthColors.auraColorOn;","            var bar = state.HealthColors.auraBar;","            var tint = state.HealthColors.auraTint;","            var onPerc = state.HealthColors.auraPerc;","            var dead = state.HealthColors.auraDead;","            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","                if (ColorOn !== true) return; //Check Toggle","//CHECK BARS ------------","                if (obj.get(bar + \"_max\") === \"\" || obj.get(bar + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(bar + \"_max\"), 10);","                var curValue = parseInt(obj.get(bar + \"_value\"), 10);","                var prevValue = prev[bar + \"_value\"];","                if (isNaN(maxValue) && isNaN(curValue)) return;","//CALC PERCENTAGE------------","                var percReal = Math.round((curValue / maxValue) * 100);","                var perc = Math.round((curValue / maxValue) * 120);","//SET DEAD------------","                if (curValue <= 0 && dead === true) {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                    return;","                }","                else if (dead === true) obj.set(\"status_dead\", false);","//PERCENTAGE OFF------------","                if (percReal > onPerc) {","                    SetAuraNone(obj);","                    return;","                }","//CHECK DISABLED TOKEN------------","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if (oCharacter !== undefined) {","                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter);","                    var UseAuraAtt = findObjs({","                        name: \"USECOLOR\",","                        _type: \"attribute\",","                        characterid: oCharacter.id","                    }, {","                        caseInsensitive: true","                    })[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if (UseAura != \"YES\" && UseAura != \"NO\") {","                        UseAuraAtt.set('current', \"YES\");","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                    if (UseAura == \"NO\") return;","                }","//CHECK MONSTER OR PLAYER------------","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","//IF PLAYER------------","                var markerColor = newColor(perc);","                var temp1 = percentToRGB(percReal);","                GMW(markerColor);","                GMW(rgbToHex(temp1[0],temp1[1],temp1[2]));","                var pColor = '#ffffff';","                var GM = '';","                var PC = '';","                if (type == 'Player') {","                    if (state.HealthColors.PCAura === false) return;","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if (player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.PCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","","                }","//IF MONSTER------------","                if (type == 'Monster') {","                    if (state.HealthColors.NPCAura === false) return;","                    GM = state.HealthColors.GM_NPCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.NPCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","                }","//SET AURA|TINT------------","                if (tint === true) obj.set({","                    'tint_color': markerColor,","                });","                else {","                    TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","//SPURT FX------------","                if (state.HealthColors.FX == true) {","                    if (curValue == prevValue || prevValue == \"\") return;","                    var amount = Math.abs(curValue-prevValue);","                    var HitSize = (amount/maxValue)*4;","                    var HitSize = Math.max(HitSize, 0.5);","                    GMW(HitSize);","                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);","                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                    var size = obj.get(\"height\");","                    var multi = size / 70;","                    var StartColor = HurtColor;","                    var EndColor = [255, 0, 0, 0];","                    if (curValue > prevValue && prevValue !== \"\") {","                        StartColor = HealColor;","                        EndColor = [255, 255, 255, 0];","                    }","                    var HITS = {","                        \"maxParticles\": 150*HitSize,","                        \"duration\": 50*HitSize,","                        \"size\": size / 10*HitSize,","                        \"sizeRandom\": 3,","                        \"lifeSpan\": 25,","                        \"lifeSpanRandom\": 5,","                        \"speed\": multi * 8,","                        \"speedRandom\": multi * 2,","                        \"gravity\": {","                            \"x\": multi * 0.01,","                            \"y\": multi * 0.65","                        },","                        \"angle\": 270,","                        \"angleRandom\": 15,","                        \"emissionRate\": 5,","                        \"startColour\": StartColor,","                        \"endColour\": EndColor,","                    };","                    spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));","                }","            }","        },","/*--------","CHAT MESSAGE"," --------*/","        handleInput = function(msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                if (!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    var option = msgFormula[1];","                    if (option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch (msgFormula[1].toUpperCase()) {","                        case \"ON\":","                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                            aurahelp();","                            break;","                        case \"BAR\":","                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                            aurahelp();","                            break;","                        case \"TINT\":","                            state.HealthColors.auraTint = !state.HealthColors.auraTint;","                            aurahelp();","                            break;","                        case \"PERC\":","                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);","                            aurahelp();","                            break;","                        case \"PC\":","                            state.HealthColors.PCAura = !state.HealthColors.PCAura;","                            aurahelp();","                            break;","                        case \"NPC\":","                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                            aurahelp();","                            break;","                        case \"GMNPC\":","                            state.HealthColors.GM_NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"GMPC\":","                            state.HealthColors.GM_PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCNPC\":","                            state.HealthColors.NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCPC\":","                            state.HealthColors.PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"DEAD\":","                            state.HealthColors.auraDead = !state.HealthColors.auraDead;","                            aurahelp();","                            break;","                        case \"DEADFX\":","                            state.HealthColors.auraDeadFX = msgFormula[2];","                            aurahelp();","                            break;","                        case \"SIZE\":","                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                            aurahelp();","                            break;","                        case \"ONEOFF\":","                            state.HealthColors.OneOff = !state.HealthColors.OneOff;","                            aurahelp();","                            break;","                        case \"FX\":","                            state.HealthColors.FX = !state.HealthColors.FX;","                            aurahelp();","                            break;","                        case \"HEAL\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HealFX = UPPER;","                            aurahelp();","                            break;","                        case \"HURT\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HurtFX = UPPER;","                            aurahelp();","                            break;","                        default:","                            return;","                    }","                }","            }","        },","/*--------","FUNCTIONS","--------*/","//WHISPER GM------------","        GMW = function(text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","//DEATH SOUND------------","        PlayDeath = function(trackname) {","            var track = findObjs({","                type: 'jukeboxtrack',","                title: trackname","            })[0];","            if (track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(\"No track found\");","            }","        },","//CREATE USECOLOR ATTR------------","        CreateAttrib = function(oCharacter) {","            log(\"Creating USECOLOR\");","            createObj(\"attribute\", {","                name: 'USECOLOR',","                current: 'YES',","                characterid: oCharacter.id","            });","        },","//SET TOKEN COLORS------------","        TokenSet = function(obj, sizeSet, markerColor, pColor) {","            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","            var scale = Pageon.get(\"scale_number\") / 10;","            obj.set({","                'aura1_radius': sizeSet * scale * 1.8,","                'aura2_radius': sizeSet * scale * 0.1,","                'aura1_color': markerColor,","                'aura2_color': pColor,","                'showplayers_aura1': true,","                'showplayers_aura2': true,","            });","        },","//HELP MENU------------","        aurahelp = function() {","            var img = \"http://worldcitizenfinancial.com/wp-content/uploads/2014/07/Light-Blue-Gradient-Texture-11-1024x576.jpg\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; background-image: url(' + img + '); color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--","                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|None}\">' + FX + '</a><br>' + //--","                HR + //--","                'Global GM Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                'Global GM Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                HR + //--","                ' Global PC Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                ' Global PC Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Sound Name?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Sound Name?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","//OFF BUTTON COLORS------------","        ButtonColor = function(state, off, disable) {","            var color;","            if (state == \"No\") color = off;","            if (state == \"Off\") color = disable;","            return color;","        },","//REMOVE ALL------------","        SetAuraNone = function(obj) {","            var tint = state.HealthColors.auraTint;","            if (tint === true) {","                obj.set({","                    'tint_color': \"transparent\",","                });","            }","            else {","                obj.set({","                    'aura1_color': \"\",","                    'aura2_color': \"\",","                });","            }","        },","//SET TOKEN COLORS------------","        newColor = function(ratio) {","            var color = hsl2rgb(ratio, 100, 50);","            var hex = rgbToHex(color.r, color.g, color.b);","            return (hex);","        },","        percentToRGB = function (percent) {","\t    if (percent === 100) percent = 99;","\t    var r, g, b;","\t    if (percent < 50) {","\t        r = Math.floor(255 * (percent / 50));","\t        g = 255;","\t    } else {","\t        r = 255;","\t        g = Math.floor(255 * ((50 - percent % 50) / 50));","\t    }","\t    b = 0;","\t    log(\"a\"+[r,g,b])","\t    return [r,g,b];","\t},","//HEX TO RGB------------","        HEXtoRGB = function(hex) {","            let parts = hex.match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if (parts) {","                let rgb = _.chain(parts)","                    .rest()","                    .map((d) => parseInt(d, 16))","                    .value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 1.0];","        },","//RGB TO HEX COLOR------------","        rgbToHex = function(r, g, b) {","            var Color = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            log([r,g,b]);","            return Color;","        },","//HSL TO RGB COLOR------------","        hsl2rgb = function(h, s, l) {","            var r, g, b, m, c, x;","            if (!isFinite(h)) h = 0;","            if (!isFinite(s)) s = 0;","            if (!isFinite(l)) l = 0;","            h /= 60;","            if (h < 0) h = 6 - (-h % 6);","            h %= 6;","            s = Math.max(0, Math.min(1, s / 100));","            l = Math.max(0, Math.min(1, l / 100));","            c = (1 - Math.abs((2 * l) - 1)) * s;","            x = c * (1 - Math.abs((h % 2) - 1));","            if (h < 1) {","                r = c;","                g = x;","                b = 0;","            }","            else if (h < 2) {","                r = x;","                g = c;","                b = 0;","            }","            else if (h < 3) {","                r = 0;","                g = c;","                b = x;","            }","            else if (h < 4) {","                r = 0;","                g = x;","                b = c;","            }","            else if (h < 5) {","                r = x;","                g = 0;","                b = c;","            }","            else {","                r = c;","                g = 0;","                b = x;","            }","            m = l - c / 2;","            r = Math.round((r + m) * 255);","            g = Math.round((g + m) * 255);","            b = Math.round((b + m) * 255);","            return {","                r: r,","                g: g,","                b: b","            };","        },","//CHECK INSTALL SET STATE------------","        checkInstall = function() {","            log('<' + ScriptName + ' v' + version + ' Ready>');","            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {","                    schemaVersion: schemaVersion","                };","                state.HealthColors.version = version;","            }","            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing","            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status","            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","        },","        registerEventHandlers = function() {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","        };","/*-------------","RETURN OUTSIDE FUNCTIONS","-----------*/","    return {","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function() {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});",""],"id":1438},{"start":{"row":0,"column":0},"end":{"row":443,"column":0},"action":"insert","lines":["/*","My Profile link: https://app.roll20.net/users/262130/dxwarlock","GIT link: https://github.com/dxwarlock/Roll20/blob/master/Public/HeathColors","Roll20Link: https://app.roll20.net/forum/post/4630083/script-aura-slash-tint-healthcolor","Last Updated 2/23/2017","*/","/*global createObj getAttrByName spawnFxWithDefinition getObj state playerIsGM sendChat _ findObjs log on*/","var HealthColors = HealthColors || (function() {","    'use strict';","    var version = '1.1.0',","        ScriptName = \"HealthColors\",","        schemaVersion = '1.0.3',","/*--------","ON TOKEN UPDATE","--------*/","        handleToken = function(obj, prev) {","            var ColorOn = state.HealthColors.auraColorOn;","            var bar = state.HealthColors.auraBar;","            var tint = state.HealthColors.auraTint;","            var onPerc = state.HealthColors.auraPerc;","            var dead = state.HealthColors.auraDead;","            if (obj.get(\"represents\") !== \"\" || (obj.get(\"represents\") == \"\" && state.HealthColors.OneOff == true)) {","                if (ColorOn !== true) return; //Check Toggle","//CHECK BARS ------------","                if (obj.get(bar + \"_max\") === \"\" || obj.get(bar + \"_value\") === \"\") return;","                var maxValue = parseInt(obj.get(bar + \"_max\"), 10);","                var curValue = parseInt(obj.get(bar + \"_value\"), 10);","                var prevValue = prev[bar + \"_value\"];","                if (isNaN(maxValue) && isNaN(curValue)) return;","//CALC PERCENTAGE------------","                var percReal = Math.round((curValue / maxValue) * 100);","                var perc = Math.round((curValue / maxValue) * 120);","//SET DEAD------------","                if (curValue <= 0 && dead === true) {","                    obj.set(\"status_dead\", true);","                    SetAuraNone(obj);","                    if (state.HealthColors.auraDeadFX !== \"None\") PlayDeath(state.HealthColors.auraDeadFX);","                    return;","                }","                else if (dead === true) obj.set(\"status_dead\", false);","//PERCENTAGE OFF------------","                if (percReal > onPerc) {","                    SetAuraNone(obj);","                    return;","                }","//CHECK DISABLED TOKEN------------","                var oCharacter = getObj('character', obj.get(\"_represents\"));","                if (oCharacter !== undefined) {","                    if (getAttrByName(oCharacter.id, 'USECOLOR') === undefined) CreateAttrib(oCharacter);","                    var UseAuraAtt = findObjs({","                        name: \"USECOLOR\",","                        _type: \"attribute\",","                        characterid: oCharacter.id","                    }, {","                        caseInsensitive: true","                    })[0];","                    var UseAura = UseAuraAtt.get(\"current\");","                    UseAura = UseAura.toString().toUpperCase();","                    if (UseAura != \"YES\" && UseAura != \"NO\") {","                        UseAuraAtt.set('current', \"YES\");","                        var name = oCharacter.get('name');","                        GMW(name + \": USECOLOR NOT SET TO YES or NO, SETTING TO YES\");","                    }","                    UseAura = UseAuraAtt.get(\"current\").toUpperCase();","                    if (UseAura == \"NO\") return;","                }","//CHECK MONSTER OR PLAYER------------","                var type = (oCharacter === undefined || oCharacter.get(\"controlledby\") === \"\") ? 'Monster' : 'Player';","//IF PLAYER------------","                GMW(PercentToRGB(Math.min(100, percReal)))","                var GM = '';","                var PC = '';","                var markerColor = PercentToRGB(Math.min(100, percReal));","                var pColor = '#ffffff';","                if (type == 'Player') {","                    if (state.HealthColors.PCAura === false) return;","                    var cBy = oCharacter.get('controlledby');","                    var player = getObj('player', cBy);","                    pColor = '#000000';","                    if (player !== undefined) pColor = player.get('color');","                    GM = state.HealthColors.GM_PCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.PCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","","                }","//IF MONSTER------------","                if (type == 'Monster') {","                    if (state.HealthColors.NPCAura === false) return;","                    GM = state.HealthColors.GM_NPCNames;","                    if (GM != 'Off') {","                        GM = (GM == \"Yes\") ? true : false;","                        obj.set({","                            'showname': GM","                        });","                    }","                    PC = state.HealthColors.NPCNames;","                    if (PC != 'Off') {","                        PC = (PC == \"Yes\") ? true : false;","                        obj.set({","                            'showplayers_name': PC","                        });","                    }","                }","//SET AURA|TINT------------","                if (tint === true) obj.set({","                    'tint_color': markerColor,","                });","                else {","                    TokenSet(obj, state.HealthColors.AuraSize, markerColor, pColor);","                }","//SPURT FX------------","                if (state.HealthColors.FX == true) {","                    if (curValue == prevValue || prevValue == \"\") return;","                    var amount = Math.abs(curValue-prevValue);","                    var HitSize = (amount/maxValue)*4;","                    var HitSize = Math.max(HitSize, 0.5);","                    //GMW(HitSize);","                    var HealColor = HEXtoRGB(state.HealthColors.HealFX);","                    var HurtColor = HEXtoRGB(state.HealthColors.HurtFX);","                    var size = obj.get(\"height\");","                    var multi = size / 70;","                    var StartColor = HurtColor;","                    var EndColor = [255, 0, 0, 0];","                    if (curValue > prevValue && prevValue !== \"\") {","                        StartColor = HealColor;","                        EndColor = [255, 255, 255, 0];","                    }","                    var HITS = {","                        \"maxParticles\": 150*HitSize,","                        \"duration\": 50*HitSize,","                        \"size\": size / 10*HitSize,","                        \"sizeRandom\": 3,","                        \"lifeSpan\": 25,","                        \"lifeSpanRandom\": 5,","                        \"speed\": multi * 8,","                        \"speedRandom\": multi * 2,","                        \"gravity\": {","                            \"x\": multi * 0.01,","                            \"y\": multi * 0.65","                        },","                        \"angle\": 270,","                        \"angleRandom\": 15,","                        \"emissionRate\": 5,","                        \"startColour\": StartColor,","                        \"endColour\": EndColor,","                    };","                    spawnFxWithDefinition(obj.get(\"left\"), obj.get(\"top\"), HITS, obj.get(\"_pageid\"));","                }","            }","        },","/*--------","CHAT MESSAGE"," --------*/","        handleInput = function(msg) {","            var msgFormula = msg.content.split(/\\s+/);","            var command = msgFormula[0].toUpperCase();","            if (msg.type == \"api\" && command.indexOf(\"!AURA\") !== -1) {","                if (!playerIsGM(msg.playerid)) {","                    sendChat('HealthColors', \"/w \" + msg.who + \" you must be a GM to use this command!\");","                    return;","                }","                else {","                    var option = msgFormula[1];","                    if (option === undefined) {","                        aurahelp();","                        return;","                    }","                    switch (msgFormula[1].toUpperCase()) {","                        case \"ON\":","                            state.HealthColors.auraColorOn = !state.HealthColors.auraColorOn;","                            aurahelp();","                            break;","                        case \"BAR\":","                            state.HealthColors.auraBar = \"bar\" + msgFormula[2];","                            aurahelp();","                            break;","                        case \"TINT\":","                            state.HealthColors.auraTint = !state.HealthColors.auraTint;","                            aurahelp();","                            break;","                        case \"PERC\":","                            state.HealthColors.auraPerc = parseInt(msgFormula[2], 10);","                            aurahelp();","                            break;","                        case \"PC\":","                            state.HealthColors.PCAura = !state.HealthColors.PCAura;","                            aurahelp();","                            break;","                        case \"NPC\":","                            state.HealthColors.NPCAura = !state.HealthColors.NPCAura;","                            aurahelp();","                            break;","                        case \"GMNPC\":","                            state.HealthColors.GM_NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"GMPC\":","                            state.HealthColors.GM_PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCNPC\":","                            state.HealthColors.NPCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"PCPC\":","                            state.HealthColors.PCNames = msgFormula[2];","                            aurahelp();","                            break;","                        case \"DEAD\":","                            state.HealthColors.auraDead = !state.HealthColors.auraDead;","                            aurahelp();","                            break;","                        case \"DEADFX\":","                            state.HealthColors.auraDeadFX = msgFormula[2];","                            aurahelp();","                            break;","                        case \"SIZE\":","                            state.HealthColors.AuraSize = parseFloat(msgFormula[2]);","                            aurahelp();","                            break;","                        case \"ONEOFF\":","                            state.HealthColors.OneOff = !state.HealthColors.OneOff;","                            aurahelp();","                            break;","                        case \"FX\":","                            state.HealthColors.FX = !state.HealthColors.FX;","                            aurahelp();","                            break;","                        case \"HEAL\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HealFX = UPPER;","                            aurahelp();","                            break;","                        case \"HURT\":","                            var UPPER = msgFormula[2];","                            UPPER = UPPER.toUpperCase();","                            state.HealthColors.HurtFX = UPPER;","                            aurahelp();","                            break;","                        default:","                            return;","                    }","                }","            }","        },","/*--------","FUNCTIONS","--------*/","//WHISPER GM------------","        GMW = function(text) {","            sendChat('HealthColors', \"/w GM <br><b> \" + text + \"</b>\");","        },","//DEATH SOUND------------","        PlayDeath = function(trackname) {","            var track = findObjs({","                type: 'jukeboxtrack',","                title: trackname","            })[0];","            if (track) {","                track.set('playing', false);","                track.set('softstop', false);","                track.set('volume', 50);","                track.set('playing', true);","            }","            else {","                log(\"No track found\");","            }","        },","//CREATE USECOLOR ATTR------------","        CreateAttrib = function(oCharacter) {","            log(\"Creating USECOLOR\");","            createObj(\"attribute\", {","                name: 'USECOLOR',","                current: 'YES',","                characterid: oCharacter.id","            });","        },","//SET TOKEN COLORS------------","        TokenSet = function(obj, sizeSet, markerColor, pColor) {","            var Pageon = getObj(\"page\", obj.get(\"_pageid\"));","            var scale = Pageon.get(\"scale_number\") / 10;","            obj.set({","                'aura1_radius': sizeSet * scale * 1.8,","                'aura2_radius': sizeSet * scale * 0.1,","                'aura1_color': markerColor,","                'aura2_color': pColor,","                'showplayers_aura1': true,","                'showplayers_aura2': true,","            });","        },","//HELP MENU------------","        aurahelp = function() {","            var img = \"http://worldcitizenfinancial.com/wp-content/uploads/2014/07/Light-Blue-Gradient-Texture-11-1024x576.jpg\";","            var tshadow = \"-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;\";","            var style = 'style=\"padding-top: 1px; text-align:center; font-size: 9pt; width: 45px; height: 14px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';","            var off = \"#A84D4D\";","            var disable = \"#D6D6D6\";","            var HR = \"<hr style='background-color: #000000; margin: 5px; border-width:0;color: #000000;height: 1px;'/>\";","            var FX = state.HealthColors.auraDeadFX.substring(0, 4);","            sendChat('HealthColors', \"/w GM <b><br>\" + '<div style=\"border-radius: 8px 8px 8px 8px; padding: 5px; font-size: 9pt; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; background-image: url(' + img + '); color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;\">' + '<u>HealthColors Version: ' + version + '</u><br>' + //--","                HR + //--","                'Is On: <a ' + style + 'background-color:' + (state.HealthColors.auraColorOn !== true ? off : \"\") + ';\" href=\"!aura on\">' + (state.HealthColors.auraColorOn !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Bar: <a ' + style + '\" href=\"!aura bar ?{Bar|1|2|3}\">' + state.HealthColors.auraBar + '</a><br>' + //--","                'Use Tint: <a ' + style + 'background-color:' + (state.HealthColors.auraTint !== true ? off : \"\") + ';\" href=\"!aura tint\">' + (state.HealthColors.auraTint !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Percentage: <a ' + style + '\" href=\"!aura perc ?{Percent?|100}\">' + state.HealthColors.auraPerc + '</a><br>' + //--","                'Show on PC: <a ' + style + 'background-color:' + (state.HealthColors.PCAura !== true ? off : \"\") + ';\" href=\"!aura pc\">' + (state.HealthColors.PCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show on NPC: <a ' + style + 'background-color:' + (state.HealthColors.NPCAura !== true ? off : \"\") + ';\" href=\"!aura npc\">' + (state.HealthColors.NPCAura !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'Show Dead: <a ' + style + 'background-color:' + (state.HealthColors.auraDead !== true ? off : \"\") + ';\" href=\"!aura dead\">' + (state.HealthColors.auraDead !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'DeathSFX: <a ' + style + '\" href=\"!aura deadfx ?{Sound Name?|None}\">' + FX + '</a><br>' + //--","                HR + //--","                'Global GM Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_NPCNames, off, disable) + ';\" href=\"!aura gmnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_NPCNames + '</a><br>' + //---","                'Global GM Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.GM_PCNames, off, disable) + ';\" href=\"!aura gmpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.GM_PCNames + '</a><br>' + //--","                HR + //--","                ' Global PC Sees NPC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.NPCNames, off, disable) + ';\" href=\"!aura pcnpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.NPCNames + '</a><br>' + //--","                ' Global PC Sees PC Names: <a ' + style + 'background-color:' + ButtonColor(state.HealthColors.PCNames, off, disable) + ';\" href=\"!aura pcpc ?{Setting|Yes|No|Off}\">' + state.HealthColors.PCNames + '</a><br>' + //--","                HR + //--","                'Aura Size: <a ' + style + '\" href=\"!aura size ?{Size?|0.7}\">' + state.HealthColors.AuraSize + '</a><br>' + //--","                'One Offs: <a ' + style + 'background-color:' + (state.HealthColors.OneOff !== true ? off : \"\") + ';\" href=\"!aura ONEOFF\">' + (state.HealthColors.OneOff !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'FX: <a ' + style + 'background-color:' + (state.HealthColors.FX !== true ? off : \"\") + ';\" href=\"!aura FX\">' + (state.HealthColors.FX !== true ? \"No\" : \"Yes\") + '</a><br>' + //--","                'HealFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HealFX + ';\"\"href=\"!aura HEAL ?{Sound Name?|00FF00}\">' + state.HealthColors.HealFX + '</a><br>' + //--","                'HurtFX Color: <a ' + style + 'background-color:#' + state.HealthColors.HurtFX + ';\"\"href=\"!aura HURT ?{Sound Name?|FF0000}\">' + state.HealthColors.HurtFX + '</a><br>' + //--","                HR + //--","                '</div>');","        },","//OFF BUTTON COLORS------------","        ButtonColor = function(state, off, disable) {","            var color;","            if (state == \"No\") color = off;","            if (state == \"Off\") color = disable;","            return color;","        },","//REMOVE ALL------------","        SetAuraNone = function(obj) {","            var tint = state.HealthColors.auraTint;","            if (tint === true) {","                obj.set({","                    'tint_color': \"transparent\",","                });","            }","            else {","                obj.set({","                    'aura1_color': \"\",","                    'aura2_color': \"\",","                });","            }","        },","//SET TOKEN COLORS------------","        newColor = function(ratio) {","            var color = PercentToRGB(ratio, 100, 50);","            var hex = rgbToHex(color.r, color.g, color.b);","            return (hex);","        },","//PERC TO RGB------------","        PercentToRGB = function (percent) {","            GMW(percent)","\t    if (percent === 100) percent = 99;","\t    var r, g, b;","\t    if (percent < 50) {","\t        g = Math.floor(255 * (percent / 50));","\t        r = 255;","\t    } else {","\t        g = 255;","\t        r = Math.floor(255 * ((50 - percent % 50) / 50));","\t    }","\t    b = 0;","\t    var Gradient = rgbToHex(r,g,b);","\t    return Gradient;","\t},","//HEX TO RGB------------","        HEXtoRGB = function(hex) {","            let parts = hex.match(/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/);","            if (parts) {","                let rgb = _.chain(parts)","                    .rest()","                    .map((d) => parseInt(d, 16))","                    .value();","                rgb.push(1.0);","                return rgb;","            }","            return [0, 0, 0, 1.0];","        },","//RGB TO HEX COLOR------------","        rgbToHex = function(r, g, b) {","            var Color = \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);","            return Color;","        },","//CHECK INSTALL SET STATE------------","        checkInstall = function() {","            log('<' + ScriptName + ' v' + version + ' Ready>');","            if (!_.has(state, 'HealthColors') || state.HealthColors.schemaVersion !== schemaVersion) {","                log('<' + ScriptName + ' Updating Schema to v' + schemaVersion + '>');","                state.HealthColors = {","                    schemaVersion: schemaVersion","                };","                state.HealthColors.version = version;","            }","            if (_.isUndefined(state.HealthColors.auraColorOn)) state.HealthColors.auraColorOn = true; //global on or off","            if (_.isUndefined(state.HealthColors.auraBar)) state.HealthColors.auraBar = \"bar1\"; //bar to use","            if (_.isUndefined(state.HealthColors.PCAura)) state.HealthColors.PCAura = true; //show players Health?","            if (_.isUndefined(state.HealthColors.NPCAura)) state.HealthColors.NPCAura = true; //show NPC Health?","            if (_.isUndefined(state.HealthColors.auraTint)) state.HealthColors.auraTint = false; //use tint instead?","            if (_.isUndefined(state.HealthColors.auraPerc)) state.HealthColors.auraPerc = 100; //precent to start showing","            if (_.isUndefined(state.HealthColors.auraDead)) state.HealthColors.auraDead = true; //show dead X status","            if (_.isUndefined(state.HealthColors.auraDeadFX)) state.HealthColors.auraDeadFX = 'None'; //Sound FX Name","            if (_.isUndefined(state.HealthColors.GM_NPCNames)) state.HealthColors.GM_NPCNames = \"Yes\"; //show GM NPC names?","            if (_.isUndefined(state.HealthColors.NPCNames)) state.HealthColors.NPCNames = \"Yes\"; //show players NPC Names?","            if (_.isUndefined(state.HealthColors.GM_PCNames)) state.HealthColors.GM_PCNames = \"Yes\"; //show GM PC names?","            if (_.isUndefined(state.HealthColors.PCNames)) state.HealthColors.PCNames = \"Yes\"; //show players PC Names?","            if (_.isUndefined(state.HealthColors.AuraSize)) state.HealthColors.AuraSize = 0.7; //set aura size?","            if (_.isUndefined(state.HealthColors.FX)) state.HealthColors.FX = true; //set FX ON/OFF?","            if (_.isUndefined(state.HealthColors.HealFX)) state.HealthColors.HealFX = \"00FF00\"; //set FX HEAL COLOR","            if (_.isUndefined(state.HealthColors.HurtFX)) state.HealthColors.HurtFX = \"FF0000\"; //set FX HURT COLOR?","        },","        registerEventHandlers = function() {","            on('chat:message', handleInput);","            on(\"change:token\", handleToken);","        };","/*-------------","RETURN OUTSIDE FUNCTIONS","-----------*/","    return {","        CheckInstall: checkInstall,","        RegisterEventHandlers: registerEventHandlers","    };","}());","//On Ready","on('ready', function() {","    'use strict';","    HealthColors.CheckInstall();","    HealthColors.RegisterEventHandlers();","});",""]}],[{"start":{"row":366,"column":0},"end":{"row":366,"column":24},"action":"remove","lines":["            GMW(percent)"],"id":1439}],[{"start":{"row":366,"column":0},"end":{"row":367,"column":0},"action":"remove","lines":["",""],"id":1440}]]},"ace":{"folds":[],"scrolltop":463.5,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":442,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1487899311006}