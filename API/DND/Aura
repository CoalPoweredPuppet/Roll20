/*
global log state on getObj _ playerIsGM sendChat
---CLOUD9 ERROR CLEARING---
*/
/*------------------
HealthColors - DXWarlock - Roll20
------------------*/
on("ready", function() {
    AuraFunctions.setState();
});
on("chat:message", function(msg) {
    var msgFormula = msg.content.split(/\s+/);
    var command = msgFormula[0].toUpperCase();
    if(msg.type == "api" && command.indexOf("!AURA") !== -1) {
        if(!playerIsGM(msg.playerid)) {
            sendChat('HealthColors', "/w " + msg.who + " you must be a GM to use this command!");
            return;
        } else if(playerIsGM(msg.playerid)) {
            {
                var option = msgFormula[1];
                if(option == undefined) {
                    AuraFunctions.aurahelp();
                }
                if(option == "on") {
                    state.auraColorOn = !state.auraColorOn;
                    AuraFunctions.aurahelp();
                }
                if(option == "bar") {
                    state.auraBar = "bar" + msgFormula[2];
                    AuraFunctions.aurahelp();
                }
                if(option == "tint") {
                    state.auraTint = !state.auraTint;
                    AuraFunctions.aurahelp();
                }
                if(option == "perc") {
                    state.auraPerc = parseInt(msgFormula[2], 10);
                    AuraFunctions.aurahelp();
                }
                if(option == "gmnpc") {
                    state.GM_NPCNames = !state.GM_NPCNames;
                    AuraFunctions.aurahelp();
                }
                if(option == "gmpc") {
                    state.GM_PCNames = !state.GM_PCNames;
                    AuraFunctions.aurahelp();
                }
                if(option == "pcnpc") {
                    state.NPCNames = !state.NPCNames;
                    AuraFunctions.aurahelp();
                }
                if(option == "pcpc") {
                    state.PCNames = !state.PCNames;
                    AuraFunctions.aurahelp();
                }
                if(option == "dead") {
                    state.auraDead = !state.auraDead;
                    AuraFunctions.aurahelp();
                }
            }
        }
    }
});
on("change:token", function(obj) {
    var bar = state.auraBar;
    var tint = state.auraTint;
    var onPerc = state.auraPerc;
    var ColorOn = state.auraColorOn;
    var dead = state.auraDead;
    var markerColor = "";
    if(obj.get("represents") !== "") {
        if(ColorOn != true) return; //Check Toggle
        //Check bars
        if(obj.get(bar + "_max") == "" && obj.get(bar + "_value") == "") return;
        var maxValue = parseInt(obj.get(bar + "_max"), 10);
        var curValue = parseInt(obj.get(bar + "_value"), 10);
        if(isNaN(maxValue) && isNaN(curValue)) return;
        //Calc percentage
        var percReal = Math.round((curValue / maxValue) * 100);
        var perc = Math.round((curValue / maxValue) * 120);
        //Set dead
        if(curValue <= 0 && dead == true) obj.set("status_dead", true);
        else if(dead == true) obj.set("status_dead", false);
        //Monster or Player
        var oCharacter = getObj('character', obj.get("_represents"));
        var type = (oCharacter.get("controlledby") === "") ? 'Monster' : 'Player';
        //SET PLAYER AURA------------
        if(type == 'Player') {
            if(percReal > onPerc) {
                AuraFunctions.SetAuraNone(obj);
                return;
            }
            var cBy = oCharacter.get('controlledby');
            if(cBy.split(',').length == 1 && cBy != 'all') {
                var player = getObj('player', cBy);
                var pColor = player.get('color');
                markerColor = AuraFunctions.newColor(perc);
                if(tint == true) obj.set({
                    'tint_color': markerColor,
                });
                else {
                    obj.set({
                        'aura1_radius': 0.7,
                        'aura2_radius': -0.1,
                        'aura1_color': markerColor,
                        'aura2_color': pColor,
                        'showplayers_aura1': true,
                        'showplayers_aura2': true,
                        'showname': state.GM_PCNames,
                        'showplayers_name': state.PCNames
                    });
                }
            }
        }
        //SET NPC AURA------------
        if(type == 'Monster') {
            if(percReal > onPerc) {
                AuraFunctions.SetAuraNone(obj);
                return;
            }
            markerColor = AuraFunctions.newColor(perc);
            if(tint == true) obj.set({
                'tint_color': markerColor,
            });
            else {
                obj.set({
                    'aura1_radius': 0.7,
                    'aura2_radius': -0.1,
                    'aura1_color': markerColor,
                    'aura2_color': '#ffffff',
                    'showplayers_aura1': true,
                    'showplayers_aura2': true,
                    'showname': state.GM_NPCNames,
                    'showplayers_name': state.NPCNames
                });
            }
        }
    }
});
//--Functions----
var AuraFunctions = AuraFunctions || {
    aurahelp: function() {
        var img = "http://worldcitizenfinancial.com/wp-content/uploads/2014/07/Light-Blue-Gradient-Texture-11-1024x576.jpg";
        var tshadow = "-1px -1px #000, 1px -1px #000, -1px 1px #000, 1px 1px #000 , 2px 2px #222;";
        var style = 'style="text-align:center; width: 35px; border: 1px solid black; margin: 1px; background-color: #6FAEC7;border-radius: 4px;  box-shadow: 1px 1px 1px #707070;';
        var off = "#A84D4D";
        sendChat('HealthColors', "/w GM <b><br>" + '<div style="border-radius: 8px 8px 8px 8px; padding: 5px; text-shadow: ' + tshadow + '; box-shadow: 3px 3px 1px #707070; background-image: url(' + img + '); color:#FFF; border:2px solid black; text-align:right; vertical-align:middle;">' + '<u>Version: ' + state.auraversion +
            //--
            '</u><br>Is On: <a '+style+'background-color:'+(state.auraColorOn != true ? off : "")+';" href="!aura on">'+(state.auraColorOn != true ?"No" : "Yes")+'</a><br>' +
            //--
            'Bar: <a '+style+'" href="!aura bar ?{BarNumber?|1}">' + state.auraBar + '</a><br>' +
            //--
            'Use Tint: <a '+style+'background-color:'+(state.auraTint != true ? off : "")+';" href="!aura tint">'+(state.auraTint != true ? "No" : "Yes")+'</a><br>' +
            //--
            'Percentage: <a '+style+'" href="!aura perc ?{Percent?|100}">' + state.auraPerc + '</a><br>' +
            //--
            'Show Dead: <a '+style+'background-color:'+(state.auraDead != true ? off : "")+';" href="!aura dead">'+(state.auraDead != true ? "No" : "Yes")+'</a>'+
            //--
            '<hr>'+
            //--
            'GM Sees NPC Names: <a '+style+'background-color:'+( state.GM_NPCNames != true ? off : "")+';" href="!aura gmnpc">' +(state.GM_NPCNames != true ? "No" : "Yes")+'</a><br>' +
            //--
            'GM Sees PC Names: <a '+style+'background-color:'+(state.GM_PCNames != true ? off : "")+';" href="!aura gmpc">'+(state.GM_PCNames != true ? "No" : "Yes")+ '</a><br>' +
            //--
            '<hr>'+
            //--
            'PC Sees NPC Names: <a '+style+'background-color:'+(state.NPCNames != true ? off : "")+';" href="!aura pcnpc">' +(state.NPCNames != true ? "No" : "Yes")+ '</a><br>' +
            //--
            'PC Sees PC Names: <a '+style+'background-color:'+(state.PCNames != true ? off : "")+';" href="!aura pcpc">' +(state.PCNames != true ? "No" : "Yes")+ '</a><br>'+
            //--
            '</div>');

    },
    SetAuraNone: function(obj) {
        var tint = state.auraTint;
        if(tint == true) {
            obj.set({
                'tint_color': "transparent",
            });
        } else {
            obj.set({
                'aura1_color': "",
                'aura2_color': "",
            });
        }
    },
    setState: function() {
        var auraversion = "v0.8";
        if(state.auraColorOn == undefined) state.auraColorOn = true; //global on or off
        if(state.auraBar == undefined) state.auraBar = "bar1"; //bar to use
        if(state.auraTint == undefined) state.auraTint = false; //use tint instead?
        if(state.auraPerc == undefined) state.auraPerc = 100; //precent to start showing
        if(state.auraDead == undefined) state.auraDead = true; //show dead X status
        if(state.GM_NPCNames == undefined) state.GM_NPCNames = true; //show GM NPC names?
        if(state.NPCNames == undefined) state.NPCNames = true; //show players NPC Names?
        if(state.GM_PCNames == undefined) state.GM_PCNames = true; //show GM PC names?
        if(state.PCNames == undefined) state.PCNames = true; //show players PC Names?
            if(state.auraversion != auraversion) {
                state.auraversion = auraversion;
                log("Updating HealthColors to " + state.auraversion);
            }
        log("Token Health Aura/Tint " + state.auraversion + " Ready");
    },
    newColor: function(ratio) {
        var color = AuraFunctions.hsl2rgb(ratio, 100, 50);
        var hex = AuraFunctions.rgbToHex(color.r, color.g, color.b);
        return(hex);
    },
    rgbToHex: function(r, g, b) {
        return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    },
    hsl2rgb: function(h, s, l) {
        var r, g, b, m, c, x;
        if(!isFinite(h)) h = 0;
        if(!isFinite(s)) s = 0;
        if(!isFinite(l)) l = 0;
        h /= 60;
        if(h < 0) h = 6 - (-h % 6);
        h %= 6;
        s = Math.max(0, Math.min(1, s / 100));
        l = Math.max(0, Math.min(1, l / 100));
        c = (1 - Math.abs((2 * l) - 1)) * s;
        x = c * (1 - Math.abs((h % 2) - 1));
        if(h < 1) {
            r = c;
            g = x;
            b = 0;
        } else if(h < 2) {
            r = x;
            g = c;
            b = 0;
        } else if(h < 3) {
            r = 0;
            g = c;
            b = x;
        } else if(h < 4) {
            r = 0;
            g = x;
            b = c;
        } else if(h < 5) {
            r = x;
            g = 0;
            b = c;
        } else {
            r = c;
            g = 0;
            b = x;
        }
        m = l - c / 2;
        r = Math.round((r + m) * 255);
        g = Math.round((g + m) * 255);
        b = Math.round((b + m) * 255);
        return {
            r: r,
            g: g,
            b: b
        };
    }
};